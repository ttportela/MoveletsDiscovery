<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="20131001" xmlns:xmi="http://www.omg.org/spec/XMI/20131001" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:UMLLabProfile="http:///schemas/UMLLabProfile/NS/0" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/5.0.0/UML" xsi:schemaLocation="http:///schemas/UMLLabProfile/NS/0 pathmap://UMLLAB_PROFILES/UMLLab.profile.uml#UMLLabProfile-Annotation_2-UMLLabProfile">
  <uml:Model xmi:id="_wGcEsJxsEeuT9elTX1485g" name="Movelets">
    <eAnnotations xmi:id="_6PpwYJxsEeuT9elTX1485g" source="http://ns.yatta.de/umllab">
      <contents xmi:type="ecore:EAnnotation" xmi:id="_6PpwYZxsEeuT9elTX1485g" source="codegen">
        <details xmi:id="_6PpwYpxsEeuT9elTX1485g" key="codegenDirectory" value="/HIPERMovelets/src"/>
        <details xmi:id="_7Q5K8JxsEeuT9elTX1485g" key="AssociatedSourceCode" value="/HIPERMovelets/src/br/ufsc/mov3lets/method/discovery/DiscoveryAdapter.java;2000987426/1;/HIPERMovelets/src/br/ufsc/mov3lets/method/discovery/HiperCeMoveletsDiscovery.java;1814845679/1;/HIPERMovelets/src/br/ufsc/mov3lets/method/discovery/HiperEntropyMoveletsDiscovery.java;4085110427/1;/HIPERMovelets/src/br/ufsc/mov3lets/method/discovery/HiperMoveletsDiscovery.java;2443729649/1;/HIPERMovelets/src/br/ufsc/mov3lets/method/discovery/HiperPivotsCeMoveletsDiscovery.java;2750101537/1;/HIPERMovelets/src/br/ufsc/mov3lets/method/discovery/HiperPivotsMoveletsDiscovery.java;318229028/1;/HIPERMovelets/src/br/ufsc/mov3lets/method/discovery/IndexedMoveletsDiscovery.java;2630777744/1;/HIPERMovelets/src/br/ufsc/mov3lets/method/discovery/MasterMoveletsDiscovery.java;4145283508/1;/HIPERMovelets/src/br/ufsc/mov3lets/method/discovery/SuperClassMoveletsDiscovery.java;635157278/1;/HIPERMovelets/src/br/ufsc/mov3lets/method/discovery/PivotsMoveletsDiscovery.java;506578071/1;/HIPERMovelets/src/br/ufsc/mov3lets/method/discovery/RandomMoveletsDiscovery.java;1029032791/1;/HIPERMovelets/src/br/ufsc/mov3lets/method/discovery/PrecomputeMoveletsDiscovery.java;4037330234/1;/HIPERMovelets/src/br/ufsc/mov3lets/method/discovery/ProgressiveMoveletsDiscovery.java;3653434735/1;/HIPERMovelets/src/br/ufsc/mov3lets/method/discovery/PrecomputeBaseDistances.java;4257067447/1;/HIPERMovelets/src/br/ufsc/mov3lets/method/discovery/MoveletsDiscovery.java;2692499840/1;/HIPERMovelets/src/br/ufsc/mov3lets/method/discovery/SuperMoveletsDiscovery.java;2927324492/1;/HIPERMovelets/src/br/ufsc/mov3lets/method/discovery/UltraMoveletsDiscovery.java;1607990927/1;"/>
      </contents>
    </eAnnotations>
    <elementImport xmi:id="_6Q9_AJxsEeuT9elTX1485g">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
    </elementImport>
    <elementImport xmi:id="_6RAbQJxsEeuT9elTX1485g">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#byte"/>
    </elementImport>
    <elementImport xmi:id="_6RAbQZxsEeuT9elTX1485g">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#char"/>
    </elementImport>
    <elementImport xmi:id="_6RCQcJxsEeuT9elTX1485g">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
    </elementImport>
    <elementImport xmi:id="_6RDekJxsEeuT9elTX1485g">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#float"/>
    </elementImport>
    <elementImport xmi:id="_6REssJxsEeuT9elTX1485g">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
    </elementImport>
    <elementImport xmi:id="_6REssZxsEeuT9elTX1485g">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
    </elementImport>
    <elementImport xmi:id="_6REsspxsEeuT9elTX1485g">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#short"/>
    </elementImport>
    <elementImport xmi:id="_6RGh4JxsEeuT9elTX1485g">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
    </elementImport>
    <packagedElement xmi:type="uml:Package" xmi:id="_6KJlUJxsEeuT9elTX1485g" name="br">
      <packagedElement xmi:type="uml:Package" xmi:id="_6K1h0JxsEeuT9elTX1485g" name="ufsc">
        <packagedElement xmi:type="uml:Package" xmi:id="_6K2I4JxsEeuT9elTX1485g" name="mov3lets">
          <packagedElement xmi:type="uml:Package" xmi:id="_6K2I4ZxsEeuT9elTX1485g" name="method">
            <packagedElement xmi:type="uml:Package" xmi:id="_6LNVQJxsEeuT9elTX1485g" name="distancemeasure">
              <packagedElement xmi:type="uml:Class" xmi:id="_6Xqc4JxsEeuT9elTX1485g" name="DistanceMeasure"/>
            </packagedElement>
            <packagedElement xmi:type="uml:Package" xmi:id="_6LN8UJxsEeuT9elTX1485g" name="output">
              <packagedElement xmi:type="uml:Class" xmi:id="_6XuHQZxsEeuT9elTX1485g" name="CSVOutputter"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_6XxKkZxsEeuT9elTX1485g" name="JSONOutputter"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_6X008JxsEeuT9elTX1485g" name="OutputterAdapter"/>
            </packagedElement>
            <packagedElement xmi:type="uml:Package" xmi:id="_6LPKcJxsEeuT9elTX1485g" name="structures">
              <packagedElement xmi:type="uml:Package" xmi:id="_6LPxgJxsEeuT9elTX1485g" name="descriptor">
                <packagedElement xmi:type="uml:Class" xmi:id="_6X34QJxsEeuT9elTX1485g" name="Descriptor"/>
                <packagedElement xmi:type="uml:Class" xmi:id="_BByykZxtEeuT9elTX1485g" name="AttributeDescriptor"/>
              </packagedElement>
            </packagedElement>
            <packagedElement xmi:type="uml:Package" xmi:id="_6MnDcJxsEeuT9elTX1485g" name="discovery">
              <packagedElement xmi:type="uml:Class" xmi:id="_6OvxcJxsEeuT9elTX1485g" name="DiscoveryAdapter" isAbstract="true">
                <ownedComment xmi:id="_6cPa4JxsEeuT9elTX1485g">
                  <body>The Class DiscoveryAdapter.
 *
@author Tarlis Portela &lt;tarlis@tarlis.com.br>
@param &lt;MO> the generic type</body>
                </ownedComment>
                <ownedAttribute xmi:id="_6afHYJxsEeuT9elTX1485g" name="descriptor" visibility="protected" type="_6X34QJxsEeuT9elTX1485g" association="_6cjj8JxsEeuT9elTX1485g"/>
                <ownedAttribute xmi:id="_6aixwJxsEeuT9elTX1485g" name="progressBar" visibility="protected" type="_6X_NAZxsEeuT9elTX1485g" association="_6coccJxsEeuT9elTX1485g"/>
                <ownedAttribute xmi:id="_6aj_4JxsEeuT9elTX1485g" name="stats" visibility="protected">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_6amcIJxsEeuT9elTX1485g" value="&quot;&quot;"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_6aoRUJxsEeuT9elTX1485g" name="trajsFromClass" visibility="protected" type="_6X6UgJxsEeuT9elTX1485g" isOrdered="true" association="_6cst4JxsEeuT9elTX1485g">
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_6ao4YJxsEeuT9elTX1485g" value="*"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_6auX8JxsEeuT9elTX1485g" name="train" visibility="protected" type="_6X6UgJxsEeuT9elTX1485g" isOrdered="true" association="_6ct8AZxsEeuT9elTX1485g">
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_6auX8ZxsEeuT9elTX1485g" value="*"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_6aypYJxsEeuT9elTX1485g" name="test" visibility="protected" type="_6X6UgJxsEeuT9elTX1485g" isOrdered="true" association="_6cxmYJxsEeuT9elTX1485g">
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_6azQcJxsEeuT9elTX1485g" value="*"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_6a260JxsEeuT9elTX1485g" name="data" visibility="protected" type="_6X6UgJxsEeuT9elTX1485g" isOrdered="true" association="_6c0psZxsEeuT9elTX1485g">
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_6a260ZxsEeuT9elTX1485g" value="*"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_6a6lMZxsEeuT9elTX1485g" name="trajectory" visibility="protected" type="_6X6UgJxsEeuT9elTX1485g" association="_6c3F8ZxsEeuT9elTX1485g"/>
                <ownedAttribute xmi:id="_6a_dsJxsEeuT9elTX1485g" name="queue" visibility="protected" type="_6X6UgJxsEeuT9elTX1485g" isOrdered="true" association="_6c6JQJxsEeuT9elTX1485g">
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_6bAEwJxsEeuT9elTX1485g" value="*"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_6bDIEJxsEeuT9elTX1485g" name="outputers" visibility="protected" type="_6X008JxsEeuT9elTX1485g" isOrdered="true" association="_6c9MkJxsEeuT9elTX1485g">
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_6bDvIJxsEeuT9elTX1485g" value="*"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_6bGycJxsEeuT9elTX1485g" value="new ArrayList&lt;OutputterAdapter&lt;MO>>()"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_6bInoJxsEeuT9elTX1485g" name="MAX_VALUE">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_6bJOsJxsEeuT9elTX1485g" value="DistanceMeasure.DEFAULT_MAX_VALUE"/>
                </ownedAttribute>
                <interfaceRealization xmi:id="_6Yuz4JxsEeuT9elTX1485g" client="_6OvxcJxsEeuT9elTX1485g" supplier="_6XmygZxsEeuT9elTX1485g" contract="_6XmygZxsEeuT9elTX1485g"/>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_6bS_sJxsEeuT9elTX1485g" name="DiscoveryAdapter" specification="_6Y7BIJxsEeuT9elTX1485g">
                  <ownedParameter xmi:id="_6bTmwJxsEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_6bTmwZxsEeuT9elTX1485g" name="trajsFromClass" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_6bTmwpxsEeuT9elTX1485g" name="data" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_6bTmw5xsEeuT9elTX1485g" name="train" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_6bTmxJxsEeuT9elTX1485g" name="test" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_6bUN0JxsEeuT9elTX1485g" name="descriptor" type="_6X34QJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_6bUN0ZxsEeuT9elTX1485g" type="_6OvxcJxsEeuT9elTX1485g" direction="return"/>
                  <language>java</language>
                  <body>init(trajectory, trajsFromClass, data, train, test, descriptor);
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_6bnIwJxsEeuT9elTX1485g" name="DiscoveryAdapter" specification="_6ZMt8JxsEeuT9elTX1485g">
                  <ownedParameter xmi:id="_6bnIwZxsEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_6bnIwpxsEeuT9elTX1485g" name="trajsFromClass" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_6bnIw5xsEeuT9elTX1485g" name="data" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_6bnIxJxsEeuT9elTX1485g" name="train" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_6bnIxZxsEeuT9elTX1485g" name="test" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_6bnIxpxsEeuT9elTX1485g" name="descriptor" type="_6X34QJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_6bnIx5xsEeuT9elTX1485g" name="outputers" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_6bnIyJxsEeuT9elTX1485g" type="_6OvxcJxsEeuT9elTX1485g" direction="return"/>
                  <language>java</language>
                  <body>init(trajectory, trajsFromClass, data, train, test, descriptor);
		this.outputers = outputers;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_6braMJxsEeuT9elTX1485g" name="init" specification="_6Zj6UJxsEeuT9elTX1485g">
                  <ownedParameter xmi:id="_6braMZxsEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_6braMpxsEeuT9elTX1485g" name="trajsFromClass" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_6braM5xsEeuT9elTX1485g" name="data" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_6braNJxsEeuT9elTX1485g" name="train" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_6braNZxsEeuT9elTX1485g" name="test" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_6braNpxsEeuT9elTX1485g" name="descriptor" type="_6X34QJxsEeuT9elTX1485g"/>
                  <language>java</language>
                  <body>this.trajectory = trajectory;
		this.trajsFromClass = trajsFromClass;
		this.train = train;
		this.test = test;
//		this.candidates = candidates;
		this.descriptor = descriptor;
		this.data = data;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_6btPYJxsEeuT9elTX1485g" name="call" specification="_6SJDsJxsEeuT9elTX1485g">
                  <ownedParameter xmi:id="_6btPYZxsEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>discover();
		
		free();
		
		return 0;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_6bvroJxsEeuT9elTX1485g" name="free" specification="_6Sr2QJxsEeuT9elTX1485g">
                  <language>java</language>
                  <body>this.outputers = null;
		this.trajsFromClass = null;
		this.train = null;
		this.test = null;
		this.data = null;
		this.descriptor = null;

		System.gc();
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_6bw5wJxsEeuT9elTX1485g" name="getDescriptor" specification="_6StEYJxsEeuT9elTX1485g">
                  <ownedParameter xmi:id="_6bw5wZxsEeuT9elTX1485g" type="_6X34QJxsEeuT9elTX1485g" direction="return"/>
                  <language>java</language>
                  <body>return descriptor;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_6bzWAJxsEeuT9elTX1485g" name="output" specification="_6aDpkJxsEeuT9elTX1485g">
                  <ownedParameter xmi:id="_6bzWAZxsEeuT9elTX1485g" name="filename">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_6bzWApxsEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_6bzWA5xsEeuT9elTX1485g" name="movelets" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_6bzWBJxsEeuT9elTX1485g" name="delayOutput">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>// This sets the default outputters, otherwise use the configured ones	
		// By Default, it writes a JSON and a CSV in a attribute-value format
//		defaultOutputters();
		// It puts distances as trajectory attributes
		if (outputers != null)
			for (OutputterAdapter&lt;MO> output : outputers) {
				output.write(filename, trajectories, movelets, delayOutput);			
			}
		
//		trajectories.forEach(e ->  e.getFeatures().clear()); // TODO needed?
//		trajectories.forEach(e ->  e.getAttributes().clear());
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_6b41kJxsEeuT9elTX1485g" name="defaultOutputters" specification="_6SzyEJxsEeuT9elTX1485g">
                  <ownedParameter xmi:id="_6b41kZxsEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>if (this.outputers == null) {
			this.outputers = new ArrayList&lt;OutputterAdapter&lt;MO>>();
			this.outputers.add(new CSVOutputter&lt;MO>(getDescriptor()));
			this.outputers.add(new JSONOutputter&lt;MO>(getDescriptor()));
			return true;
		}
		return false;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_6b6DsJxsEeuT9elTX1485g" name="setOutputers" specification="_6aJJIJxsEeuT9elTX1485g">
                  <ownedParameter xmi:id="_6b6DsZxsEeuT9elTX1485g" name="outputers" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <language>java</language>
                  <body>this.outputers = outputers;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_6b744JxsEeuT9elTX1485g" name="getOutputers" specification="_6S1AMJxsEeuT9elTX1485g">
                  <ownedParameter xmi:id="_6b8f8JxsEeuT9elTX1485g" type="_6X008JxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_6b8f8ZxsEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>return outputers;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_6b-VIJxsEeuT9elTX1485g" name="getProgressBar" specification="_6TDpsJxsEeuT9elTX1485g">
                  <ownedParameter xmi:id="_6b-VIZxsEeuT9elTX1485g" type="_6X_NAZxsEeuT9elTX1485g" direction="return"/>
                  <language>java</language>
                  <body>return progressBar;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_6cAKUJxsEeuT9elTX1485g" name="setProgressBar" specification="_6aNakJxsEeuT9elTX1485g">
                  <ownedParameter xmi:id="_6cAKUZxsEeuT9elTX1485g" name="progressBar" type="_6X_NAZxsEeuT9elTX1485g"/>
                  <language>java</language>
                  <body>this.progressBar = progressBar;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_6cB_gJxsEeuT9elTX1485g" name="getData" specification="_6THUEJxsEeuT9elTX1485g">
                  <ownedParameter xmi:id="_6cB_gZxsEeuT9elTX1485g" type="_6X6UgJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_6cB_gpxsEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>return data;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_6cCmkJxsEeuT9elTX1485g" name="getTrain" specification="_6TOBwJxsEeuT9elTX1485g">
                  <ownedParameter xmi:id="_6cCmkZxsEeuT9elTX1485g" type="_6X6UgJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_6cCmkpxsEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>return train;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_6cDNoJxsEeuT9elTX1485g" name="getTest" specification="_6TThUJxsEeuT9elTX1485g">
                  <ownedParameter xmi:id="_6cDNoZxsEeuT9elTX1485g" type="_6X6UgJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_6cDNopxsEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>return test;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_6cEbwJxsEeuT9elTX1485g" name="getTrajectory" specification="_6TZA4JxsEeuT9elTX1485g">
                  <ownedParameter xmi:id="_6cEbwZxsEeuT9elTX1485g" type="_6X6UgJxsEeuT9elTX1485g" direction="return"/>
                  <language>java</language>
                  <body>return trajectory;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_6cFC0JxsEeuT9elTX1485g" name="getTrajsFromClass" specification="_6TegcJxsEeuT9elTX1485g">
                  <ownedParameter xmi:id="_6cFC0ZxsEeuT9elTX1485g" type="_6X6UgJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_6cFC0pxsEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>return trajsFromClass;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_6cG4AJxsEeuT9elTX1485g" name="getQueue" specification="_6TkAAJxsEeuT9elTX1485g">
                  <ownedParameter xmi:id="_6cG4AZxsEeuT9elTX1485g" type="_6X6UgJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_6cG4ApxsEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>return queue;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_6cItMJxsEeuT9elTX1485g" name="setQueue" specification="_6aRsAJxsEeuT9elTX1485g">
                  <ownedParameter xmi:id="_6cJUQJxsEeuT9elTX1485g" name="queue" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <language>java</language>
                  <body>this.queue = queue;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_6cKiYJxsEeuT9elTX1485g" name="getStats" specification="_6TpfkJxsEeuT9elTX1485g">
                  <ownedParameter xmi:id="_6cKiYZxsEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>return stats;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_6cLJcJxsEeuT9elTX1485g" name="setStats" specification="_6TqtsJxsEeuT9elTX1485g">
                  <ownedParameter xmi:id="_6cLJcZxsEeuT9elTX1485g" name="stats">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>this.stats = stats;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_6cMXkJxsEeuT9elTX1485g" name="addStats" specification="_6aV9cJxsEeuT9elTX1485g">
                  <ownedParameter xmi:id="_6cMXkZxsEeuT9elTX1485g" name="str">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_6cMXkpxsEeuT9elTX1485g" name="stat" type="_6aUIQJxsEeuT9elTX1485g"/>
                  <language>java</language>
                  <body>this.stats = this.stats + str + &quot;: &quot; + stat + &quot;. &quot;;
	</body>
                </ownedBehavior>
                <ownedOperation xmi:id="_6RrwsJxsEeuT9elTX1485g" name="discover" isAbstract="true">
                  <ownedComment xmi:id="_6cQpApxsEeuT9elTX1485g">
                    <body>Discover.
	 *
	 * @return the list</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_6R_5wJxsEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_6SBu8JxsEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_6SJDsJxsEeuT9elTX1485g" name="call" method="_6btPYJxsEeuT9elTX1485g" raisedException="_6ZzK4JxsEeuT9elTX1485g">
                  <ownedParameter xmi:id="_6SK44JxsEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_6Sr2QJxsEeuT9elTX1485g" name="free" visibility="protected" method="_6bvroJxsEeuT9elTX1485g">
                  <ownedComment xmi:id="_6cRQEJxsEeuT9elTX1485g">
                    <body>Free.</body>
                  </ownedComment>
                </ownedOperation>
                <ownedOperation xmi:id="_6StEYJxsEeuT9elTX1485g" name="getDescriptor" method="_6bw5wJxsEeuT9elTX1485g">
                  <ownedComment xmi:id="_6cRQEZxsEeuT9elTX1485g">
                    <body>Gets the descriptor.
 *
@return the descriptor</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_6aCbcJxsEeuT9elTX1485g" type="_6X34QJxsEeuT9elTX1485g" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_6SzyEJxsEeuT9elTX1485g" name="defaultOutputters" method="_6b41kJxsEeuT9elTX1485g">
                  <ownedComment xmi:id="_6cSeMJxsEeuT9elTX1485g">
                    <body>Default outputters.
	 *
	 * @return true, if successful</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_6SzyEZxsEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_6S1AMJxsEeuT9elTX1485g" name="getOutputers" method="_6b744JxsEeuT9elTX1485g">
                  <ownedComment xmi:id="_6cTFQJxsEeuT9elTX1485g">
                    <body>Gets the outputers.
	 *
	 * @return the outputers</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_6S1nQJxsEeuT9elTX1485g" type="_6X008JxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_6S2OUJxsEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_6TDpsJxsEeuT9elTX1485g" name="getProgressBar" method="_6b-VIJxsEeuT9elTX1485g">
                  <ownedComment xmi:id="_6cTFQZxsEeuT9elTX1485g">
                    <body>Gets the progress bar.
	 *
	 * @return the progress bar</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_6aMMcJxsEeuT9elTX1485g" type="_6X_NAZxsEeuT9elTX1485g" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_6THUEJxsEeuT9elTX1485g" name="getData" method="_6cB_gJxsEeuT9elTX1485g">
                  <ownedComment xmi:id="_6cU6cJxsEeuT9elTX1485g">
                    <body>Getter for data.
	 * 
	 * @return the data.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_6TH7IJxsEeuT9elTX1485g" type="_6X6UgJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_6TIiMJxsEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_6TOBwJxsEeuT9elTX1485g" name="getTrain" method="_6cCmkJxsEeuT9elTX1485g">
                  <ownedComment xmi:id="_6cU6cZxsEeuT9elTX1485g">
                    <body>Getter for train.
	 * 
	 * @return the train.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_6TOo0JxsEeuT9elTX1485g" type="_6X6UgJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_6TP28JxsEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_6TThUJxsEeuT9elTX1485g" name="getTest" method="_6cDNoJxsEeuT9elTX1485g">
                  <ownedComment xmi:id="_6cU6cpxsEeuT9elTX1485g">
                    <body>Getter for test.
	 * 
	 * @return the test.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_6TUIYJxsEeuT9elTX1485g" type="_6X6UgJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_6TUIYZxsEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_6TZA4JxsEeuT9elTX1485g" name="getTrajectory" method="_6cEbwJxsEeuT9elTX1485g">
                  <ownedComment xmi:id="_6cU6c5xsEeuT9elTX1485g">
                    <body>Getter for trajectory.
	 * 
	 * @return the trajectory.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_6aQd4JxsEeuT9elTX1485g" type="_6X6UgJxsEeuT9elTX1485g" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_6TegcJxsEeuT9elTX1485g" name="getTrajsFromClass" method="_6cFC0JxsEeuT9elTX1485g">
                  <ownedComment xmi:id="_6cVhgJxsEeuT9elTX1485g">
                    <body>Getter for trajsFromClass.
	 * 
	 * @return the trajsFromClass.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_6TegcZxsEeuT9elTX1485g" type="_6X6UgJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_6TfHgJxsEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_6TkAAJxsEeuT9elTX1485g" name="getQueue" method="_6cG4AJxsEeuT9elTX1485g">
                  <ownedComment xmi:id="_6cVhgZxsEeuT9elTX1485g">
                    <body>Getter for queue.
	 * 
	 * @return the queue.</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_6TknEJxsEeuT9elTX1485g" type="_6X6UgJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_6TlOIJxsEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_6TpfkJxsEeuT9elTX1485g" name="getStats" method="_6cKiYJxsEeuT9elTX1485g">
                  <ownedParameter xmi:id="_6TpfkZxsEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_6TqtsJxsEeuT9elTX1485g" name="setStats" method="_6cLJcJxsEeuT9elTX1485g">
                  <ownedParameter xmi:id="_6TrUwJxsEeuT9elTX1485g" name="stats">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_6Y7BIJxsEeuT9elTX1485g" name="DiscoveryAdapter" method="_6bS_sJxsEeuT9elTX1485g">
                  <eAnnotations xmi:id="_6Y9dYJxsEeuT9elTX1485g" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_6Y-EcJxsEeuT9elTX1485g" key="create"/>
                  </eAnnotations>
                  <ownedComment xmi:id="_6cQB8JxsEeuT9elTX1485g">
                    <body>Instantiates a new discovery adapter.
	 *
	 * @param trajsFromClass the trajs from class
	 * @param data the data
	 * @param train the train
	 * @param test the test
	 * @param descriptor the descriptor</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_6Y7BIZxsEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_6Y7BIpxsEeuT9elTX1485g" name="trajsFromClass" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_6Y7oMJxsEeuT9elTX1485g" name="data" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_6Y7oMZxsEeuT9elTX1485g" name="train" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_6Y8PQJxsEeuT9elTX1485g" name="test" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_6Y82UJxsEeuT9elTX1485g" name="descriptor" type="_6X34QJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_6Y-EcZxsEeuT9elTX1485g" type="_6OvxcJxsEeuT9elTX1485g" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_6ZMt8JxsEeuT9elTX1485g" name="DiscoveryAdapter" method="_6bnIwJxsEeuT9elTX1485g">
                  <eAnnotations xmi:id="_6ZOjIJxsEeuT9elTX1485g" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_6ZOjIZxsEeuT9elTX1485g" key="create"/>
                  </eAnnotations>
                  <ownedComment xmi:id="_6cQpAJxsEeuT9elTX1485g">
                    <body>Instantiates a new discovery adapter.
	 *
	 * @param trajsFromClass the trajs from class
	 * @param data the data
	 * @param train the train
	 * @param test the test
	 * @param descriptor the descriptor
	 * @param outputers the outputers</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_6ZMt8ZxsEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_6ZMt8pxsEeuT9elTX1485g" name="trajsFromClass" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_6ZNVAJxsEeuT9elTX1485g" name="data" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_6ZNVAZxsEeuT9elTX1485g" name="train" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_6ZNVApxsEeuT9elTX1485g" name="test" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_6ZN8EJxsEeuT9elTX1485g" name="descriptor" type="_6X34QJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_6ZN8EZxsEeuT9elTX1485g" name="outputers" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_6ZOjIpxsEeuT9elTX1485g" type="_6OvxcJxsEeuT9elTX1485g" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_6Zj6UJxsEeuT9elTX1485g" name="init" visibility="private" method="_6braMJxsEeuT9elTX1485g">
                  <ownedComment xmi:id="_6cQpAZxsEeuT9elTX1485g">
                    <body>Inits the.
	 *
	 * @param trajsFromClass the trajs from class
	 * @param data the data
	 * @param train the train
	 * @param test the test
	 * @param descriptor the descriptor</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_6ZkhYJxsEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_6ZlIcJxsEeuT9elTX1485g" name="trajsFromClass" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_6ZlIcZxsEeuT9elTX1485g" name="data" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_6ZlvgJxsEeuT9elTX1485g" name="train" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_6ZlvgZxsEeuT9elTX1485g" name="test" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_6ZmWkJxsEeuT9elTX1485g" name="descriptor" type="_6X34QJxsEeuT9elTX1485g"/>
                </ownedOperation>
                <ownedOperation xmi:id="_6aDpkJxsEeuT9elTX1485g" name="output" method="_6bzWAJxsEeuT9elTX1485g">
                  <ownedComment xmi:id="_6cR3IJxsEeuT9elTX1485g">
                    <body>Output.
	 *
	 * @param filename the filename
	 * @param trajectories the trajectories
	 * @param movelets the movelets
	 * @param delayOutput the delay output</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_6aEQoJxsEeuT9elTX1485g" name="filename">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_6aEQoZxsEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_6aE3sJxsEeuT9elTX1485g" name="movelets" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_6aE3sZxsEeuT9elTX1485g" name="delayOutput">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_6aJJIJxsEeuT9elTX1485g" name="setOutputers" method="_6b6DsJxsEeuT9elTX1485g">
                  <ownedComment xmi:id="_6cSeMZxsEeuT9elTX1485g">
                    <body>Sets the outputers.
	 *
	 * @param outputers the outputers to set</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_6aJJIZxsEeuT9elTX1485g" name="outputers" type="_6Xk9UJxsEeuT9elTX1485g"/>
                </ownedOperation>
                <ownedOperation xmi:id="_6aNakJxsEeuT9elTX1485g" name="setProgressBar" method="_6cAKUJxsEeuT9elTX1485g">
                  <ownedComment xmi:id="_6cUTYJxsEeuT9elTX1485g">
                    <body>Sets the progress bar.
	 *
	 * @param progressBar the new progress bar</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_6aOBoJxsEeuT9elTX1485g" name="progressBar" type="_6X_NAZxsEeuT9elTX1485g"/>
                </ownedOperation>
                <ownedOperation xmi:id="_6aRsAJxsEeuT9elTX1485g" name="setQueue" method="_6cItMJxsEeuT9elTX1485g">
                  <ownedComment xmi:id="_6cVhgpxsEeuT9elTX1485g">
                    <body>Setter for queue.
	 * 
	 * @param queue the queue to set (as List&lt;MAT&lt;MO>> instance).</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_6aRsAZxsEeuT9elTX1485g" name="queue" type="_6Xk9UJxsEeuT9elTX1485g"/>
                </ownedOperation>
                <ownedOperation xmi:id="_6aV9cJxsEeuT9elTX1485g" name="addStats" method="_6cMXkJxsEeuT9elTX1485g">
                  <ownedParameter xmi:id="_6aV9cZxsEeuT9elTX1485g" name="str">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_6aV9cpxsEeuT9elTX1485g" name="stat" type="_6aUIQJxsEeuT9elTX1485g"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_6cjj8JxsEeuT9elTX1485g" name="" memberEnd="_6cjj8ZxsEeuT9elTX1485g _6afHYJxsEeuT9elTX1485g">
                <ownedEnd xmi:id="_6cjj8ZxsEeuT9elTX1485g" name="" type="_6OvxcJxsEeuT9elTX1485g" association="_6cjj8JxsEeuT9elTX1485g"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_6coccJxsEeuT9elTX1485g" name="" memberEnd="_6coccZxsEeuT9elTX1485g _6aixwJxsEeuT9elTX1485g">
                <ownedEnd xmi:id="_6coccZxsEeuT9elTX1485g" name="" type="_6OvxcJxsEeuT9elTX1485g" association="_6coccJxsEeuT9elTX1485g"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_6cst4JxsEeuT9elTX1485g" name="" memberEnd="_6cst4ZxsEeuT9elTX1485g _6aoRUJxsEeuT9elTX1485g">
                <ownedEnd xmi:id="_6cst4ZxsEeuT9elTX1485g" name="" type="_6OvxcJxsEeuT9elTX1485g" association="_6cst4JxsEeuT9elTX1485g"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_6ct8AZxsEeuT9elTX1485g" name="" memberEnd="_6ct8ApxsEeuT9elTX1485g _6auX8JxsEeuT9elTX1485g">
                <ownedEnd xmi:id="_6ct8ApxsEeuT9elTX1485g" name="" type="_6OvxcJxsEeuT9elTX1485g" association="_6ct8AZxsEeuT9elTX1485g"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_6cxmYJxsEeuT9elTX1485g" name="" memberEnd="_6cxmYZxsEeuT9elTX1485g _6aypYJxsEeuT9elTX1485g">
                <ownedEnd xmi:id="_6cxmYZxsEeuT9elTX1485g" name="" type="_6OvxcJxsEeuT9elTX1485g" association="_6cxmYJxsEeuT9elTX1485g"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_6c0psZxsEeuT9elTX1485g" name="" memberEnd="_6c0pspxsEeuT9elTX1485g _6a260JxsEeuT9elTX1485g">
                <ownedEnd xmi:id="_6c0pspxsEeuT9elTX1485g" name="" type="_6OvxcJxsEeuT9elTX1485g" association="_6c0psZxsEeuT9elTX1485g"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_6c3F8ZxsEeuT9elTX1485g" name="" memberEnd="_6c3F8pxsEeuT9elTX1485g _6a6lMZxsEeuT9elTX1485g">
                <ownedEnd xmi:id="_6c3F8pxsEeuT9elTX1485g" name="" type="_6OvxcJxsEeuT9elTX1485g" association="_6c3F8ZxsEeuT9elTX1485g"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_6c6JQJxsEeuT9elTX1485g" name="" memberEnd="_6c6JQZxsEeuT9elTX1485g _6a_dsJxsEeuT9elTX1485g">
                <ownedEnd xmi:id="_6c6JQZxsEeuT9elTX1485g" name="" type="_6OvxcJxsEeuT9elTX1485g" association="_6c6JQJxsEeuT9elTX1485g"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_6c9MkJxsEeuT9elTX1485g" name="" memberEnd="_6c9MkZxsEeuT9elTX1485g _6bDIEJxsEeuT9elTX1485g">
                <ownedEnd xmi:id="_6c9MkZxsEeuT9elTX1485g" name="" type="_6OvxcJxsEeuT9elTX1485g" association="_6c9MkJxsEeuT9elTX1485g"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_Aj8Y8JxtEeuT9elTX1485g" name="HiperCeMoveletsDiscovery">
                <ownedComment xmi:id="_BPhskJxtEeuT9elTX1485g">
                  <body>The Class HiperCEMoveletsDiscovery.
 *
@author tarlis
@param &lt;MO> the generic type</body>
                </ownedComment>
                <generalization xmi:id="_A_nBQJxtEeuT9elTX1485g" general="_Akjc8JxtEeuT9elTX1485g"/>
                <ownedAttribute xmi:id="_BMql0JxtEeuT9elTX1485g" name="sampleTrajectories" visibility="protected" type="_6X6UgJxsEeuT9elTX1485g" isOrdered="true" association="_BQLz4JxtEeuT9elTX1485g">
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BMrM4JxtEeuT9elTX1485g" value="*"/>
                </ownedAttribute>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOACkJxtEeuT9elTX1485g" name="HiperCeMoveletsDiscovery" specification="_BIc0MJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOACkZxtEeuT9elTX1485g" name="trajsFromClass" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOACkpxtEeuT9elTX1485g" name="data" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOACk5xtEeuT9elTX1485g" name="train" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOAClJxtEeuT9elTX1485g" name="test" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOAClZxtEeuT9elTX1485g" name="qualityMeasure" type="_A_j98JxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOAClpxtEeuT9elTX1485g" name="descriptor" type="_6X34QJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOACl5xtEeuT9elTX1485g" type="_Aj8Y8JxtEeuT9elTX1485g" direction="return"/>
                  <language>java</language>
                  <body>super(trajsFromClass, data, train, test, qualityMeasure, descriptor);
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOCe0JxtEeuT9elTX1485g" name="discover" specification="_AkFi4JxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOCe0ZxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BOCe0pxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>int maxSize = getDescriptor().getParamAsInt(&quot;max_size&quot;);
		int minSize = getDescriptor().getParamAsInt(&quot;min_size&quot;);

		List&lt;Subtrajectory> movelets = new ArrayList&lt;Subtrajectory>();
		
		int trajsLooked = 0, trajsIgnored = 0;

		progressBar.trace(&quot;Hiper Movelets Discovery for Class: &quot; + trajsFromClass.get(0).getMovingObject()); 

		Random random = new Random(trajsFromClass.size());
		Set&lt;MAT&lt;MO>> sample = new LinkedHashSet();
		sample.addAll(trajsFromClass);
		
		int i = 0;
		while (sample.size() &lt; trajsFromClass.size()*2 &amp;&amp; i++ &lt; trajsFromClass.size()*3)
			sample.add( train.get(random.nextInt(train.size())) );
		
		this.sampleTrajectories = new ArrayList(sample);
		
		this.proportionMeasure = new EntropyQualityMeasure&lt;MO>(this.sampleTrajectories, TAU);
		
		while (queue.size() > 0) {
			MAT&lt;MO> trajectory = queue.get(0);
			queue.remove(trajectory);
			trajsLooked++;
			
			// This guarantees the reproducibility
			random = new Random(trajectory.getTid());
			
			/** STEP 2.1: Starts at discovering movelets */
			List&lt;Subtrajectory> candidates = moveletsDiscovery(trajectory, this.sampleTrajectories, minSize, maxSize, random);
			
//			progressBar.trace(&quot;Class: &quot; + trajsFromClass.get(0).getMovingObject() 
//					+ &quot;. Trajectory: &quot; + trajectory.getTid() 
//					+ &quot;. Used GAMMA: &quot; + GAMMA);

			// Removes trajectories from queue:
			trajsIgnored += updateQueue(getCoveredInClass(candidates));
			
			/** STEP 2.4: SELECTING BEST CANDIDATES */			
//			candidates = filterMovelets(candidates);		
			movelets.addAll(filterMovelets(candidates));
			
//			System.gc();
		}
		
		/** STEP 2.2: Runs the pruning process */
		if(getDescriptor().getFlag(&quot;last_prunning&quot;))
			movelets = lastPrunningFilter(movelets);

		/** STEP 2.2: ---------------------------- */
		outputMovelets(movelets);
		/** -------------------------------------- */
		
		progressBar.plus(trajsIgnored, 
						   &quot;Class: &quot; + trajsFromClass.get(0).getMovingObject() 
//					   + &quot;. Total of Movelets: &quot; + movelets.size() 
					   + &quot;. Trajs. Looked: &quot; + trajsLooked 
					   + &quot;. Trajs. Ignored: &quot; + trajsIgnored);
		
//		progressBar.trace(&quot;Class: &quot; + trajsFromClass.get(0).getMovingObject() 
//				   + &quot;. Total of Movelets: &quot; + movelets.size());
//		System.out.println(&quot;\nMOVELETS:&quot;);
//		for (Subtrajectory subtrajectory : movelets) {
//			System.out.println(subtrajectory);
//		}

		/** STEP 2.5, to write all outputs: */
		super.output(&quot;train&quot;, this.train, movelets, false);
		
		if (!this.test.isEmpty())
			super.output(&quot;test&quot;, this.test, movelets, false);
		
		return movelets;
	</body>
                </ownedBehavior>
                <ownedOperation xmi:id="_AkFi4JxtEeuT9elTX1485g" name="discover" method="_BOCe0JxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_AkGJ8JxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_AkGJ8ZxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BIc0MJxtEeuT9elTX1485g" name="HiperCeMoveletsDiscovery" method="_BOACkJxtEeuT9elTX1485g">
                  <eAnnotations xmi:id="_BIepYJxtEeuT9elTX1485g" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_BIepYZxtEeuT9elTX1485g" key="create"/>
                  </eAnnotations>
                  <ownedParameter xmi:id="_BIc0MZxtEeuT9elTX1485g" name="trajsFromClass" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BIdbQJxtEeuT9elTX1485g" name="data" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BIdbQZxtEeuT9elTX1485g" name="train" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BIeCUJxtEeuT9elTX1485g" name="test" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BIeCUZxtEeuT9elTX1485g" name="qualityMeasure" type="_A_j98JxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BIeCUpxtEeuT9elTX1485g" name="descriptor" type="_6X34QJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BIepYpxtEeuT9elTX1485g" type="_Aj8Y8JxtEeuT9elTX1485g" direction="return"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_AkP68JxtEeuT9elTX1485g" name="HiperEntropyMoveletsDiscovery">
                <ownedComment xmi:id="_BPiToJxtEeuT9elTX1485g">
                  <body>The Class HiperENMoveletsDiscovery.
 *
@author tarlis
@param &lt;MO> the generic type</body>
                </ownedComment>
                <generalization xmi:id="_A_4uEJxtEeuT9elTX1485g" general="_Aj8Y8JxtEeuT9elTX1485g"/>
                <ownedAttribute xmi:id="_BMu3QJxtEeuT9elTX1485g" name="sampleTrajectories" visibility="protected" type="_6X6UgJxsEeuT9elTX1485g" isOrdered="true" association="_BQMa8ZxtEeuT9elTX1485g">
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BMu3QZxtEeuT9elTX1485g" value="*"/>
                </ownedAttribute>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOCe05xtEeuT9elTX1485g" name="HiperEntropyMoveletsDiscovery" specification="_BIkI8JxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOCe1JxtEeuT9elTX1485g" name="trajsFromClass" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOCe1ZxtEeuT9elTX1485g" name="data" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOCe1pxtEeuT9elTX1485g" name="train" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOCe15xtEeuT9elTX1485g" name="test" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOCe2JxtEeuT9elTX1485g" name="qualityMeasure" type="_A_j98JxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOCe2ZxtEeuT9elTX1485g" name="descriptor" type="_6X34QJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOCe2pxtEeuT9elTX1485g" type="_AkP68JxtEeuT9elTX1485g" direction="return"/>
                  <language>java</language>
                  <body>super(trajsFromClass, data, train, test, qualityMeasure, descriptor);
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BODF4JxtEeuT9elTX1485g" name="orderCandidates" specification="_A_yncJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BODF4ZxtEeuT9elTX1485g" name="candidatesByProp" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <language>java</language>
                  <body>/* STEP 2.1.3: SORT THE CANDIDATES BY PROPORTION VALUE
		 * * * * * * * * * * * * * * * * * * * * * * * * * */
		candidatesByProp.sort(new Comparator&lt;Subtrajectory>() {
			@Override
			public int compare(Subtrajectory o1, Subtrajectory o2) {
				
//				return (-1) * o1.getQuality().compareTo(o2.getQuality());
				return (-1) * Double.compare(candidateQuality(o1), candidateQuality(o2));				
				
			}
		});
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BODs8JxtEeuT9elTX1485g" name="candidateQuality" specification="_A_244JxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BODs8ZxtEeuT9elTX1485g" name="candidate" type="_6X8wwJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BODs8pxtEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>double p = candidate.getQuality().getData().get(&quot;p_target&quot;) / candidate.getQuality().getData().get(&quot;p_nontarget&quot;);
		return -p * (Math.log(p));
//		return -Math.log(candidate.getQuality().getData().get(&quot;p_target&quot;) / candidate.getQuality().getData().get(&quot;p_nontarget&quot;));
	</body>
                </ownedBehavior>
                <ownedOperation xmi:id="_A_yncJxtEeuT9elTX1485g" name="orderCandidates" method="_BODF4JxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_A_zOgJxtEeuT9elTX1485g" name="candidatesByProp" type="_6Xk9UJxsEeuT9elTX1485g"/>
                </ownedOperation>
                <ownedOperation xmi:id="_A_244JxtEeuT9elTX1485g" name="candidateQuality" visibility="protected" method="_BODs8JxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_A_244ZxtEeuT9elTX1485g" name="candidate" type="_6X8wwJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_A_3f8JxtEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BIkI8JxtEeuT9elTX1485g" name="HiperEntropyMoveletsDiscovery" method="_BOCe05xtEeuT9elTX1485g">
                  <eAnnotations xmi:id="_BIlXEJxtEeuT9elTX1485g" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_BIlXEZxtEeuT9elTX1485g" key="create"/>
                  </eAnnotations>
                  <ownedParameter xmi:id="_BIkI8ZxtEeuT9elTX1485g" name="trajsFromClass" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BIkI8pxtEeuT9elTX1485g" name="data" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BIkwAJxtEeuT9elTX1485g" name="train" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BIkwAZxtEeuT9elTX1485g" name="test" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BIkwApxtEeuT9elTX1485g" name="qualityMeasure" type="_A_j98JxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BIkwA5xtEeuT9elTX1485g" name="descriptor" type="_6X34QJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BIl-IJxtEeuT9elTX1485g" type="_AkP68JxtEeuT9elTX1485g" direction="return"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_Akjc8JxtEeuT9elTX1485g" name="HiperMoveletsDiscovery">
                <ownedComment xmi:id="_BPiToZxtEeuT9elTX1485g">
                  <body>The Class HiperMoveletsDiscovery.
 *
@author tarlis
@param &lt;MO> the generic type</body>
                </ownedComment>
                <generalization xmi:id="_BAhnQZxtEeuT9elTX1485g" general="_ArOssJxtEeuT9elTX1485g"/>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOFiIJxtEeuT9elTX1485g" name="HiperMoveletsDiscovery" specification="_BIrdsJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOGJMJxtEeuT9elTX1485g" name="trajsFromClass" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOGJMZxtEeuT9elTX1485g" name="data" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOGJMpxtEeuT9elTX1485g" name="train" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOGJM5xtEeuT9elTX1485g" name="test" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOGJNJxtEeuT9elTX1485g" name="qualityMeasure" type="_A_j98JxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOGJNZxtEeuT9elTX1485g" name="descriptor" type="_6X34QJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOGJNpxtEeuT9elTX1485g" type="_Akjc8JxtEeuT9elTX1485g" direction="return"/>
                  <language>java</language>
                  <body>super(null, trajsFromClass, data, train, test, qualityMeasure, descriptor);
//		this.queue = new ArrayList&lt;MAT&lt;MO>>();
//		queue.addAll(trajsFromClass);

		TAU 	= getDescriptor().hasParam(&quot;tau&quot;)? getDescriptor().getParamAsDouble(&quot;tau&quot;) : 0.9;
		BU 		= getDescriptor().hasParam(&quot;bucket_slice&quot;)? getDescriptor().getParamAsDouble(&quot;bucket_slice&quot;) : 0.1;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOGwQJxtEeuT9elTX1485g" name="discover" specification="_AkvDIJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOGwQZxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BOGwQpxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>int maxSize = getDescriptor().getParamAsInt(&quot;max_size&quot;);
		int minSize = getDescriptor().getParamAsInt(&quot;min_size&quot;);

		List&lt;Subtrajectory> movelets = new ArrayList&lt;Subtrajectory>();
		
		int trajsLooked = 0, trajsIgnored = 0;

		progressBar.trace(&quot;Hiper Movelets Discovery for Class: &quot; + trajsFromClass.get(0).getMovingObject()); 
		
		this.proportionMeasure = new ProportionQualityMeasure&lt;MO>(this.trajsFromClass, TAU);
		
		while (queue.size() > 0) {
			MAT&lt;MO> trajectory = queue.get(0);
			queue.remove(trajectory);
			trajsLooked++;
			
			// This guarantees the reproducibility
			Random random = new Random(trajectory.getTid());
			/** STEP 2.1: Starts at discovering movelets */
			List&lt;Subtrajectory> candidates = moveletsDiscovery(trajectory, this.trajsFromClass, minSize, maxSize, random);
			
//			progressBar.trace(&quot;Class: &quot; + trajsFromClass.get(0).getMovingObject() 
//					+ &quot;. Trajectory: &quot; + trajectory.getTid() 
//					+ &quot;. Used GAMMA: &quot; + GAMMA);

			// Removes trajectories from queue:
			trajsIgnored += updateQueue(getCoveredInClass(candidates));
			
			/** STEP 2.4: SELECTING BEST CANDIDATES */			
//			candidates = filterMovelets(candidates);		
			movelets.addAll(filterMovelets(candidates));
			
//			System.gc();
		}
		
		/** STEP 2.2: Runs the pruning process */
		if(getDescriptor().getFlag(&quot;last_prunning&quot;))
			movelets = lastPrunningFilter(movelets);

		/** STEP 2.2: ---------------------------- */
		outputMovelets(movelets);
		/** -------------------------------------- */	
		
		progressBar.plus(trajsIgnored, 
						   &quot;Class: &quot; + trajsFromClass.get(0).getMovingObject() 
//					   + &quot;. Total of Movelets: &quot; + movelets.size() 
					   + &quot;. Trajs. Looked: &quot; + trajsLooked 
					   + &quot;. Trajs. Ignored: &quot; + trajsIgnored);
		
//		progressBar.trace(&quot;Class: &quot; + trajsFromClass.get(0).getMovingObject() 
//				   + &quot;. Total of Movelets: &quot; + movelets.size());
//		System.out.println(&quot;\nMOVELETS:&quot;);
//		for (Subtrajectory subtrajectory : movelets) {
//			System.out.println(subtrajectory);
//		}

		/** STEP 2.5, to write all outputs: */
		super.output(&quot;train&quot;, this.train, movelets, false);
		
		if (!this.test.isEmpty())
			super.output(&quot;test&quot;, this.test, movelets, false);
		
		return movelets;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOHXUJxtEeuT9elTX1485g" name="updateQueue" specification="_BIwWMJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOHXUZxtEeuT9elTX1485g" name="coveredTrajectories" type="_A_eeYJxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOHXUpxtEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>int n = queue.size();
		queue.removeAll(coveredTrajectories);	
		int trajsIgnored = (n - queue.size());		
		return trajsIgnored;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOH-YJxtEeuT9elTX1485g" name="selectBestCandidates" specification="_BIzZgJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOIlcJxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOIlcZxtEeuT9elTX1485g" name="maxSize">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOIlcpxtEeuT9elTX1485g" name="random" type="_A_dQQJxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOIlc5xtEeuT9elTX1485g" name="candidatesByProp" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOIldJxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BOIldZxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>List&lt;Subtrajectory> bestCandidates;

		
		addStats(&quot;Class&quot;, trajectory.getMovingObject()); 
		addStats(&quot;Trajectory&quot;, trajectory.getTid());
		addStats(&quot;Trajectory Size&quot;, trajectory.getPoints().size()); 
		addStats(&quot;Number of Candidates&quot;, candidatesByProp.size());
		
		calculateProportion(candidatesByProp, random);
		bestCandidates = filterByProportion(candidatesByProp, random);
		
		if (getDescriptor().getFlag(&quot;feature_limit&quot;))
			bestCandidates = selectMaxFeatures(bestCandidates);
//		addStats(&quot;Scored Candidates&quot;, bestCandidates.size());
		
		bestCandidates = filterByQuality(bestCandidates, random, trajectory);
		
		/* STEP 2.1.5: Recover Approach (IF Nothing found)
		 * * * * * * * * * * * * * * * * * * * * * * * * */
		if (bestCandidates.isEmpty()) { 
			bestCandidates = recoverCandidates(trajectory, random, candidatesByProp);
		}
		
//		queue.removeAll(getCoveredInClass(bestCandidates));	
		
		addStats(&quot;Total of Movelets&quot;, bestCandidates.size());
		addStats(&quot;Max Size&quot;, maxSize);
		addStats(&quot;Used Features&quot;, this.maxNumberOfFeatures);

		progressBar.plus(getStats());
//		progressBar.plus(&quot;Class: &quot; + trajectory.getMovingObject() 
//						+ &quot;. Trajectory: &quot; + trajectory.getTid() 
//						+ &quot;. Trajectory Size: &quot; + trajectory.getPoints().size() 
//						+ &quot;. Number of Candidates: &quot; + candidatesByProp.size() 
//						+ &quot;. Total of Movelets: &quot; + bestCandidates.size() 
//						+ &quot;. Max Size: &quot; + maxSize
//						+ &quot;. Used Features: &quot; + this.maxNumberOfFeatures);

		return bestCandidates;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOJMgJxtEeuT9elTX1485g" name="getCoveredInClass" specification="_BAaSgJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOJMgZxtEeuT9elTX1485g" name="bestCandidates" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOJMgpxtEeuT9elTX1485g" type="_6X6UgJxsEeuT9elTX1485g" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BOJMg5xtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>Set&lt;MAT&lt;MO>> covered = new LinkedHashSet&lt;MAT&lt;MO>>();
		Map&lt;MAT&lt;?>, Integer> count = new HashMap&lt;MAT&lt;?>, Integer>();

		for (int i = 0; i &lt; bestCandidates.size(); i++) {
			for (MAT&lt;?> T : bestCandidates.get(i).getCovered()) {
				int x = count.getOrDefault(T, 0); 
				x++;
				count.put(T, x);
			}
		}
		
		for (Entry&lt;MAT&lt;?>, Integer> e : count.entrySet()) {
			if (e.getValue() >= (this.trajsFromClass.size() / 2))
				covered.add((MAT&lt;MO>) e.getKey());
		}
		
		return covered;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOKaoJxtEeuT9elTX1485g" name="makeCombinations" specification="_Ak6CQJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOM24JxtEeuT9elTX1485g" name="exploreDimensions">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOM24ZxtEeuT9elTX1485g" name="numberOfFeatures">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOM24pxtEeuT9elTX1485g" name="maxNumberOfFeatures">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOM245xtEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BOM25JxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>if (combinations != null)
			return combinations;
		
		if (!getDescriptor().getFlag(&quot;LDM&quot;))
			return super.makeCombinations(exploreDimensions, numberOfFeatures, maxNumberOfFeatures);
		
		List&lt;int[]> selected = new ArrayList&lt;int[]>();
		
		int currentFeatures;
		if (exploreDimensions){
			currentFeatures = 1;
		} else {
			currentFeatures = numberOfFeatures;
		}
		
//		combinations = new int[(int) (Math.pow(2, maxNumberOfFeatures) - 1)][];
//		int k = 0;
		// For each possible NumberOfFeatures and each combination of those: 
		for (;currentFeatures &lt;= maxNumberOfFeatures; currentFeatures++) {
			for (int[] comb : new Combinations(numberOfFeatures,currentFeatures)) {					
				
				if (!hasDuplicates(comb))
					selected.add(comb);
//				combinations[k++] = comb;
				
			} // for (int[] comb : new Combinations(numberOfFeatures,currentFeatures)) 					
		} // for (int i = 0; i &lt; train.size(); i++

		return selected.toArray(new int[selected.size()][]);
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOOsEJxtEeuT9elTX1485g" name="hasDuplicates" specification="_AlEaUJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOOsEZxtEeuT9elTX1485g" name="comb">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BOOsEpxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOOsE5xtEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>int[] orders = new int[comb.length];
		for (int j = 0; j &lt; comb.length; j++) {
			orders[j] = getDescriptor().getAttributes().get(comb[j]).getOrder();
		}
		
		Arrays.sort(orders);
		for(int i = 1; i &lt; orders.length; i++) {
		    if(orders[i] == orders[i - 1]) {
		        return true;
		    }
		}
		
		return false;
	</body>
                </ownedBehavior>
                <ownedOperation xmi:id="_AkvDIJxtEeuT9elTX1485g" name="discover" method="_BOGwQJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_AkvDIZxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_AkvqMJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_Ak6CQJxtEeuT9elTX1485g" name="makeCombinations" method="_BOKaoJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_Ak6CQZxtEeuT9elTX1485g" name="exploreDimensions">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_Ak6pUJxtEeuT9elTX1485g" name="numberOfFeatures">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_Ak7QYJxtEeuT9elTX1485g" name="maxNumberOfFeatures">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_Ak9soJxtEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Ak-6wJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_AlEaUJxtEeuT9elTX1485g" name="hasDuplicates" method="_BOOsEJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_AlEaUZxtEeuT9elTX1485g" name="comb">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_AlGPgJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_AlFBYJxtEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BAaSgJxtEeuT9elTX1485g" name="getCoveredInClass" method="_BOJMgJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BAa5kJxtEeuT9elTX1485g" name="bestCandidates" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BAa5kZxtEeuT9elTX1485g" type="_6X6UgJxsEeuT9elTX1485g" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BAa5kpxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BIrdsJxtEeuT9elTX1485g" name="HiperMoveletsDiscovery" method="_BOFiIJxtEeuT9elTX1485g">
                  <eAnnotations xmi:id="_BIsEw5xtEeuT9elTX1485g" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_BIsExJxtEeuT9elTX1485g" key="create"/>
                  </eAnnotations>
                  <ownedParameter xmi:id="_BIrdsZxtEeuT9elTX1485g" name="trajsFromClass" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BIrdspxtEeuT9elTX1485g" name="data" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BIrds5xtEeuT9elTX1485g" name="train" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BIsEwJxtEeuT9elTX1485g" name="test" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BIsEwZxtEeuT9elTX1485g" name="qualityMeasure" type="_A_j98JxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BIsEwpxtEeuT9elTX1485g" name="descriptor" type="_6X34QJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BIsExZxtEeuT9elTX1485g" type="_Akjc8JxtEeuT9elTX1485g" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_BIwWMJxtEeuT9elTX1485g" name="updateQueue" method="_BOHXUJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BIw9QJxtEeuT9elTX1485g" name="coveredTrajectories" type="_A_eeYJxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BIw9QZxtEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BIzZgJxtEeuT9elTX1485g" name="selectBestCandidates" method="_BOH-YJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BIzZgZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BI0AkJxtEeuT9elTX1485g" name="maxSize">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BI0AkZxtEeuT9elTX1485g" name="random" type="_A_dQQJxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BI0AkpxtEeuT9elTX1485g" name="candidatesByProp" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BI0noJxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BI0noZxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_AlU5AJxtEeuT9elTX1485g" name="HiperPivotsCeMoveletsDiscovery">
                <ownedComment xmi:id="_BPi6sJxtEeuT9elTX1485g">
                  <body>The Class HiperPivotsCEMoveletsDiscovery.
 *
@author tarlis
@param &lt;MO> the generic type</body>
                </ownedComment>
                <generalization xmi:id="_BAzUEJxtEeuT9elTX1485g" general="_AlnM4JxtEeuT9elTX1485g"/>
                <ownedAttribute xmi:id="_BM0W0JxtEeuT9elTX1485g" name="sampleTrajectories" visibility="protected" type="_6X6UgJxsEeuT9elTX1485g" isOrdered="true" association="_BQO3MJxtEeuT9elTX1485g">
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BM0W0ZxtEeuT9elTX1485g" value="*"/>
                </ownedAttribute>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOP6MJxtEeuT9elTX1485g" name="HiperPivotsCeMoveletsDiscovery" specification="_BI7VUJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOP6MZxtEeuT9elTX1485g" name="trajsFromClass" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOP6MpxtEeuT9elTX1485g" name="data" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOP6M5xtEeuT9elTX1485g" name="train" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOP6NJxtEeuT9elTX1485g" name="test" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOP6NZxtEeuT9elTX1485g" name="qualityMeasure" type="_A_j98JxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOP6NpxtEeuT9elTX1485g" name="descriptor" type="_6X34QJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOP6N5xtEeuT9elTX1485g" type="_AlU5AJxtEeuT9elTX1485g" direction="return"/>
                  <language>java</language>
                  <body>super(trajsFromClass, data, train, test, qualityMeasure, descriptor);
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOQhQJxtEeuT9elTX1485g" name="discover" specification="_AleC8JxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOQhQZxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BOQhQpxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>int maxSize = getDescriptor().getParamAsInt(&quot;max_size&quot;);
		int minSize = getDescriptor().getParamAsInt(&quot;min_size&quot;);

		List&lt;Subtrajectory> movelets = new ArrayList&lt;Subtrajectory>();
		
		int trajsLooked = 0, trajsIgnored = 0;

		progressBar.trace(&quot;Hiper Movelets Discovery for Class: &quot; + trajsFromClass.get(0).getMovingObject()); 

		Random random = new Random();
		Set&lt;MAT&lt;MO>> sample = new LinkedHashSet();
		sample.addAll(trajsFromClass);
		
		int i = 0;
		while (sample.size() &lt; trajsFromClass.size()*2 &amp;&amp; i++ &lt; trajsFromClass.size()*3)
			sample.add( train.get(random.nextInt(train.size())) );
		
		this.sampleTrajectories = new ArrayList(sample);
		
		this.proportionMeasure = new EntropyQualityMeasure&lt;MO>(this.sampleTrajectories, TAU);
		
		while (queue.size() > 0) {
			MAT&lt;MO> trajectory = queue.get(0);
			queue.remove(trajectory);
			trajsLooked++;
			
			// This guarantees the reproducibility
			random = new Random(trajectory.getTid());
			
			/** STEP 2.1: Starts at discovering movelets */
			List&lt;Subtrajectory> candidates = moveletsDiscovery(trajectory, this.sampleTrajectories, minSize, maxSize, random);
			
//			progressBar.trace(&quot;Class: &quot; + trajsFromClass.get(0).getMovingObject() 
//					+ &quot;. Trajectory: &quot; + trajectory.getTid() 
//					+ &quot;. Used GAMMA: &quot; + GAMMA);

			// Removes trajectories from queue:
			trajsIgnored += updateQueue(getCoveredInClass(candidates));
			
			/** STEP 2.4: SELECTING BEST CANDIDATES */			
//			candidates = filterMovelets(candidates);		
			movelets.addAll(filterMovelets(candidates));
			
//			System.gc();
		}
		
		/** STEP 2.2: Runs the pruning process */
		if(getDescriptor().getFlag(&quot;last_prunning&quot;))
			movelets = lastPrunningFilter(movelets);

		/** STEP 2.2: ---------------------------- */
		outputMovelets(movelets);
		/** -------------------------------------- */
		
		progressBar.plus(trajsIgnored, 
						   &quot;Class: &quot; + trajsFromClass.get(0).getMovingObject() 
//					   + &quot;. Total of Movelets: &quot; + movelets.size() 
					   + &quot;. Trajs. Looked: &quot; + trajsLooked 
					   + &quot;. Trajs. Ignored: &quot; + trajsIgnored);
		
//		progressBar.trace(&quot;Class: &quot; + trajsFromClass.get(0).getMovingObject() 
//				   + &quot;. Total of Movelets: &quot; + movelets.size());
//		System.out.println(&quot;\nMOVELETS:&quot;);
//		for (Subtrajectory subtrajectory : movelets) {
//			System.out.println(subtrajectory);
//		}

		/** STEP 2.5, to write all outputs: */
		super.output(&quot;train&quot;, this.train, movelets, false);
		
		if (!this.test.isEmpty())
			super.output(&quot;test&quot;, this.test, movelets, false);
		
		return movelets;
	</body>
                </ownedBehavior>
                <ownedOperation xmi:id="_AleC8JxtEeuT9elTX1485g" name="discover" method="_BOQhQJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_AleC8ZxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_AleqAJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BI7VUJxtEeuT9elTX1485g" name="HiperPivotsCeMoveletsDiscovery" method="_BOP6MJxtEeuT9elTX1485g">
                  <eAnnotations xmi:id="_BI8jdJxtEeuT9elTX1485g" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_BI8jdZxtEeuT9elTX1485g" key="create"/>
                  </eAnnotations>
                  <ownedParameter xmi:id="_BI78YJxtEeuT9elTX1485g" name="trajsFromClass" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BI78YZxtEeuT9elTX1485g" name="data" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BI8jcJxtEeuT9elTX1485g" name="train" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BI8jcZxtEeuT9elTX1485g" name="test" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BI8jcpxtEeuT9elTX1485g" name="qualityMeasure" type="_A_j98JxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BI8jc5xtEeuT9elTX1485g" name="descriptor" type="_6X34QJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BI9KgJxtEeuT9elTX1485g" type="_AlU5AJxtEeuT9elTX1485g" direction="return"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_AlnM4JxtEeuT9elTX1485g" name="HiperPivotsMoveletsDiscovery">
                <ownedComment xmi:id="_BPi6sZxtEeuT9elTX1485g">
                  <body>The Class HiperPivotsMoveletsDiscovery.
 *
@author tarlis
@param &lt;MO> the generic type</body>
                </ownedComment>
                <generalization xmi:id="_BBaYEJxtEeuT9elTX1485g" general="_Akjc8JxtEeuT9elTX1485g"/>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BORIUJxtEeuT9elTX1485g" name="HiperPivotsMoveletsDiscovery" specification="_BJEfQJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BORIUZxtEeuT9elTX1485g" name="trajsFromClass" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BORIUpxtEeuT9elTX1485g" name="data" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BORIU5xtEeuT9elTX1485g" name="train" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BORIVJxtEeuT9elTX1485g" name="test" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BORIVZxtEeuT9elTX1485g" name="qualityMeasure" type="_A_j98JxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BORIVpxtEeuT9elTX1485g" name="descriptor" type="_6X34QJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BORIV5xtEeuT9elTX1485g" type="_AlnM4JxtEeuT9elTX1485g" direction="return"/>
                  <language>java</language>
                  <body>super(trajsFromClass, data, train, test, qualityMeasure, descriptor);
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOSWcJxtEeuT9elTX1485g" name="moveletsDiscovery" specification="_BJO3UJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOSWcZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOSWcpxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOSWc5xtEeuT9elTX1485g" name="minSize">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOSWdJxtEeuT9elTX1485g" name="maxSize">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOSWdZxtEeuT9elTX1485g" name="random" type="_A_dQQJxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOSWdpxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BOSWd5xtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>List&lt;Subtrajectory> candidatesByProp = new ArrayList&lt;Subtrajectory>();

		int n = trajectory.getPoints().size();
		
		// TO USE THE LOG, PUT &quot;-Ms -3&quot;
		switch (maxSize) {
			case -1: maxSize = n; break;
			case -2: maxSize = (int) Math.round( Math.log10(n) / Math.log10(2) ); break;	
			case -3: maxSize = (int) Math.ceil(Math.log(n))+1; break;	
			default: break;
		}

		// It starts with the base case	
		int size = 1;
		Integer total_size = 0;
		
		base = computeBaseDistances(trajectory, trajectories);
		
		List&lt;Subtrajectory> candidatesOfSize = findCandidates(trajectory, trajectories, size, base);
		
//		GAMMA = getDescriptor().getParamAsDouble(&quot;gamma&quot;);
		calculateProportion(candidatesOfSize, random);
//		orderCandidates(candidatesOfSize);
		candidatesOfSize = filterByProportion(candidatesOfSize, random);

		if( minSize &lt;= 1 ) {
			candidatesByProp.addAll(candidatesOfSize);
		}				
		
		double[][][][] newSize = clone4DArray(base);		

		total_size = total_size + candidatesOfSize.size();
		
		// Tratar o resto dos tamanhos 
		for (size = 2; size &lt;= maxSize; size++) {
			
			// Precompute de distance matrix
			newSize = newSize(trajectory, trajectories, base, newSize, size);
			
			candidatesOfSize = growPivots(candidatesOfSize, trajectory, trajectories, base, newSize, size);
//			GAMMA = getDescriptor().getParamAsDouble(&quot;gamma&quot;);

			calculateProportion(candidatesOfSize, random);
//			orderCandidates(candidatesOfSize);
			candidatesOfSize = filterOvelappingPoints(candidatesOfSize);
			candidatesOfSize = filterByProportion(candidatesOfSize, random);
	
			total_size = total_size + candidatesOfSize.size();
			
			if (size >= minSize){
				
				//for (Subtrajectory candidate : candidatesOfSize) assesQuality(candidate);				
//				candidatesOfSize.forEach(x -> assesQuality(x, random));
				candidatesByProp.addAll(candidatesOfSize);
			}
		
//			lastSize = newSize;
						
		} // for (int size = 2; size &lt;= max; size++)	
		
		/** STEP 2.2: SELECTING BEST CANDIDATES */	
		orderCandidates(candidatesByProp);
		List&lt;Subtrajectory> bestCandidates = filterEqualCandidates(candidatesByProp);
		
		if (getDescriptor().getFlag(&quot;feature_limit&quot;))
			bestCandidates = selectMaxFeatures(bestCandidates);
		
		bestCandidates = filterByQuality(bestCandidates, random, trajectory);	
		
		/* STEP 2.1.5: Recover Approach (IF Nothing found)
		 * * * * * * * * * * * * * * * * * * * * * * * * */
		if (bestCandidates.isEmpty()) { 
			bestCandidates = recoverCandidates(trajectory, random, candidatesByProp);
		}
		
//		queue.removeAll(getCoveredInClass(bestCandidates));	
	
		progressBar.plus(&quot;Class: &quot; + trajectory.getMovingObject() 
						+ &quot;. Trajectory: &quot; + trajectory.getTid() 
						+ &quot;. Trajectory Size: &quot; + trajectory.getPoints().size() 
						+ &quot;. Number of Candidates: &quot; + candidatesByProp.size() 
						+ &quot;. Total of Movelets: &quot; + bestCandidates.size() 
						+ &quot;. Max Size: &quot; + maxSize
						+ &quot;. Used Features: &quot; + this.maxNumberOfFeatures);
//						+ &quot;. Memory Use: &quot; + Mov3letsUtils.getUsedMemory());
	
		base =  null;
		newSize = null;
	
		return bestCandidates;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOS9gJxtEeuT9elTX1485g" name="growPivots" specification="_BA_hUJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOS9gZxtEeuT9elTX1485g" name="candidatesOfSize" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOS9gpxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOS9g5xtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOS9hJxtEeuT9elTX1485g" name="base">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BOS9hZxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOS9hpxtEeuT9elTX1485g" name="newSize">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BOS9h5xtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOS9iJxtEeuT9elTX1485g" name="size">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOS9iZxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BOS9ipxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>List&lt;Subtrajectory> newCandidates = new ArrayList&lt;Subtrajectory>();
		
		for(Subtrajectory candidate : candidatesOfSize) {
			Subtrajectory subtrajectory = buildNewSize(candidate, trajectory, trajectories, newSize, size, true);
			if (subtrajectory != null)
				newCandidates.add(subtrajectory);
			
			subtrajectory = buildNewSize(candidate, trajectory, trajectories, newSize, size, false);	
			if (subtrajectory != null)
				newCandidates.add(subtrajectory);		
		}
		
		return newCandidates;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOTkkJxtEeuT9elTX1485g" name="buildNewSize" specification="_BBKgcJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOTkkZxtEeuT9elTX1485g" name="candidate" type="_6X8wwJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOTkkpxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOTkk5xtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOTklJxtEeuT9elTX1485g" name="mdist">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BOTklZxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOTklpxtEeuT9elTX1485g" name="size">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOTkl5xtEeuT9elTX1485g" name="left">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOTkmJxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" direction="return"/>
                  <language>java</language>
                  <body>int start = candidate.getStart() - (left? 1 : 0);
		int end   = candidate.getEnd()   + (left? 0 : 1);
		
		if (start &lt; 0 || end > trajectory.getPoints().size()-1)
			return null;
				
		Subtrajectory subtrajectory = new Subtrajectory(start, end, trajectory, trajectories.size(),
				candidate.getPointFeatures(), candidate.getK());
		
		double[][][] distancesForAllT = mdist[start];
		
		// For each trajectory in the database
		for (int i = 0; i &lt; trajectories.size(); i++) {
			MAT&lt;MO> T = trajectories.get(i);	
			
			double[][] distancesForT = distancesForAllT[i];
			double[][] ranksForT = new double[distancesForT.length][];
			
			int limit = T.getPoints().size() - size + 1;
			
			if (limit > 0)
				for (int k = 0; k &lt; numberOfFeatures; k++) {				
					ranksForT[k] = rankingAlgorithm.rank(Arrays.stream(distancesForT[k],0,limit).toArray());
				} // for (int k = 0; k &lt; numberOfFeatures; k++)
				
			int bestPosition = (limit > 0) ? bestAlignmentByRanking(ranksForT, subtrajectory.getPointFeatures()) : -1;
			for (int j = 0; j &lt; subtrajectory.getPointFeatures().length; j++) {	
				double distance = (bestPosition >= 0) ? 
						distancesForT[subtrajectory.getPointFeatures()[j]][bestPosition] : MAX_VALUE;
				subtrajectory.getDistances()[j][i] = (distance != MAX_VALUE) ? 
						Math.sqrt( distance / size ) : MAX_VALUE;	
						
				if (maxDistances[j] &lt; subtrajectory.getDistances()[j][i] &amp;&amp; subtrajectory.getDistances()[j][i] != MAX_VALUE)
					maxDistances[j] = subtrajectory.getDistances()[j][i];
			}
			
		}
		
		return subtrajectory;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOUysJxtEeuT9elTX1485g" name="filterOvelappingPoints" specification="_BBWtsJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOVZwJxtEeuT9elTX1485g" name="orderedCandidates" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOVZwZxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BOVZwpxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>List&lt;Subtrajectory> bestCandidates = new ArrayList&lt;>();		
		for(Subtrajectory candidate : orderedCandidates) {
			
			if(bestCandidates.isEmpty())
				bestCandidates.add(candidate);
			else {
				boolean similar = false;
				for(Subtrajectory best_candidate : bestCandidates) {
					
					if((best_candidate.getEnd() > candidate.getStart()) &amp;&amp;
					   (best_candidate.getStart() &lt; candidate.getEnd())) {
						similar = true;
						break;
					}
					
				}
				if(!similar) {
					bestCandidates.add(candidate);
				} else
					bucket.add(candidate);
			}
		}
		
		return bestCandidates;
	</body>
                </ownedBehavior>
                <ownedOperation xmi:id="_BA_hUJxtEeuT9elTX1485g" name="growPivots" method="_BOS9gJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BA_hUZxtEeuT9elTX1485g" name="candidatesOfSize" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BBAIYJxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BBAIYZxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BBAIYpxtEeuT9elTX1485g" name="base">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BBGPAJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BBAIY5xtEeuT9elTX1485g" name="newSize">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BBIEMJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BBAIZJxtEeuT9elTX1485g" name="size">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BBAvcJxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BBAvcZxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BBKgcJxtEeuT9elTX1485g" name="buildNewSize" method="_BOTkkJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BBLHgJxtEeuT9elTX1485g" name="candidate" type="_6X8wwJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BBLHgZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BBLukJxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BBLukZxtEeuT9elTX1485g" name="mdist">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BBQAAJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BBMVoJxtEeuT9elTX1485g" name="size">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BBMVoZxtEeuT9elTX1485g" name="left">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BBM8sJxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_BBWtsJxtEeuT9elTX1485g" name="filterOvelappingPoints" method="_BOUysJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BBXUwJxtEeuT9elTX1485g" name="orderedCandidates" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BBX70JxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BBX70ZxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BJEfQJxtEeuT9elTX1485g" name="HiperPivotsMoveletsDiscovery" method="_BORIUJxtEeuT9elTX1485g">
                  <eAnnotations xmi:id="_BJHikJxtEeuT9elTX1485g" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_BJHikZxtEeuT9elTX1485g" key="create"/>
                  </eAnnotations>
                  <ownedParameter xmi:id="_BJEfQZxtEeuT9elTX1485g" name="trajsFromClass" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BJFGUJxtEeuT9elTX1485g" name="data" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BJFtYJxtEeuT9elTX1485g" name="train" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BJGUcJxtEeuT9elTX1485g" name="test" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BJG7gJxtEeuT9elTX1485g" name="qualityMeasure" type="_A_j98JxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BJG7gZxtEeuT9elTX1485g" name="descriptor" type="_6X34QJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BJIJoJxtEeuT9elTX1485g" type="_AlnM4JxtEeuT9elTX1485g" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_BJO3UJxtEeuT9elTX1485g" name="moveletsDiscovery" method="_BOSWcJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BJO3UZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BJPeYJxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BJPeYZxtEeuT9elTX1485g" name="minSize">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BJPeYpxtEeuT9elTX1485g" name="maxSize">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BJPeY5xtEeuT9elTX1485g" name="random" type="_A_dQQJxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BJQFcJxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BJQFcZxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_AmA1gJxtEeuT9elTX1485g" name="IndexedMoveletsDiscovery">
                <ownedComment xmi:id="_BPjhwJxtEeuT9elTX1485g">
                  <body>The Class IndexedMoveletsDiscovery.
 *
@author Tarlis Portela &lt;tarlis@tarlis.com.br>
@param &lt;MO> the generic type</body>
                </ownedComment>
                <generalization xmi:id="_BBjiAJxtEeuT9elTX1485g" general="_ApiqoJxtEeuT9elTX1485g"/>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOWn4JxtEeuT9elTX1485g" name="IndexedMoveletsDiscovery" specification="_BJWzIJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOWn4ZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOWn4pxtEeuT9elTX1485g" name="trajsFromClass" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOWn45xtEeuT9elTX1485g" name="data" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOWn5JxtEeuT9elTX1485g" name="train" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOWn5ZxtEeuT9elTX1485g" name="test" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOWn5pxtEeuT9elTX1485g" name="qualityMeasure" type="_A_j98JxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOWn55xtEeuT9elTX1485g" name="descriptor" type="_6X34QJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOWn6JxtEeuT9elTX1485g" type="_AmA1gJxtEeuT9elTX1485g" direction="return"/>
                  <language>java</language>
                  <body>super(trajectory, trajsFromClass, data, train, test, qualityMeasure, descriptor);
	</body>
                </ownedBehavior>
                <ownedOperation xmi:id="_BJWzIJxtEeuT9elTX1485g" name="IndexedMoveletsDiscovery" method="_BOWn4JxtEeuT9elTX1485g">
                  <eAnnotations xmi:id="_BJZPYJxtEeuT9elTX1485g" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_BJZPYZxtEeuT9elTX1485g" key="create"/>
                  </eAnnotations>
                  <ownedParameter xmi:id="_BJWzIZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BJXaMJxtEeuT9elTX1485g" name="trajsFromClass" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BJYBQJxtEeuT9elTX1485g" name="data" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BJYoUJxtEeuT9elTX1485g" name="train" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BJYoUZxtEeuT9elTX1485g" name="test" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BJYoUpxtEeuT9elTX1485g" name="qualityMeasure" type="_A_j98JxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BJYoU5xtEeuT9elTX1485g" name="descriptor" type="_6X34QJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BJZPYpxtEeuT9elTX1485g" type="_AmA1gJxtEeuT9elTX1485g" direction="return"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_AmSiUJxtEeuT9elTX1485g" name="MasterMoveletsDiscovery">
                <ownedComment xmi:id="_BPlW8JxtEeuT9elTX1485g">
                  <body>The Class MemMoveletsDiscovery.
 *
@author Tarlis Portela &lt;tarlis@tarlis.com.br>
@param &lt;MO> the generic type</body>
                </ownedComment>
                <generalization xmi:id="_BDHoQZxtEeuT9elTX1485g" general="_ApiqoJxtEeuT9elTX1485g"/>
                <ownedAttribute xmi:id="_BM2MAJxtEeuT9elTX1485g" name="base" visibility="protected">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BM2zEJxtEeuT9elTX1485g" value="*"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_BM5PUJxtEeuT9elTX1485g" name="maxDistances" visibility="protected">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BM5PUZxtEeuT9elTX1485g" value="*"/>
                </ownedAttribute>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOXO8JxtEeuT9elTX1485g" name="MasterMoveletsDiscovery" specification="_BJhLMJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOXO8ZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOXO8pxtEeuT9elTX1485g" name="trajsFromClass" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOXO85xtEeuT9elTX1485g" name="data" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOXO9JxtEeuT9elTX1485g" name="train" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOXO9ZxtEeuT9elTX1485g" name="test" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOXO9pxtEeuT9elTX1485g" name="qualityMeasure" type="_A_j98JxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOXO95xtEeuT9elTX1485g" name="descriptor" type="_6X34QJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOXO-JxtEeuT9elTX1485g" type="_AmSiUJxtEeuT9elTX1485g" direction="return"/>
                  <language>java</language>
                  <body>super(trajectory, trajsFromClass, data, train, test, qualityMeasure, descriptor);
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOYdEJxtEeuT9elTX1485g" name="discover" specification="_AmcTUJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOYdEZxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BOYdEpxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>int maxSize = getDescriptor().getParamAsInt(&quot;max_size&quot;);
		int minSize = getDescriptor().getParamAsInt(&quot;min_size&quot;);

		/** STEP 2.1: Starts at discovering movelets */
//		progressBar.trace(&quot;Class: &quot; + trajsFromClass.get(0).getMovingObject() + &quot;.&quot;); // Might be saved in HD
//		Mov3letsUtils.getInstance().startTimer(&quot;\tClass >> &quot; + trajectory.getClass());

		List&lt;Subtrajectory> movelets = new ArrayList&lt;Subtrajectory>();
		
		progressBar.trace(&quot;MASTERMovelets Discovery for Class: &quot; + trajsFromClass.get(0).getMovingObject() 
				+ &quot;. Trajectory: &quot; + trajectory.getTid());
		
//		for (MAT&lt;MO> trajectory : trajsFromClass) {
			// This guarantees the reproducibility
			Random random = new Random(trajectory.getTid());

			/** STEP 2.1: --------------------------------- */
			List&lt;Subtrajectory> candidates = moveletsDiscovery(trajectory, this.train, minSize, maxSize, random);
			
	//		Mov3letsUtils.getInstance().stopTimer(&quot;\tClass >> &quot; + trajectory.getClass());
						
			/** Summary Candidates: */
	
			/** STEP 2.3, for this trajectory movelets: 
			 * It transforms the training and test sets of trajectories using the movelets */
//			for (Subtrajectory candidate : candidates) {
//				// It initializes the set of distances of all movelets to null
//				candidate.setDistances(null);
//				// In this step the set of distances is filled by this method
//				computeDistances(candidate, this.train); // computeDistances(movelet, trajectories);
//				
//				assesQuality(candidate, random);
//			}

			/** STEP 2.4: SELECTING BEST CANDIDATES */			
//			candidates = filterMovelets(candidates);		
			movelets.addAll(filterMovelets(candidates));
			
//			System.gc();
//		}
		
		/** STEP 2.2: Runs the pruning process */
		if(getDescriptor().getFlag(&quot;last_prunning&quot;))
			movelets = lastPrunningFilter(movelets);

		/** STEP 2.3: ---------------------------- */
		outputMovelets(movelets);
		/** -------------------------------------- */

//		/** STEP 2.3.3, to write all outputs: */
//		super.output(&quot;train&quot;, this.train, movelets, false);
//		
//		if (!this.test.isEmpty())
//			super.output(&quot;test&quot;, this.test, movelets, false);
		
		return movelets;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOZEIJxtEeuT9elTX1485g" name="outputMovelets" specification="_BB6HUJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOZEIZxtEeuT9elTX1485g" name="movelets" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <language>java</language>
                  <body>synchronized (DiscoveryAdapter.class) {
			super.output(&quot;train&quot;, this.train, movelets, true);
			base =  null;
			
			// Compute distances and best alignments for the test trajectories:
			/* If a test trajectory set was provided, it does the same.
			 * and return otherwise */
			/** STEP 2.3.2: Output Movelets (partial) */
			if (!this.test.isEmpty()) {
	//			base = computeBaseDistances(trajectory, this.test);
				for (Subtrajectory candidate : movelets) {
					// It initializes the set of distances of all movelets to null
					candidate.setDistances(null);
					// In this step the set of distances is filled by this method
					computeDistances(candidate, this.test); //, computeBaseDistances(trajectory, this.test));
				}
				super.output(&quot;test&quot;, this.test, movelets, true);
			}
		}
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOZrMJxtEeuT9elTX1485g" name="moveletsDiscovery" specification="_BJqVIJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOZrMZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOZrMpxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOZrM5xtEeuT9elTX1485g" name="minSize">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOZrNJxtEeuT9elTX1485g" name="maxSize">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOZrNZxtEeuT9elTX1485g" name="random" type="_A_dQQJxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOZrNpxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BOZrN5xtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>List&lt;Subtrajectory> candidates = new ArrayList&lt;Subtrajectory>();

		int n = trajectory.getPoints().size();
		
		// TO USE THE LOG, PUT &quot;-Ms -3&quot;
		switch (maxSize) {
			case -1: maxSize = n; break;
			case -2: maxSize = (int) Math.round( Math.log10(n) / Math.log10(2) ); break;	
			case -3: maxSize = (int) Math.ceil(Math.log(n))+1; break;	
			default: break;
		}

		// It starts with the base case	
		int size = 1;
		Integer total_size = 0;
		
		base = computeBaseDistances(trajectory, trajectories);
		
		if( minSize &lt;= 1 ) {
			candidates.addAll(findCandidates(trajectory, trajectories, size, base));
			candidates.forEach(x -> assesQuality(x, random));
		}				
		
		double[][][][] lastSize = clone4DArray(base);		

		total_size = total_size + candidates.size();
		
		// Tratar o resto dos tamanhos 
		for (size = 2; size &lt;= maxSize; size++) {
	
			// Precompute de distance matrix
			double[][][][] newSize = newSize(trajectory, trajectories, base, lastSize, size);

			// Create candidates and compute min distances		
			List&lt;Subtrajectory> candidatesOfSize = findCandidates(trajectory, trajectories, size, newSize);
		
			total_size = total_size + candidatesOfSize.size();
			
			if (size >= minSize){
				
				//for (Subtrajectory candidate : candidatesOfSize) assesQuality(candidate);				
				candidatesOfSize.forEach(x -> assesQuality(x, random));
				candidates.addAll(candidatesOfSize);
			}
		
			lastSize = newSize;
						
		} // for (int size = 2; size &lt;= max; size++)	
		
		candidates = filterMovelets(candidates);
		
		progressBar.plus(&quot;Class: &quot; + trajectory.getMovingObject() 
						+ &quot;. Trajectory: &quot; + trajectory.getTid() 
						+ &quot;. Trajectory Size: &quot; + trajectory.getPoints().size() 
						+ &quot;. Number of Candidates: &quot; + total_size 
						+ &quot;. Total of Movelets: &quot; + candidates.size() 
						+ &quot;. Max Size: &quot; + maxSize
						+ &quot;. Used Features: &quot; + this.maxNumberOfFeatures);
//						+ &quot;. Memory Use: &quot; + Mov3letsUtils.getUsedMemory());
	
		base = null;
		lastSize = null;

		return candidates;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOaSQJxtEeuT9elTX1485g" name="computeBaseDistances" specification="_BB-_0JxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOaSQZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOaSQpxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOaSQ5xtEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BOaSRJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>int n = trajectory.getPoints().size();
		int size = 1;
		
		double[][][][] base = new double[(n - size)+1][][][];		
		
		for (int start = 0; start &lt;= (n - size); start++) {
			
			base[start] = new double[trajectories.size()][][];				
			
			for (int i = 0; i &lt; trajectories.size(); i++) {
				
				MAT&lt;?> T = trajectories.get(i);
				Point a = trajectory.getPoints().get(start);
								
				base[start][i] = new double[getDescriptor().getAttributes().size()][(trajectories.get(i).getPoints().size()-size)+1];
						
				for (int j = 0; j &lt;= (T.getPoints().size()-size); j++) {
					Point b = T.getPoints().get(j);
					

					for (int k = 0; k &lt; getDescriptor().getAttributes().size(); k++) {
						AttributeDescriptor attr = getDescriptor().getAttributes().get(k);						
						base[start][i][k][j] = attr.getDistanceComparator().calculateDistance(
								a.getAspects().get(k), 
								b.getAspects().get(k), 
								attr);
					
//						base[start][i][k][j] = (distance != MAX_VALUE) ? (distance) : MAX_VALUE;	// No sense				
					
					} // for (int k = 0; k &lt; distance.length; k++)
					
				} // for (int j = 0; j &lt;= (train.size()-size); j++)
				
			} //for (int i = 0; i &lt; train.size(); i++)
			
		} // for (int start = 0; start &lt;= (n - size); start++)

		return base;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOa5UJxtEeuT9elTX1485g" name="clone4DArray" specification="_AmfWoJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOa5UZxtEeuT9elTX1485g" name="source">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BOa5UpxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOa5U5xtEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BOa5VJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>double[][][][] dest = new double[source.length][][][];
		for (int i = 0; i &lt; dest.length; i++) {
			dest[i] = new double[source[i].length][][];
			for (int j = 0; j &lt; dest[i].length; j++) {
				dest[i][j] = new double[source[i][j].length][];
				for (int k = 0; k &lt; dest[i][j].length; k++) {
					dest[i][j][k] = new double[source[i][j][k].length];
					for (int k2 = 0; k2 &lt; source[i][j][k].length; k2++) {
						dest[i][j][k][k2] = source[i][j][k][k2];
					}
				}
			}
		}
		return dest;		
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BObgYJxtEeuT9elTX1485g" name="newSize" specification="_BCKmAJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BObgYZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BObgYpxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BObgY5xtEeuT9elTX1485g" name="base">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BObgZJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BObgZZxtEeuT9elTX1485g" name="lastSize">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BObgZpxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BObgZ5xtEeuT9elTX1485g" name="size">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BObgaJxtEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BObgaZxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>int n = trajectory.getPoints().size();	
		
		for (int start = 0; start &lt;= (n - size); start++) {
						
			for (int i = 0; i &lt; trajectories.size(); i++) {
				
				if (trajectories.get(i).getPoints().size() >= size) {						
							
					for (int j = 0; j &lt;= (trajectories.get(i).getPoints().size()-size); j++) {
												
						for (int k = 0; k &lt; lastSize[start][i].length; k++) {
							
							if (lastSize[start][i][k][j] != MAX_VALUE)
								
								lastSize[start][i][k][j] += base[start+size-1][i][k][j+size-1];
						
						} // for (int k = 0; k &lt; distance.length; k++) {
											
					} // for (int j = 0; j &lt;= (train.size()-size); j++)
					
				} // if (train.get(i).getData().size() >= size) 
				
			} // for (int i = 0; i &lt; train.size(); i++)
			
		} // for (int start = 0; start &lt;= (n - size); start++)
		
		return lastSize;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOcHcJxtEeuT9elTX1485g" name="findCandidates" specification="_BCWMMJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOcHcZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOcHcpxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOcHc5xtEeuT9elTX1485g" name="size">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOcHdJxtEeuT9elTX1485g" name="mdist">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BOcHdZxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOcHdpxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BOcHd5xtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>// Trajectory P size => n
		int n = trajectory.getPoints().size();
		int[][] combinations = makeCombinations(exploreDimensions, numberOfFeatures, maxNumberOfFeatures);
		
		maxDistances = new double[getDescriptor().getAttributes().size()];
		
		// List of Candidates to extract from P:
		List&lt;Subtrajectory> candidates = new ArrayList&lt;>();
		
		// From point 0 to (n - &lt;candidate max. size>) 
		for (int start = 0; start &lt;= (n - size); start++) {
//			Point p = trajectory.getPoints().get(start);
			
			// Extract possible candidates from P to max. candidate size:
			List&lt;Subtrajectory> list = buildSubtrajectory(start, start + size - 1, trajectory, trajectories.size(), combinations);
							
			double[][][] distancesForAllT = mdist[start];
			
			// For each trajectory in the database
			for (int i = 0; i &lt; trajectories.size(); i++) {
				MAT&lt;MO> T = trajectories.get(i);	
				
				double[][] distancesForT = distancesForAllT[i];
				double[][] ranksForT = new double[distancesForT.length][];
				
				int limit = T.getPoints().size() - size + 1;
				
				if (limit > 0)
					for (int k = 0; k &lt; numberOfFeatures; k++) {				
						ranksForT[k] = rankingAlgorithm.rank(Arrays.stream(distancesForT[k],0,limit).toArray());
					} // for (int k = 0; k &lt; numberOfFeatures; k++)
				
				for (Subtrajectory subtrajectory : list) {		
					int bestPosition = (limit > 0) ? bestAlignmentByRanking(ranksForT, subtrajectory.getPointFeatures()) : -1;
					for (int j = 0; j &lt; subtrajectory.getPointFeatures().length; j++) {	
						double distance = (bestPosition >= 0) ? 
								distancesForT[subtrajectory.getPointFeatures()[j]][bestPosition] : MAX_VALUE;
						subtrajectory.getDistances()[j][i] = (distance != MAX_VALUE) ? 
								Math.sqrt( distance / size ) : MAX_VALUE;	
								
						if (maxDistances[j] &lt; subtrajectory.getDistances()[j][i] &amp;&amp; subtrajectory.getDistances()[j][i] != MAX_VALUE)
							maxDistances[j] = subtrajectory.getDistances()[j][i];
					}
				}
				
			} // for (int currentFeatures = 1; currentFeatures &lt;= numberOfFeatures; currentFeatures++)
			
			candidates.addAll(list);

		} // for (int start = 0; start &lt;= (n - size); start++)
		
		return candidates;
		
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOcugJxtEeuT9elTX1485g" name="bestAlignmentByRanking" specification="_AmmEUJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOcugZxtEeuT9elTX1485g" name="ranksForT">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BOcugpxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOcug5xtEeuT9elTX1485g" name="comb">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BOcuhJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOcuhZxtEeuT9elTX1485g" name="reindex">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOcuhpxtEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>if (reindex)
			return super.bestAlignmentByRanking(ranksForT, comb);
		
		double[] rankMerged = new double[ranksForT[0].length];
		
		// In case it's a combination of more than one dimension
		for (int i = 0; i &lt; comb.length; i++) {
			for (int j = 0; j &lt; ranksForT[0].length; j++) {
				rankMerged[j] += ranksForT[comb[i]][j];
			}
		}

		int minRankIndex = 0;
		for (int j = 1; j &lt; rankMerged.length; j++) {
			if (rankMerged[j] &lt; rankMerged[minRankIndex])
				minRankIndex = j;
		}
		
		return minRankIndex;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOdVkJxtEeuT9elTX1485g" name="bestAlignmentByPointFeatures" specification="_BChLUJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOdVkZxtEeuT9elTX1485g" name="s" type="_6X8wwJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOdVkpxtEeuT9elTX1485g" name="t" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOdVk5xtEeuT9elTX1485g" name="mdist">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BOdVlJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOdVlZxtEeuT9elTX1485g" name="idxt">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOdVlpxtEeuT9elTX1485g" type="_BBwWUJxtEeuT9elTX1485g" direction="return"/>
                  <language>java</language>
                  <body>double[] maxValues = new double[numberOfFeatures];
		Arrays.fill(maxValues, MAX_VALUE);
				
		if (s.getSize() > t.getPoints().size())
			return new Pair&lt;>(null, maxValues);

		List&lt;Point> menor = s.getPoints();
		List&lt;Point> maior = t.getPoints();
		
//		int idxs = this.train.indexOf(s.getTrajectory()); 
//		int idxt = this.train.indexOf(t); // mdist[idxs][idx];

		int size =  s.getSize();
		int diffLength = maior.size() - size;	
		int limit = maior.size() - size + 1;
				
		int[] comb = s.getPointFeatures();
		double[] currentSum = new double[comb.length];
		double[] values = new double[numberOfFeatures];
		double[][] distancesForT = new double[comb.length][diffLength+1];
						
		double[] x = new double[comb.length];
		Arrays.fill(x, MAX_VALUE);
				
		for (int i = 0; i &lt;= diffLength; i++) {

			Arrays.fill(currentSum, 0);
						
			for (int j = 0; j &lt; menor.size(); j++) {

				if (mdist == null) {
					values = getDistances(menor.get(j), maior.get(i + j), comb);
					
					for (int k = 0; k &lt; comb.length; k++) {					
						if (currentSum[k] != MAX_VALUE &amp;&amp; values[k] != MAX_VALUE)
							currentSum[k] += values[k];
						else 
							currentSum[k] = MAX_VALUE;
						
					}
				} else {
					for (int k = 0; k &lt; comb.length; k++) {
						if (currentSum[k] != MAX_VALUE &amp;&amp; mdist[s.getStart()+j][idxt][comb[k]][i+j] != MAX_VALUE)
							currentSum[k] += mdist[s.getStart()+j][idxt][comb[k]][i+j]; //values[comb[k]] * values[comb[k]];
						else
							currentSum[k] = MAX_VALUE;
			
					}
				}	
			}
			
			for (int k = 0; k &lt; comb.length; k++) {
				distancesForT[k][i] = currentSum[k];
			}
		}
		
		double[][] ranksForT = new double[comb.length][];
		
		for (int k = 0; k &lt; comb.length; k++) {
			ranksForT[k] = rankingAlgorithm.rank(Arrays.stream(distancesForT[k],0,limit).toArray());
		} // for (int k = 0; k &lt; numberOfFeatures; k++)
		
		
		int bestPosition = bestAlignmentByRanking(ranksForT, comb, (mdist == null? true : false));
		
		double[] bestAlignment = new double[comb.length];
		
		for (int j = 0; j &lt; comb.length; j++) {
			
			double distance = (bestPosition >= 0) ? distancesForT[j][bestPosition] : MAX_VALUE;
			
			bestAlignment[j] = (distance != MAX_VALUE) ? 
					Math.sqrt( distance / size ) : MAX_VALUE;
			
		} // for (int j = 0; j &lt; comb.length; j++)
		
		int start = bestPosition;
		int end = bestPosition + menor.size() - 1;
		
//		return bestAlignment;
		return new Pair&lt;>(new Subtrajectory(start, end , t), bestAlignment);
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOejsJxtEeuT9elTX1485g" name="transformTrajectoryOutput" specification="_BC0GQJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOejsZxtEeuT9elTX1485g" name="candidates" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOejspxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOejs5xtEeuT9elTX1485g" name="file">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOejtJxtEeuT9elTX1485g" name="mdist">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BOejtZxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>for (Subtrajectory movelet : candidates) {
			// It initializes the set of distances of all movelets to null
			movelet.setDistances(null);
			
			// In this step the set of distances is filled by this method
			computeDistances(movelet, trajectories, mdist); // computeDistances(movelet, trajectories);
		}
		
		/** STEP 3.0: Output Movelets (partial) */
		super.output(file, trajectories, candidates, true);
		
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOfKwJxtEeuT9elTX1485g" name="computeDistances" specification="_BC-eUJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOfKwZxtEeuT9elTX1485g" name="candidate" type="_6X8wwJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOfKwpxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOfKw5xtEeuT9elTX1485g" name="mdist">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BOfKxJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>/* This pairs will store the subtrajectory of the best alignment 
		 * of the candidate into each trajectory and the distance 
		 * */
		Pair&lt;Subtrajectory, double[]> distance;
		
		double[][] trajectoryDistancesToCandidate = new double[candidate.getSplitpoints().length]
															  [trajectories.size()];
		
		List&lt;Subtrajectory> bestAlignments = new ArrayList&lt;Subtrajectory>();
				
		/* It calculates the distance of trajectories to the candidate
		 */
		for (int i = 0; i &lt; trajectories.size(); i++) {
			
			distance = bestAlignmentByPointFeatures(candidate, trajectories.get(i), mdist, i);
			
			for (int j = 0; j &lt; candidate.getSplitpoints().length; j++) {
				trajectoryDistancesToCandidate[j][i] = distance.getSecond()[j];							
			}
						
			bestAlignments.add(distance.getFirst());
//			trajectoryDistancesToCandidate[i] = distance.getSecond();			
		}
		
		candidate.setDistances(trajectoryDistancesToCandidate);
		candidate.setBestAlignments(bestAlignments);
	</body>
                </ownedBehavior>
                <ownedOperation xmi:id="_AmcTUJxtEeuT9elTX1485g" name="discover" method="_BOYdEJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_AmcTUZxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Amc6YJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_AmfWoJxtEeuT9elTX1485g" name="clone4DArray" method="_BOa5UJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_AmfWoZxtEeuT9elTX1485g" name="source">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_AmhL0JxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_AmfWopxtEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Amf9sJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_AmmEUJxtEeuT9elTX1485g" name="bestAlignmentByRanking" method="_BOcugJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_AmmrYJxtEeuT9elTX1485g" name="ranksForT">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_AmpHoJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_AmmrYZxtEeuT9elTX1485g" name="comb">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_AmpusZxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_AmmrYpxtEeuT9elTX1485g" name="reindex">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_AmnScJxtEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BB6HUJxtEeuT9elTX1485g" name="outputMovelets" method="_BOZEIJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BB6uYJxtEeuT9elTX1485g" name="movelets" type="_6Xk9UJxsEeuT9elTX1485g"/>
                </ownedOperation>
                <ownedOperation xmi:id="_BB-_0JxtEeuT9elTX1485g" name="computeBaseDistances" method="_BOaSQJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BB-_0ZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BB_m4JxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BB_m4ZxtEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BB_m4pxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BCKmAJxtEeuT9elTX1485g" name="newSize" method="_BObgYJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BCKmAZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BCKmApxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BCKmA5xtEeuT9elTX1485g" name="base">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BCUXAJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BCKmBJxtEeuT9elTX1485g" name="lastSize">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BCU-EZxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BCLNEJxtEeuT9elTX1485g" name="size">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BCLNEZxtEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BCL0IJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BCWMMJxtEeuT9elTX1485g" name="findCandidates" method="_BOcHcJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BCWMMZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BCWzQJxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BCWzQZxtEeuT9elTX1485g" name="size">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BCWzQpxtEeuT9elTX1485g" name="mdist">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BCf9MZxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BCZ2kJxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BCadoJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BChLUJxtEeuT9elTX1485g" name="bestAlignmentByPointFeatures" method="_BOdVkJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BCn5AJxtEeuT9elTX1485g" name="s" type="_6X8wwJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BCogEJxtEeuT9elTX1485g" name="t" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BCogEZxtEeuT9elTX1485g" name="mdist">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BCv00JxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BCogEpxtEeuT9elTX1485g" name="idxt">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BJxC0JxtEeuT9elTX1485g" type="_BBwWUJxtEeuT9elTX1485g" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_BC0GQJxtEeuT9elTX1485g" name="transformTrajectoryOutput" method="_BOejsJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BC0GQZxtEeuT9elTX1485g" name="candidates" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BC0GQpxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BC0tUJxtEeuT9elTX1485g" name="file">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BC0tUZxtEeuT9elTX1485g" name="mdist">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BC9QMJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BC-eUJxtEeuT9elTX1485g" name="computeDistances" method="_BOfKwJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BC_FYJxtEeuT9elTX1485g" name="candidate" type="_6X8wwJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BC_FYZxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BC_FYpxtEeuT9elTX1485g" name="mdist">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BDHBMZxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BJhLMJxtEeuT9elTX1485g" name="MasterMoveletsDiscovery" method="_BOXO8JxtEeuT9elTX1485g">
                  <eAnnotations xmi:id="_BJiZUJxtEeuT9elTX1485g" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_BJiZUZxtEeuT9elTX1485g" key="create"/>
                  </eAnnotations>
                  <ownedParameter xmi:id="_BJhLMZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BJhLMpxtEeuT9elTX1485g" name="trajsFromClass" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BJhLM5xtEeuT9elTX1485g" name="data" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BJhLNJxtEeuT9elTX1485g" name="train" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BJhLNZxtEeuT9elTX1485g" name="test" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BJhyQJxtEeuT9elTX1485g" name="qualityMeasure" type="_A_j98JxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BJhyQZxtEeuT9elTX1485g" name="descriptor" type="_6X34QJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BJjAYJxtEeuT9elTX1485g" type="_AmSiUJxtEeuT9elTX1485g" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_BJqVIJxtEeuT9elTX1485g" name="moveletsDiscovery" method="_BOZrMJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BJqVIZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BJqVIpxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BJqVI5xtEeuT9elTX1485g" name="minSize">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BJqVJJxtEeuT9elTX1485g" name="maxSize">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BJqVJZxtEeuT9elTX1485g" name="random" type="_A_dQQJxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BJq8MJxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BJq8MZxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_AnL6MJxtEeuT9elTX1485g" name="SuperClassMoveletsDiscovery">
                <ownedComment xmi:id="_BPmlEJxtEeuT9elTX1485g">
                  <body>The Class SuperMoveletsDiscovery.
 *
@author Tarlis Portela &lt;tarlis@tarlis.com.br>
@param &lt;MO> the generic type</body>
                </ownedComment>
                <generalization xmi:id="_BDbxUJxtEeuT9elTX1485g" general="_ArOssJxtEeuT9elTX1485g"/>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOgY4JxtEeuT9elTX1485g" name="SuperClassMoveletsDiscovery" specification="_BJy4AJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOgY4ZxtEeuT9elTX1485g" name="trajsFromClass" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOgY4pxtEeuT9elTX1485g" name="data" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOgY45xtEeuT9elTX1485g" name="train" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOgY5JxtEeuT9elTX1485g" name="test" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOgY5ZxtEeuT9elTX1485g" name="qualityMeasure" type="_A_j98JxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOgY5pxtEeuT9elTX1485g" name="descriptor" type="_6X34QJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOgY55xtEeuT9elTX1485g" type="_AnL6MJxtEeuT9elTX1485g" direction="return"/>
                  <language>java</language>
                  <body>super(trajsFromClass.get(0), trajsFromClass, data, train, test, qualityMeasure, descriptor);
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOg_8JxtEeuT9elTX1485g" name="discover" specification="_AnQLoJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOg_8ZxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BOg_8pxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>int maxSize = getDescriptor().getParamAsInt(&quot;max_size&quot;);
		int minSize = getDescriptor().getParamAsInt(&quot;min_size&quot;);

		List&lt;Subtrajectory> movelets = new ArrayList&lt;Subtrajectory>();

		progressBar.trace(&quot;By Class - SUPERMovelets Discovery for Class: &quot; + trajsFromClass.get(0).getMovingObject() 
				+ &quot;. Trajectory: &quot; + trajectory.getTid());
		
		this.proportionMeasure = new ProportionQualityMeasure&lt;MO>(this.trajsFromClass, TAU);
		
		for (MAT&lt;MO> trajectory : trajsFromClass) {
			// This guarantees the reproducibility
			Random random = new Random(trajectory.getTid());
			/** STEP 2.1: Starts at discovering movelets */
			List&lt;Subtrajectory> candidates = moveletsDiscovery(trajectory, this.trajsFromClass, minSize, maxSize, random);
			
//			progressBar.trace(&quot;Class: &quot; + trajectory.getMovingObject() 
//					+ &quot;. Trajectory: &quot; + trajectory.getTid() 
//					+ &quot;. Used GAMMA: &quot; + GAMMA);
			
			/** STEP 2.4: CANDIDATES */			
			movelets.addAll(candidates);

//			System.gc();
		}
		
		movelets = selectBestCandidates(trajectory, maxSize, new Random(trajectory.getTid()), movelets);
		
		/** STEP 2.2: Runs the pruning process */
		if(getDescriptor().getFlag(&quot;last_prunning&quot;))
			movelets = lastPrunningFilter(movelets);

		/** STEP 2.2: ---------------------------- */
		if (outputers != null)
			for (OutputterAdapter&lt;MO> output : outputers) {
				output.setDelayCount(1);			
			}
		
		outputMovelets(movelets);
		/** -------------------------------------- */
		
		return movelets;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOhnAJxtEeuT9elTX1485g" name="moveletsDiscovery" specification="_BJ7a4JxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOhnAZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOhnApxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOhnA5xtEeuT9elTX1485g" name="minSize">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOhnBJxtEeuT9elTX1485g" name="maxSize">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOhnBZxtEeuT9elTX1485g" name="random" type="_A_dQQJxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOhnBpxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BOhnB5xtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>List&lt;Subtrajectory> candidatesByProp = new ArrayList&lt;Subtrajectory>();

		int n = trajectory.getPoints().size();
		
		// TO USE THE LOG, PUT &quot;-Ms -3&quot;
		switch (maxSize) {
			case -1: maxSize = n; break;
			case -2: maxSize = (int) Math.round( Math.log10(n) / Math.log10(2) ); break;	
			case -3: maxSize = (int) Math.ceil(Math.log(n))+1; break;	
			default: break;
		}

		// It starts with the base case	
		int size = 1;
		Integer total_size = 0;
		
		base = computeBaseDistances(trajectory, trajectories);
		
		if( minSize &lt;= 1 ) {
			candidatesByProp.addAll(findCandidates(trajectory, trajectories, size, base));
//			candidates.forEach(x -> assesQuality(x, random));
		}				
		
		double[][][][] lastSize = clone4DArray(base);		

		total_size = total_size + candidatesByProp.size();
		
		// Tratar o resto dos tamanhos 
		for (size = 2; size &lt;= maxSize; size++) {
	
			// Precompute de distance matrix
			double[][][][] newSize = newSize(trajectory, trajectories, base, lastSize, size);

			// Create candidates and compute min distances		
			List&lt;Subtrajectory> candidatesOfSize = findCandidates(trajectory, trajectories, size, newSize);
		
			total_size = total_size + candidatesOfSize.size();
			
			if (size >= minSize){
				
				//for (Subtrajectory candidate : candidatesOfSize) assesQuality(candidate);				
//				candidatesOfSize.forEach(x -> assesQuality(x, random));
				candidatesByProp.addAll(candidatesOfSize);
			}
		
			lastSize = newSize;
						
		} // for (int size = 2; size &lt;= max; size++)
		
//		List&lt;Subtrajectory> bestCandidates = selectBestCandidates(trajectory, maxSize, random, candidatesByProp);	
	
		base =  null;
		lastSize = null;
		
		progressBar.plus(&quot;Class: &quot; + trajectory.getMovingObject() 
						+ &quot;. Trajectory: &quot; + trajectory.getTid() 
						+ &quot;. Trajectory Size: &quot; + trajectory.getPoints().size() 
						+ &quot;. Number of Candidates: &quot; + candidatesByProp.size() 
						+ &quot;. Max Size: &quot; + maxSize);
		
		return candidatesByProp;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOiOEJxtEeuT9elTX1485g" name="selectBestCandidates" specification="_BKATYJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOiOEZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOiOEpxtEeuT9elTX1485g" name="maxSize">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOiOE5xtEeuT9elTX1485g" name="random" type="_A_dQQJxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOiOFJxtEeuT9elTX1485g" name="candidatesByProp" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOiOFZxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BOiOFpxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>List&lt;Subtrajectory> bestCandidates;

		calculateProportion(candidatesByProp, random);
		bestCandidates = filterByProportion(candidatesByProp, random);
		
		if (getDescriptor().getFlag(&quot;feature_limit&quot;))
			bestCandidates = selectMaxFeatures(bestCandidates);
		
		bestCandidates = filterByQuality(bestCandidates, random, trajectory);

//		/* STEP 2.1.5: Recover Approach (IF Nothing found)
//		 * * * * * * * * * * * * * * * * * * * * * * * * */
//		if (bestCandidates.isEmpty()) { 
//			bestCandidates = recoverCandidates(trajectory, random, candidatesByProp);
//		}
		
		progressBar.trace(&quot;Class: &quot; + trajectory.getMovingObject() 
						+ &quot;. Total of Movelets: &quot; + bestCandidates.size() 
						+ &quot;. Used Features: &quot; + this.maxNumberOfFeatures);

		return bestCandidates;
	</body>
                </ownedBehavior>
                <ownedOperation xmi:id="_AnQLoJxtEeuT9elTX1485g" name="discover" method="_BOg_8JxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_AnQysJxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_AnQysZxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BJy4AJxtEeuT9elTX1485g" name="SuperClassMoveletsDiscovery" method="_BOgY4JxtEeuT9elTX1485g">
                  <eAnnotations xmi:id="_BJzfFJxtEeuT9elTX1485g" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_BJzfFZxtEeuT9elTX1485g" key="create"/>
                  </eAnnotations>
                  <ownedParameter xmi:id="_BJy4AZxtEeuT9elTX1485g" name="trajsFromClass" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BJy4ApxtEeuT9elTX1485g" name="data" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BJzfEJxtEeuT9elTX1485g" name="train" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BJzfEZxtEeuT9elTX1485g" name="test" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BJzfEpxtEeuT9elTX1485g" name="qualityMeasure" type="_A_j98JxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BJzfE5xtEeuT9elTX1485g" name="descriptor" type="_6X34QJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BJzfFpxtEeuT9elTX1485g" type="_AnL6MJxtEeuT9elTX1485g" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_BJ7a4JxtEeuT9elTX1485g" name="moveletsDiscovery" method="_BOhnAJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BJ7a4ZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BJ8B8JxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BJ8B8ZxtEeuT9elTX1485g" name="minSize">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BJ8B8pxtEeuT9elTX1485g" name="maxSize">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BJ8B85xtEeuT9elTX1485g" name="random" type="_A_dQQJxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BJ8B9JxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BJ8pAJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BKATYJxtEeuT9elTX1485g" name="selectBestCandidates" method="_BOiOEJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BKA6cJxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BKBhgJxtEeuT9elTX1485g" name="maxSize">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BKCIkJxtEeuT9elTX1485g" name="random" type="_A_dQQJxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BKCvoJxtEeuT9elTX1485g" name="candidatesByProp" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BKDWsJxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BKD9wJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_AncY4JxtEeuT9elTX1485g" name="PivotsMoveletsDiscovery">
                <ownedComment xmi:id="_BPnMIJxtEeuT9elTX1485g">
                  <body>The Class PivotsMoveletsDiscovery.
 *
@author Tarlis Portela &lt;tarlis@tarlis.com.br>
@param &lt;MO> the generic type</body>
                </ownedComment>
                <generalization xmi:id="_BEln4JxtEeuT9elTX1485g" general="_AmSiUJxtEeuT9elTX1485g"/>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOjcMJxtEeuT9elTX1485g" name="PivotsMoveletsDiscovery" specification="_BKHBEJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOjcMZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOjcMpxtEeuT9elTX1485g" name="trajsFromClass" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOjcM5xtEeuT9elTX1485g" name="data" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOjcNJxtEeuT9elTX1485g" name="train" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOjcNZxtEeuT9elTX1485g" name="test" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOjcNpxtEeuT9elTX1485g" name="qualityMeasure" type="_A_j98JxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOjcN5xtEeuT9elTX1485g" name="descriptor" type="_6X34QJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOjcOJxtEeuT9elTX1485g" type="_AncY4JxtEeuT9elTX1485g" direction="return"/>
                  <language>java</language>
                  <body>super(trajectory, trajsFromClass, data, train, test, qualityMeasure, descriptor);
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOkqUJxtEeuT9elTX1485g" name="moveletsDiscovery" specification="_BKQyEJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOkqUZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOkqUpxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOkqU5xtEeuT9elTX1485g" name="minSize">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOkqVJxtEeuT9elTX1485g" name="maxSize">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOkqVZxtEeuT9elTX1485g" name="random" type="_A_dQQJxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOkqVpxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BOkqV5xtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>List&lt;Subtrajectory> candidates = new ArrayList&lt;Subtrajectory>();

		int n = trajectory.getPoints().size();
		
		// TO USE THE LOG, PUT &quot;-Ms -3&quot;
		switch (maxSize) {
			case -1: maxSize = n; break;
			case -2: maxSize = (int) Math.round( Math.log10(n) / Math.log10(2) ); break;	
			case -3: maxSize = (int) Math.ceil(Math.log(n))+1; break;	
			default: break;
		}

		// It starts with the base case	
		int size = 1;
		Integer total_size = 0;
		
		base = computeBaseDistances(trajectory, trajectories);
		
		List&lt;Subtrajectory> candidatesOfSize = findCandidates(trajectory, trajectories, size, base);
		total_size = total_size + candidatesOfSize.size();
		
		candidatesOfSize = filterByQuality(candidatesOfSize, trajectories, random);

		if( minSize &lt;= 1 ) {
			candidates.addAll(candidatesOfSize);
		}				
		
		double[][][][] lastSize = clone4DArray(base);		
		
		// Tratar o resto dos tamanhos 
		for (size = 2; size &lt;= maxSize; size++) {
			
			// Precompute de distance matrix
			double[][][][] newSize = newSize(trajectory, trajectories, base, lastSize, size);
			
			candidatesOfSize = growPivots(candidatesOfSize, trajectory, trajectories, base, newSize, size);
			total_size = total_size + candidatesOfSize.size();
			
			candidatesOfSize = filterByQuality(candidatesOfSize, trajectories, random);
	
			
			if (size >= minSize){
				candidates.addAll(candidatesOfSize);
			}
		
			lastSize = newSize;
						
		} // for (int size = 2; size &lt;= max; size++)	
	
		progressBar.plus(&quot;Class: &quot; + trajectory.getMovingObject() 
						+ &quot;. Trajectory: &quot; + trajectory.getTid() 
						+ &quot;. Trajectory Size: &quot; + trajectory.getPoints().size() 
						+ &quot;. Number of Candidates: &quot; + total_size 
						+ &quot;. Total of Movelets: &quot; + candidates.size() 
						+ &quot;. Max Size: &quot; + maxSize
						+ &quot;. Used Features: &quot; + this.maxNumberOfFeatures);
//						+ &quot;. Memory Use: &quot; + Mov3letsUtils.getUsedMemory());
	
		base =  null;
		lastSize = null;
	
		return candidates;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOlRYJxtEeuT9elTX1485g" name="growPivots" specification="_BDxvkJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOlRYZxtEeuT9elTX1485g" name="candidatesOfSize" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOlRYpxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOlRY5xtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOlRZJxtEeuT9elTX1485g" name="base">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BOlRZZxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOlRZpxtEeuT9elTX1485g" name="newSize">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BOlRZ5xtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOlRaJxtEeuT9elTX1485g" name="size">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOlRaZxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BOlRapxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>List&lt;Subtrajectory> newCandidates = new ArrayList&lt;Subtrajectory>();
		
		for(Subtrajectory candidate : candidatesOfSize) {
			Subtrajectory subtrajectory = buildNewSize(candidate, trajectory, trajectories, newSize, size, true);
			if (subtrajectory != null)
				newCandidates.add(subtrajectory);
			
			subtrajectory = buildNewSize(candidate, trajectory, trajectories, newSize, size, false);	
			if (subtrajectory != null)
				newCandidates.add(subtrajectory);		
		}
		
		return newCandidates;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOmfgJxtEeuT9elTX1485g" name="buildNewSize" specification="_BEI78JxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOmfgZxtEeuT9elTX1485g" name="candidate" type="_6X8wwJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOmfgpxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOmfg5xtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOmfhJxtEeuT9elTX1485g" name="mdist">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BOmfhZxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOmfhpxtEeuT9elTX1485g" name="size">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOmfh5xtEeuT9elTX1485g" name="left">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOmfiJxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" direction="return"/>
                  <language>java</language>
                  <body>int start = candidate.getStart() - (left? 1 : 0);
		int end   = candidate.getEnd()   + (left? 0 : 1);
		
		if (start &lt; 0 || end > trajectory.getPoints().size()-1)
			return null;
		
		Subtrajectory subtrajectory = new Subtrajectory(start, end, trajectory, trajectories.size(),
				candidate.getPointFeatures(), candidate.getK());
		
		computeCandidateDistances(subtrajectory, trajectories, mdist, size, start);
		
		return subtrajectory;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOnGkJxtEeuT9elTX1485g" name="computeCandidateDistances" specification="_BEaBsJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOnGkZxtEeuT9elTX1485g" name="subtrajectory" type="_6X8wwJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOnGkpxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOnGk5xtEeuT9elTX1485g" name="mdist">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BOnGlJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOnGlZxtEeuT9elTX1485g" name="size">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOnGlpxtEeuT9elTX1485g" name="start">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>double[][][] distancesForAllT = mdist[start];
		
		// For each trajectory in the database
		for (int i = 0; i &lt; trajectories.size(); i++) {
			MAT&lt;MO> T = trajectories.get(i);	
			
			double[][] distancesForT = distancesForAllT[i];
			double[][] ranksForT = new double[distancesForT.length][];
			
			int limit = T.getPoints().size() - size + 1;
			
			if (limit > 0)
				for (int k = 0; k &lt; numberOfFeatures; k++) {				
					ranksForT[k] = rankingAlgorithm.rank(Arrays.stream(distancesForT[k],0,limit).toArray());
				} // for (int k = 0; k &lt; numberOfFeatures; k++)
				
			int bestPosition = (limit > 0) ? bestAlignmentByRanking(ranksForT, subtrajectory.getPointFeatures()) : -1;
			for (int j = 0; j &lt; subtrajectory.getPointFeatures().length; j++) {	
				double distance = (bestPosition >= 0) ? 
						distancesForT[subtrajectory.getPointFeatures()[j]][bestPosition] : MAX_VALUE;
				subtrajectory.getDistances()[j][i] = (distance != MAX_VALUE) ? 
						Math.sqrt( distance / size ) : MAX_VALUE;					
			}
			
		}
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOntoJxtEeuT9elTX1485g" name="filterByQuality" specification="_BKajEJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOntoZxtEeuT9elTX1485g" name="bestCandidates" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOntopxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOnto5xtEeuT9elTX1485g" name="random" type="_A_dQQJxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOntpJxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BOntpZxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>/** STEP 2.3, for this trajectory movelets: 
		 * It transforms the training and test sets of trajectories using the movelets */
		for (Subtrajectory candidate : bestCandidates) {
			// It initializes the set of distances of all movelets to null
			computeCandidateDistances(candidate, trajectories, base, candidate.getSize(), candidate.getStart());
			// In this step the set of distances is filled by this method
			computeDistances(candidate, trajectories); // computeDistances(movelet, trajectories);

			/* STEP 2.1.6: QUALIFY BEST HALF CANDIDATES 
			 * * * * * * * * * * * * * * * * * * * * * * * * */
//			assesQuality(candidate);
			assesQuality(candidate, random); //TODO change?
		}

		/** STEP 2.2: SELECTING BEST CANDIDATES */	
		return filterMovelets(bestCandidates);
	</body>
                </ownedBehavior>
                <ownedOperation xmi:id="_BDxvkJxtEeuT9elTX1485g" name="growPivots" visibility="private" method="_BOlRYJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BDyWoJxtEeuT9elTX1485g" name="candidatesOfSize" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BDyWoZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BDyWopxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BDyWo5xtEeuT9elTX1485g" name="base">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BEEDcJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BDyWpJxtEeuT9elTX1485g" name="newSize">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BEFRkJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BDyWpZxtEeuT9elTX1485g" name="size">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BDy9sJxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BDy9sZxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BEI78JxtEeuT9elTX1485g" name="buildNewSize" visibility="private" method="_BOmfgJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BEJjAJxtEeuT9elTX1485g" name="candidate" type="_6X8wwJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BEKKEJxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BEKKEZxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BEKKEpxtEeuT9elTX1485g" name="mdist">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BEYMgZxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BEKxIJxtEeuT9elTX1485g" name="size">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BEMmUJxtEeuT9elTX1485g" name="left">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BEN0cJxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_BEaBsJxtEeuT9elTX1485g" name="computeCandidateDistances" visibility="private" method="_BOnGkJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BEaBsZxtEeuT9elTX1485g" name="subtrajectory" type="_6X8wwJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BEaowJxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BEaowZxtEeuT9elTX1485g" name="mdist">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BEikkJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BEaowpxtEeuT9elTX1485g" name="size">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BEaow5xtEeuT9elTX1485g" name="start">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BKHBEJxtEeuT9elTX1485g" name="PivotsMoveletsDiscovery" method="_BOjcMJxtEeuT9elTX1485g">
                  <eAnnotations xmi:id="_BKHoJJxtEeuT9elTX1485g" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_BKHoJZxtEeuT9elTX1485g" key="create"/>
                  </eAnnotations>
                  <ownedParameter xmi:id="_BKHBEZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BKHBEpxtEeuT9elTX1485g" name="trajsFromClass" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BKHBE5xtEeuT9elTX1485g" name="data" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BKHoIJxtEeuT9elTX1485g" name="train" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BKHoIZxtEeuT9elTX1485g" name="test" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BKHoIpxtEeuT9elTX1485g" name="qualityMeasure" type="_A_j98JxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BKHoI5xtEeuT9elTX1485g" name="descriptor" type="_6X34QJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BKHoJpxtEeuT9elTX1485g" type="_AncY4JxtEeuT9elTX1485g" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_BKQyEJxtEeuT9elTX1485g" name="moveletsDiscovery" method="_BOkqUJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BKQyEZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BKRZIJxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BKRZIZxtEeuT9elTX1485g" name="minSize">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BKRZIpxtEeuT9elTX1485g" name="maxSize">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BKRZI5xtEeuT9elTX1485g" name="random" type="_A_dQQJxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BKRZJJxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BKSAMJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BKajEJxtEeuT9elTX1485g" name="filterByQuality" method="_BOntoJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BKajEZxtEeuT9elTX1485g" name="bestCandidates" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BKajEpxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BKajE5xtEeuT9elTX1485g" name="random" type="_A_dQQJxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BKbKIJxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BKbKIZxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_An6S8JxtEeuT9elTX1485g" name="RandomMoveletsDiscovery">
                <ownedComment xmi:id="_BPnzMJxtEeuT9elTX1485g">
                  <body>The Class HiperMoveletsDiscovery.
 *
@author tarlis
@param &lt;MO> the generic type</body>
                </ownedComment>
                <generalization xmi:id="_BE3UsJxtEeuT9elTX1485g" general="_Akjc8JxtEeuT9elTX1485g"/>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOo7wJxtEeuT9elTX1485g" name="RandomMoveletsDiscovery" specification="_BKhQwJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOo7wZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOo7wpxtEeuT9elTX1485g" name="trajsFromClass" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOo7w5xtEeuT9elTX1485g" name="data" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOo7xJxtEeuT9elTX1485g" name="train" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOo7xZxtEeuT9elTX1485g" name="test" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOo7xpxtEeuT9elTX1485g" name="qualityMeasure" type="_A_j98JxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOo7x5xtEeuT9elTX1485g" name="descriptor" type="_6X34QJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOo7yJxtEeuT9elTX1485g" type="_An6S8JxtEeuT9elTX1485g" direction="return"/>
                  <language>java</language>
                  <body>super(trajsFromClass, data, train, test, qualityMeasure, descriptor);
		this.trajectory = trajectory;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOpi0JxtEeuT9elTX1485g" name="discover" specification="_AoAZkJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOpi0ZxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BOpi0pxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>int maxSize = getDescriptor().getParamAsInt(&quot;max_size&quot;);
		int minSize = getDescriptor().getParamAsInt(&quot;min_size&quot;);

		List&lt;Subtrajectory> movelets = new ArrayList&lt;Subtrajectory>();
		
//		int trajsLooked = 0, trajsIgnored = 0;

		progressBar.trace(&quot;Random Movelets Discovery for Class: &quot; + trajsFromClass.get(0).getMovingObject()); 
		
		this.proportionMeasure = new ProportionQualityMeasure&lt;MO>(this.trajsFromClass, TAU);

//		while (queue.size() > 0) {
//			MAT&lt;MO> trajectory = queue.get(0);
//		if (queue.contains(trajectory)) {
//			queue.remove(trajectory);
//			trajsLooked++;
			
			// This guarantees the reproducibility
			Random random = new Random(trajectory.getTid());
			/** STEP 2.1: Starts at discovering movelets */
			List&lt;Subtrajectory> candidates = moveletsDiscovery(trajectory, this.trajsFromClass, minSize, maxSize, random);
			
//			progressBar.trace(&quot;Class: &quot; + trajsFromClass.get(0).getMovingObject() 
//					+ &quot;. Trajectory: &quot; + trajectory.getTid() 
//					+ &quot;. Used GAMMA: &quot; + GAMMA);

			// Removes trajectories from queue:
//			trajsIgnored += updateQueue(getCoveredInClass(candidates));
			
			/** STEP 2.4: SELECTING BEST CANDIDATES */			
//			candidates = filterMovelets(candidates);		
			movelets.addAll(filterMovelets(candidates));
			
//			System.gc();
//		}
		
		/** STEP 2.2: Runs the pruning process */
		if(getDescriptor().getFlag(&quot;last_prunning&quot;))
			movelets = lastPrunningFilter(movelets);

		/** STEP 2.2: ---------------------------- */
		outputMovelets(movelets);
		/** -------------------------------------- */	
		
//		progressBar.plus(trajsIgnored, 
//						   &quot;Class: &quot; + trajsFromClass.get(0).getMovingObject() 
////					   + &quot;. Total of Movelets: &quot; + movelets.size() 
//					   + &quot;. Trajs. Looked: &quot; + trajsLooked 
//					   + &quot;. Trajs. Ignored: &quot; + trajsIgnored);
		
//		progressBar.trace(&quot;Class: &quot; + trajsFromClass.get(0).getMovingObject() 
//				   + &quot;. Total of Movelets: &quot; + movelets.size());
//		System.out.println(&quot;\nMOVELETS:&quot;);
//		for (Subtrajectory subtrajectory : movelets) {
//			System.out.println(subtrajectory);
//		}

//		/** STEP 2.5, to write all outputs: */
//		super.output(&quot;train&quot;, this.train, movelets, false);
//		
//		if (!this.test.isEmpty())
//			super.output(&quot;test&quot;, this.test, movelets, false);
		
		return movelets;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOqJ4JxtEeuT9elTX1485g" name="selectBestCandidates" specification="_BKro0JxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOqJ4ZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOqJ4pxtEeuT9elTX1485g" name="maxSize">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOqJ45xtEeuT9elTX1485g" name="random" type="_A_dQQJxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOqJ5JxtEeuT9elTX1485g" name="candidatesByProp" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOqJ5ZxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BOqJ5pxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>List&lt;Subtrajectory> bestCandidates;

		int candidates_total = candidatesByProp.size();
		int n = bucketSize(candidatesByProp.size());
				
		bestCandidates = randomPop(candidatesByProp, n);
		bestCandidates = filterByQuality(bestCandidates, random, trajectory);

		/*
		 * STEP 2.1.5: Recover Approach (IF Nothing found) * * * * * * * * * * * * * * *
		 * * * * * * * * *
		 */
		if (bestCandidates.isEmpty())
			for (int i = n; i &lt; candidatesByProp.size(); i += n) {
				bestCandidates = filterByQuality(randomPop(candidatesByProp, n), random, trajectory);
				
				if (i > candidatesByProp.size() || !bestCandidates.isEmpty()) break;
				else n *= 2; // expand the window size
			}

//		queue.removeAll(getCoveredInClass(bestCandidates));

		progressBar.plus(&quot;Class: &quot; + trajectory.getMovingObject() + &quot;. Trajectory: &quot; + trajectory.getTid()
				+ &quot;. Trajectory Size: &quot; + trajectory.getPoints().size() + &quot;. Number of Candidates: &quot;
				+ candidates_total + &quot;. Total of Movelets: &quot; + bestCandidates.size() + &quot;. Max Size: &quot; + maxSize
				+ &quot;. Used Features: &quot; + this.maxNumberOfFeatures);

		return bestCandidates;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOqw8JxtEeuT9elTX1485g" name="randomPop" specification="_BEycMJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOqw8ZxtEeuT9elTX1485g" name="list" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOqw8pxtEeuT9elTX1485g" name="totalItems">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOqw85xtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BOqw9JxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>Random rand = new Random();

		// create a temporary list for storing 
		// selected element 
		List&lt;Subtrajectory> newList = new ArrayList&lt;>();
		for (int i = 0; i &lt; totalItems; i++) {

			// take a raundom index between 0 to size 
			// of given List 
			int randomIndex = rand.nextInt(list.size());

			// pop element to temporary list 
			newList.add(list.remove(randomIndex));
		}
		return newList;
	</body>
                </ownedBehavior>
                <ownedOperation xmi:id="_AoAZkJxtEeuT9elTX1485g" name="discover" method="_BOpi0JxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_AoAZkZxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_AoAZkpxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BEycMJxtEeuT9elTX1485g" name="randomPop" method="_BOqw8JxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BEycMZxtEeuT9elTX1485g" name="list" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BEzDQJxtEeuT9elTX1485g" name="totalItems">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BEzDQZxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BEzDQpxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BKhQwJxtEeuT9elTX1485g" name="RandomMoveletsDiscovery" method="_BOo7wJxtEeuT9elTX1485g">
                  <eAnnotations xmi:id="_BKkUEJxtEeuT9elTX1485g" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_BKkUEZxtEeuT9elTX1485g" key="create"/>
                  </eAnnotations>
                  <ownedParameter xmi:id="_BKh30JxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BKie4JxtEeuT9elTX1485g" name="trajsFromClass" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BKjF8JxtEeuT9elTX1485g" name="data" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BKjF8ZxtEeuT9elTX1485g" name="train" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BKjF8pxtEeuT9elTX1485g" name="test" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BKjtAJxtEeuT9elTX1485g" name="qualityMeasure" type="_A_j98JxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BKjtAZxtEeuT9elTX1485g" name="descriptor" type="_6X34QJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BKkUEpxtEeuT9elTX1485g" type="_An6S8JxtEeuT9elTX1485g" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_BKro0JxtEeuT9elTX1485g" name="selectBestCandidates" method="_BOqJ4JxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BKro0ZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BKsP4JxtEeuT9elTX1485g" name="maxSize">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BKsP4ZxtEeuT9elTX1485g" name="random" type="_A_dQQJxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BKsP4pxtEeuT9elTX1485g" name="candidatesByProp" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BKs28JxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BKs28ZxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_AoMm0JxtEeuT9elTX1485g" name="PrecomputeMoveletsDiscovery">
                <ownedComment xmi:id="_BPoaQJxtEeuT9elTX1485g">
                  <body>The Class PrecomputeMoveletsDiscovery.
 *
@author Tarlis Portela &lt;tarlis@tarlis.com.br>
@param &lt;MO> the generic type</body>
                </ownedComment>
                <generalization xmi:id="_BFvecZxtEeuT9elTX1485g" general="_AmSiUJxtEeuT9elTX1485g"/>
                <ownedAttribute xmi:id="_BM-H0JxtEeuT9elTX1485g" name="base" visibility="private" isStatic="true">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BM-u4JxtEeuT9elTX1485g" value="*"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_BM_V8ZxtEeuT9elTX1485g" value="null"/>
                </ownedAttribute>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOr_EJxtEeuT9elTX1485g" name="PrecomputeMoveletsDiscovery" specification="_BKxIYJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOr_EZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOr_EpxtEeuT9elTX1485g" name="trajsFromClass" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOr_E5xtEeuT9elTX1485g" name="data" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOr_FJxtEeuT9elTX1485g" name="train" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOr_FZxtEeuT9elTX1485g" name="test" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOr_FpxtEeuT9elTX1485g" name="qualityMeasure" type="_A_j98JxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOr_F5xtEeuT9elTX1485g" name="descriptor" type="_6X34QJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOr_GJxtEeuT9elTX1485g" type="_AoMm0JxtEeuT9elTX1485g" direction="return"/>
                  <language>java</language>
                  <body>super(trajectory, trajsFromClass, data, train, test, qualityMeasure, descriptor);
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOsmIJxtEeuT9elTX1485g" name="discover" specification="_AoUioJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOsmIZxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BOsmIpxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>//		int n = this.data.size();
		int maxSize = getDescriptor().getParamAsInt(&quot;max_size&quot;);
		int minSize = getDescriptor().getParamAsInt(&quot;min_size&quot;);

		List&lt;Subtrajectory> movelets = new ArrayList&lt;Subtrajectory>();

		progressBar.trace(&quot;Movelets Discovery for Class [w/ PRE-MEM]: &quot; + trajsFromClass.get(0).getMovingObject() 
				+ &quot;. Trajectory: &quot; + trajectory.getTid());
		
		/** STEP 2.1: Starts at discovering movelets */
//		for (MAT&lt;MO> trajectory : trajsFromClass) {
			List&lt;Subtrajectory> candidates = moveletsDiscovery(trajectory, this.train, minSize, maxSize);
			
			/** STEP 2.4: SELECTING BEST CANDIDATES */			
//			candidates = filterMovelets(candidates);		
			movelets.addAll(filterMovelets(candidates));
			
//			System.gc();
//		}
		
		/** STEP 2.2: Runs the pruning process */
		if(getDescriptor().getFlag(&quot;last_prunning&quot;))
			movelets = lastPrunningFilter(movelets);

		/** STEP 2.2: ---------------------------- */
		outputMovelets(movelets);
		/** -------------------------------------- */
		
//		/** STEP 2.6, to write all outputs: */
//		super.output(&quot;train&quot;, this.train, movelets, false);
//		// Compute distances and best alignments for the test trajectories:
//		/* If a test trajectory set was provided, it does the same.
//		 * and return otherwise */
//		if (!this.test.isEmpty())
//			super.output(&quot;test&quot;, this.test, movelets, false);
				
		return movelets;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOtNMJxtEeuT9elTX1485g" name="initBaseCases" specification="_BFKPoJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOtNMZxtEeuT9elTX1485g" name="data" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOtNMpxtEeuT9elTX1485g" name="N_THREADS">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOtNM5xtEeuT9elTX1485g" name="descriptor" type="_6X34QJxsEeuT9elTX1485g"/>
                  <language>java</language>
                  <body>if (base == null) {
			if (N_THREADS > 1)
				multithreadComputeBaseDistances(data, N_THREADS, descriptor);
			else 
				computeBaseDistances(data, descriptor);
			System.gc();
		}
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOt0QJxtEeuT9elTX1485g" name="computeBaseDistances" specification="_BFTZkJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOt0QZxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOt0QpxtEeuT9elTX1485g" name="descriptor" type="_6X34QJxsEeuT9elTX1485g"/>
                  <language>java</language>
                  <body>base = new double[trajectories.size()][][][][];
		
		ProgressBar bar = new ProgressBar(&quot;[2.0] >> Computing Base Distances&quot;, 
				Mov3letsUtils.getInstance().totalPoints((List) trajectories));
		
		for (int i = 0; i &lt; trajectories.size(); i++) {
			new PrecomputeBaseDistances&lt;MO>(i, trajectories, 
					base, descriptor, bar).computeBaseDistances(i, trajectories);
		}
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOubUJxtEeuT9elTX1485g" name="multithreadComputeBaseDistances" specification="_BFXD8JxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOubUZxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOubUpxtEeuT9elTX1485g" name="N_THREADS">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOubU5xtEeuT9elTX1485g" name="descriptor" type="_6X34QJxsEeuT9elTX1485g"/>
                  <language>java</language>
                  <body>ProgressBar bar = new ProgressBar(&quot;[2.0] >> Computing Base Distances&quot;, 
				Mov3letsUtils.getInstance().totalPoints((List) trajectories));

		base = new double[trajectories.size()][][][][];
		
		ExecutorService executor = (ExecutorService) 
				Executors.newFixedThreadPool(N_THREADS);
		List&lt;Future&lt;Integer>> futures = new ArrayList&lt;Future&lt;Integer>>();
		
		for (int i = 0; i &lt; trajectories.size(); i++) {
			Callable&lt;Integer> task = new PrecomputeBaseDistances&lt;MO>(i, trajectories, 
					base, descriptor, bar);
			futures.add(executor.submit(task));
		}
		
		for (Future&lt;Integer> future : futures) {
			try {
				future.get();
				Executors.newCachedThreadPool();
				System.gc();
			} catch (InterruptedException | ExecutionException e) {
				e.printStackTrace();
			}
		}
		executor.shutdown();
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOubVJxtEeuT9elTX1485g" name="moveletsDiscovery" specification="_BFbVYJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOubVZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOubVpxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOubV5xtEeuT9elTX1485g" name="minSize">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOvCYJxtEeuT9elTX1485g" name="maxSize">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOvCYZxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BOvCYpxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>List&lt;Subtrajectory> candidates = new ArrayList&lt;Subtrajectory>();

		Random random = new Random(trajectory.getTid());
		int n = trajectory.getPoints().size();
		
		// TO USE THE LOG, PUT &quot;-Ms -3&quot;
		switch (maxSize) {
			case -1: maxSize = n; break;
			case -2: maxSize = (int) Math.round( Math.log10(n) / Math.log10(2) ); break;	
			case -3: maxSize = (int) Math.ceil(Math.log(n))+1; break;	
			default: break;
		}

		// It starts with the base case	
		int size = 1;
		Integer total_size = 0;
		
//		base = computeBaseDistances(trajectory, trajectories);
		
		int idxt = trajectories.indexOf(trajectory);
		
		if( minSize &lt;= 1 ) {
			candidates.addAll(findCandidates(trajectory, trajectories, size, idxt));
			candidates.forEach(x -> assesQuality(x, random));
		}				
		
//		double[][][][] lastSize = clone4DArray(base);		

		total_size = total_size + candidates.size();
		
		// Tratar o resto dos tamanhos 
		for (size = 2; size &lt;= maxSize; size++) {
	
			// Precompute de distance matrix
//			double[][][][] newSize = newSize(trajectory, trajectories, base, lastSize, size);

			// Create candidates and compute min distances		
			List&lt;Subtrajectory> candidatesOfSize = findCandidates(trajectory, trajectories, size, idxt);
		
			total_size = total_size + candidatesOfSize.size();
			
			if (size >= minSize){
				
				//for (Subtrajectory candidate : candidatesOfSize) assesQuality(candidate);				
				candidatesOfSize.forEach(x -> assesQuality(x, random));
				
				candidates.addAll(candidatesOfSize);
			}
		
//			lastSize = newSize;
						
		} // for (int size = 2; size &lt;= max; size++)	
	
//		base =  null;
//		lastSize = null;

		candidates = filterMovelets(candidates);
		
		progressBar.trace(&quot;Class: &quot; + trajectory.getMovingObject() + &quot;. Trajectory: &quot; + trajectory.getTid() + &quot;. Trajectory Size: &quot; + trajectory.getPoints().size() + &quot;. Number of Candidates: &quot; + total_size + &quot;. Total of Movelets: &quot; + candidates.size() + &quot;. Max Size: &quot; + maxSize+ &quot;. Used Features: &quot; + this.maxNumberOfFeatures);

		return candidates;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOvCY5xtEeuT9elTX1485g" name="findCandidates" specification="_BFhcAJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOvCZJxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOvCZZxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOvCZpxtEeuT9elTX1485g" name="size">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOvCZ5xtEeuT9elTX1485g" name="idxt">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOvCaJxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BOvCaZxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>// Trajectory P size => n
		int n = trajectory.getPoints().size();
		int[][] combinations = makeCombinations(exploreDimensions, numberOfFeatures, maxNumberOfFeatures);
		
		// List of Candidates to extract from P:
		List&lt;Subtrajectory> candidates = new ArrayList&lt;>();
		

		// From point 0 to (n - &lt;candidate max. size>) 
		for (int start = 0; start &lt;= (n - size); start++) {
//			Point p = trajectory.getPoints().get(start);
			
			// Extract possible candidates from P to max. candidate size:
			List&lt;Subtrajectory> list = buildSubtrajectory(start, start + size - 1, trajectory, trajectories.size(), combinations);
									
			// For each trajectory in the database
			for (int i = 0; i &lt; trajectories.size(); i++) {
				MAT&lt;MO> T = trajectories.get(i);	
				
				int limit = T.getPoints().size() - size + 1;
				
				if (limit > 0)
					for (Subtrajectory subtrajectory : list) {	
						Pair&lt;Subtrajectory, double[]> bestAlignment = bestAlignmentByPointFeatures(subtrajectory, T, idxt, i);
						
						double[] distances = bestAlignment.getSecond();
						for (int j = 0; j &lt; subtrajectory.getPointFeatures().length; j++) {
							subtrajectory.getDistances()[j][i] = distances[j];							
						}
						
						subtrajectory.getBestAlignments().add(bestAlignment.getFirst());
					}
				
			} // for (int currentFeatures = 1; currentFeatures &lt;= numberOfFeatures; currentFeatures++)
			
			candidates.addAll(list);

		} // for (int start = 0; start &lt;= (n - size); start++)
		
		return candidates;
		
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOvpcJxtEeuT9elTX1485g" name="bestAlignmentByPointFeatures" specification="_BFmUgJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOvpcZxtEeuT9elTX1485g" name="s" type="_6X8wwJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOvpcpxtEeuT9elTX1485g" name="t" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOvpc5xtEeuT9elTX1485g" name="idxTs">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOvpdJxtEeuT9elTX1485g" name="idxT">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOvpdZxtEeuT9elTX1485g" type="_BBwWUJxtEeuT9elTX1485g" direction="return"/>
                  <language>java</language>
                  <body>double[] maxValues = new double[numberOfFeatures];
		Arrays.fill(maxValues, MAX_VALUE);
				
		if (s.getSize() > t.getPoints().size())
			return new Pair&lt;>(null, maxValues);

		List&lt;Point> menor = s.getPoints();
		List&lt;Point> maior = t.getPoints();
		
		int diffLength = maior.size() - menor.size();		
				
		int[] comb = s.getPointFeatures();
		double currentSum[] = new double[comb.length];
		double[] values = new double[numberOfFeatures];
		double[][] distancesForT = new double[comb.length][diffLength+1];
						
		double[] x = new double[comb.length];
		Arrays.fill(x, MAX_VALUE);
				
		for (int i = 0; i &lt;= diffLength; i++) {

			Arrays.fill(currentSum, 0);
						
			for (int j = 0; j &lt; menor.size(); j++) {

				// Here we get from mdist:
				values = getDistances(idxTs, j, idxT, (i + j));
//				values = mdist.getBaseDistances(menor.get(j), maior.get(i + j), comb);

				for (int k = 0; k &lt; comb.length; k++) {					
					if (currentSum[k] != MAX_VALUE &amp;&amp; values[k] != MAX_VALUE)
						currentSum[k] += values[comb[k]]; // * values[comb[k]];
					else {
						currentSum[k] = MAX_VALUE;
					}
				}
				
				
				if (firstVectorGreaterThanTheSecond(currentSum, x) ){
					for (int k = 0; k &lt; comb.length; k++) {
						currentSum[k] = MAX_VALUE;
					}					
					break;					
				} 											
				
			}
			
			if (firstVectorGreaterThanTheSecond(x, currentSum) ){
				for (int k = 0; k &lt; comb.length; k++) {
					x[k] = currentSum[k];					
				}				
			}
			
			for (int k = 0; k &lt; comb.length; k++) {
				distancesForT[k][i] = currentSum[k];
			}
		}
		
		double[][] ranksForT = new double[distancesForT.length][];
		
		for (int k = 0; k &lt; comb.length; k++) {
			ranksForT[k] = rankingAlgorithm.rank(distancesForT[k]);
		} // for (int k = 0; k &lt; numberOfFeatures; k++)
		
		
		int bestPosition = bestAlignmentByRanking(ranksForT,comb);
		
		double[] bestAlignment = new double[comb.length];
		
		for (int j = 0; j &lt; comb.length; j++) {
			
			double distance = distancesForT[j][bestPosition];
			
			bestAlignment[j] = 
					(distance != MAX_VALUE) ? Math.sqrt(distance / menor.size()) 
												   : MAX_VALUE;
			
		} // for (int j = 0; j &lt; comb.length; j++)
		
		int start = bestPosition;
		int end = bestPosition + menor.size() - 1;
		
//		return bestAlignment;
		return new Pair&lt;>(new Subtrajectory(start, end , t), bestAlignment);
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOwQgJxtEeuT9elTX1485g" name="getDistances" specification="_AobQUJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOwQgZxtEeuT9elTX1485g" name="idxTs">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOwQgpxtEeuT9elTX1485g" name="pa">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOwQg5xtEeuT9elTX1485g" name="idxT">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOwQhJxtEeuT9elTX1485g" name="pb">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOwQhZxtEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BOwQhpxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>if (idxTs &lt; idxT)
			return base[idxTs][pa][idxT - idxTs][pb];
		else
			return base[idxT][pa][idxTs - idxT][pb];
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOxeoJxtEeuT9elTX1485g" name="transformTrajectoryOutput" specification="_BFp-4JxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOxeoZxtEeuT9elTX1485g" name="candidates" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOxeopxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOxeo5xtEeuT9elTX1485g" name="file">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOxepJxtEeuT9elTX1485g" name="startIdx">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>for (Subtrajectory movelet : candidates) {
			// It initializes the set of distances of all movelets to null
			movelet.setDistances(null);
			// In this step the set of distances is filled by this method
			computeDistances(movelet, trajectories, startIdx); // computeDistances(movelet, trajectories);
		}
		
		/** STEP 3.0: Output Movelets */
		super.output(file, trajectories, candidates, true);
		
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOxepZxtEeuT9elTX1485g" name="computeDistances" specification="_BFsbIZxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOyFsJxtEeuT9elTX1485g" name="candidate" type="_6X8wwJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOyFsZxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOyFspxtEeuT9elTX1485g" name="startIdx">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>/* This pairs will store the subtrajectory of the best alignment 
		 * of the candidate into each trajectory and the distance 
		 * */
		Pair&lt;Subtrajectory, double[]> distance;
		
		double[][] trajectoryDistancesToCandidate = new double[candidate.getSplitpoints().length]
															  [trajectories.size()];
		
		List&lt;Subtrajectory> bestAlignments = new ArrayList&lt;Subtrajectory>();
				
		/* It calculates the distance of trajectories to the candidate
		 */
		for (int i = 0; i &lt; trajectories.size(); i++) {
			
			distance = bestAlignmentByPointFeatures(candidate, trajectories.get(i), this.train.indexOf(candidate.getTrajectory()), i+startIdx);
			
			for (int j = 0; j &lt; candidate.getSplitpoints().length; j++) {
				trajectoryDistancesToCandidate[j][i] = distance.getSecond()[j];							
			}
						
			bestAlignments.add(distance.getFirst());
//			trajectoryDistancesToCandidate[i] = distance.getSecond();			
		}
		
		candidate.setDistances(trajectoryDistancesToCandidate);
		candidate.setBestAlignments(bestAlignments);
	</body>
                </ownedBehavior>
                <ownedOperation xmi:id="_AoUioJxtEeuT9elTX1485g" name="discover" method="_BOsmIJxtEeuT9elTX1485g">
                  <ownedComment xmi:id="_BPpBUZxtEeuT9elTX1485g">
                    <body>Looks for candidates in the trajectory, then compares with every other trajectory.
	 *
	 * @return the list</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_AoVJsJxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_AoVJsZxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_AobQUJxtEeuT9elTX1485g" name="getDistances" method="_BOwQgJxtEeuT9elTX1485g">
                  <ownedComment xmi:id="_BPpoY5xtEeuT9elTX1485g">
                    <body>Gets the distances.
	 *
	 * @param idxTs the idx ts
	 * @param pa the pa
	 * @param idxT the idx T
	 * @param pb the pb
	 * @return the distances</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_AobQUZxtEeuT9elTX1485g" name="idxTs">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_Aob3YJxtEeuT9elTX1485g" name="pa">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_Aob3YZxtEeuT9elTX1485g" name="idxT">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_AocecJxtEeuT9elTX1485g" name="pb">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_AocecZxtEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_AodFgJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BFKPoJxtEeuT9elTX1485g" name="initBaseCases" isStatic="true" method="_BOtNMJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BFME0JxtEeuT9elTX1485g" name="data" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BFMr4JxtEeuT9elTX1485g" name="N_THREADS">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BFMr4ZxtEeuT9elTX1485g" name="descriptor" type="_6X34QJxsEeuT9elTX1485g"/>
                </ownedOperation>
                <ownedOperation xmi:id="_BFTZkJxtEeuT9elTX1485g" name="computeBaseDistances" isStatic="true" method="_BOt0QJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BFTZkZxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BFUAoJxtEeuT9elTX1485g" name="descriptor" type="_6X34QJxsEeuT9elTX1485g"/>
                </ownedOperation>
                <ownedOperation xmi:id="_BFXD8JxtEeuT9elTX1485g" name="multithreadComputeBaseDistances" isStatic="true" method="_BOubUJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BFXD8ZxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BFXD8pxtEeuT9elTX1485g" name="N_THREADS">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BFXrAJxtEeuT9elTX1485g" name="descriptor" type="_6X34QJxsEeuT9elTX1485g"/>
                </ownedOperation>
                <ownedOperation xmi:id="_BFbVYJxtEeuT9elTX1485g" name="moveletsDiscovery" method="_BOubVJxtEeuT9elTX1485g">
                  <ownedComment xmi:id="_BPpoYJxtEeuT9elTX1485g">
                    <body>* * * * * * * * * * * * * * * * * * * * ** * * * * * * * * * * * * * * * * * * * * * * * * * * * * >>
	 * HERE FOLLOWS THE DISCOVERING PROCEDURES: * * * * * * * * * * * * * * * * * * * * * * * * * * * * * >>
	 * ** * * * * * * * * * * * * * * * * * * * *.
	 *
	 * @param trajectory the trajectory
	 * @param trajectories the trajectories
	 * @param minSize the min size
	 * @param maxSize the max size
	 * @return the list</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_BFbVYZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BFbVYpxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BFbVY5xtEeuT9elTX1485g" name="minSize">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BFb8cJxtEeuT9elTX1485g" name="maxSize">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BFb8cZxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BFb8cpxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BFhcAJxtEeuT9elTX1485g" name="findCandidates" method="_BOvCY5xtEeuT9elTX1485g">
                  <ownedComment xmi:id="_BPpoYZxtEeuT9elTX1485g">
                    <body>Find candidates.
	 *
	 * @param trajectory the trajectory
	 * @param trajectories the trajectories
	 * @param size the size
	 * @param idxt the idxt
	 * @return the list</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_BFhcAZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BFhcApxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BFhcA5xtEeuT9elTX1485g" name="size">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BFiDEJxtEeuT9elTX1485g" name="idxt">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BFiDEZxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BFiDEpxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BFmUgJxtEeuT9elTX1485g" name="bestAlignmentByPointFeatures" method="_BOvpcJxtEeuT9elTX1485g">
                  <ownedComment xmi:id="_BPpoYpxtEeuT9elTX1485g">
                    <body>Best alignment by point features.
	 *
	 * @param s the s
	 * @param t the t
	 * @param idxTs the idx ts
	 * @param idxT the idx T
	 * @return the pair</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_BFmUgZxtEeuT9elTX1485g" name="s" type="_6X8wwJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BFmUgpxtEeuT9elTX1485g" name="t" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BFmUg5xtEeuT9elTX1485g" name="idxTs">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BFmUhJxtEeuT9elTX1485g" name="idxT">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BK65YJxtEeuT9elTX1485g" type="_BBwWUJxtEeuT9elTX1485g" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_BFp-4JxtEeuT9elTX1485g" name="transformTrajectoryOutput" method="_BOxeoJxtEeuT9elTX1485g">
                  <ownedComment xmi:id="_BPqPcJxtEeuT9elTX1485g">
                    <body>* * * * * * * * * * * * * * * * * * * ** * * * * * * * * * * * * * * * * * * * * * * * * * * * * >>
	 * HERE FOLLOWS THE OUTPUT TRANSFORMATIONS:     * * * * * * * * * * * * * * * * * * * * * * * * * * >>
	 * ** * * * * * * * * * * * * * * * * * * *.
	 *
	 * @param candidates the candidates
	 * @param trajectories the trajectories
	 * @param file the file
	 * @param startIdx the start idx</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_BFql8JxtEeuT9elTX1485g" name="candidates" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BFql8ZxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BFql8pxtEeuT9elTX1485g" name="file">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BFql85xtEeuT9elTX1485g" name="startIdx">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BFsbIZxtEeuT9elTX1485g" name="computeDistances" method="_BOxepZxtEeuT9elTX1485g">
                  <ownedComment xmi:id="_BPqPcZxtEeuT9elTX1485g">
                    <body>Compute distances.
	 *
	 * @param candidate the candidate
	 * @param trajectories the trajectories
	 * @param startIdx the start idx</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_BFtCMJxtEeuT9elTX1485g" name="candidate" type="_6X8wwJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BFtCMZxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BFtCMpxtEeuT9elTX1485g" name="startIdx">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BKxIYJxtEeuT9elTX1485g" name="PrecomputeMoveletsDiscovery" method="_BOr_EJxtEeuT9elTX1485g">
                  <eAnnotations xmi:id="_BKxvc5xtEeuT9elTX1485g" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_BKyWgJxtEeuT9elTX1485g" key="create"/>
                  </eAnnotations>
                  <ownedComment xmi:id="_BPpBUJxtEeuT9elTX1485g">
                    <body>Instantiates a new precompute movelets discovery.
	 *
	 * @param trajsFromClass the trajs from class
	 * @param data the data
	 * @param train the train
	 * @param test the test
	 * @param qualityMeasure the quality measure
	 * @param descriptor the descriptor</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_BKxIYZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BKxIYpxtEeuT9elTX1485g" name="trajsFromClass" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BKxIY5xtEeuT9elTX1485g" name="data" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BKxIZJxtEeuT9elTX1485g" name="train" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BKxvcJxtEeuT9elTX1485g" name="test" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BKxvcZxtEeuT9elTX1485g" name="qualityMeasure" type="_A_j98JxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BKxvcpxtEeuT9elTX1485g" name="descriptor" type="_6X34QJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BKyWgZxtEeuT9elTX1485g" type="_AoMm0JxtEeuT9elTX1485g" direction="return"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_AozDwJxtEeuT9elTX1485g" name="ProgressiveMoveletsDiscovery">
                <ownedComment xmi:id="_BPqPcpxtEeuT9elTX1485g">
                  <body>The Class ProgressiveMoveletsDiscovery.
 *
@author Tarlis Portela &lt;tarlis@tarlis.com.br>
@param &lt;MO> the generic type</body>
                </ownedComment>
                <generalization xmi:id="_BF_WEJxtEeuT9elTX1485g" general="_ApiqoJxtEeuT9elTX1485g"/>
                <ownedAttribute xmi:id="_BNCZQJxtEeuT9elTX1485g" name="numberOfFeatures" visibility="protected">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_BNDAUJxtEeuT9elTX1485g" value="1"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_BNGqsJxtEeuT9elTX1485g" name="maxNumberOfFeatures" visibility="protected">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_BNH40JxtEeuT9elTX1485g" value="2"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_BNIf4ZxtEeuT9elTX1485g" name="exploreDimensions" visibility="protected">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_BNJuAZxtEeuT9elTX1485g" name="qualityMeasure" visibility="protected" type="_A_j98JxtEeuT9elTX1485g" association="_BQShkJxtEeuT9elTX1485g">
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_BNKVEJxtEeuT9elTX1485g" value="null"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_BNK8IJxtEeuT9elTX1485g" name="rankingAlgorithm" visibility="protected" type="_BF2zMJxtEeuT9elTX1485g" association="_BQUWwJxtEeuT9elTX1485g">
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_BNLjMJxtEeuT9elTX1485g" value="new NaturalRanking()"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_BNOmgJxtEeuT9elTX1485g" name="maxSizeUsed" visibility="private">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_BNPNkJxtEeuT9elTX1485g" value="0"/>
                </ownedAttribute>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOzT0JxtEeuT9elTX1485g" name="ProgressiveMoveletsDiscovery" specification="_BK8ukJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOzT0ZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOzT0pxtEeuT9elTX1485g" name="trajsFromClass" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOzT05xtEeuT9elTX1485g" name="data" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOzT1JxtEeuT9elTX1485g" name="train" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOzT1ZxtEeuT9elTX1485g" name="test" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOzT1pxtEeuT9elTX1485g" name="qualityMeasure" type="_A_j98JxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOzT15xtEeuT9elTX1485g" name="descriptor" type="_6X34QJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOzT2JxtEeuT9elTX1485g" type="_AozDwJxtEeuT9elTX1485g" direction="return"/>
                  <language>java</language>
                  <body>super(trajectory, trajsFromClass, data, train, test, qualityMeasure, descriptor);
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BOz64JxtEeuT9elTX1485g" name="moveletsDiscovery" specification="_BLF4gJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BOz64ZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOz64pxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOz645xtEeuT9elTX1485g" name="minSize">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOz65JxtEeuT9elTX1485g" name="maxSize">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BOz65ZxtEeuT9elTX1485g" name="random" type="_A_dQQJxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BOz65pxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BOz655xtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>List&lt;Subtrajectory> candidates = new ArrayList&lt;Subtrajectory>();
		
		int n = trajectory.getPoints().size();
		// TO USE THE LOG, PUT &quot;-Ms -3&quot;
		switch (maxSize) {
			case -1: maxSize = n; break;
			case -2: maxSize = (int) Math.round( Math.log10(n) / Math.log10(2) ); break;	
			case -3: maxSize = (int) Math.ceil(Math.log(n))+1; break;	
			default: break;
		}

		// It starts with the base case: size = 1
		Integer total_size = 0;
		maxSizeUsed = 0;
		
		// Size 1:
		List&lt;Subtrajectory> candidatesOfSize = findCandidates(trajectory, trajectories, 1); // super.findCandidates
		candidatesOfSize.forEach(x -> assesQuality(x, random));			
		
		if ( minSize &lt; maxSize ){

			/** This is the difference: find candidates until the quality increases, qualify and returns 
			 * - As we filter candidates from the overlapping points, this returns only one starting from each 
			 *   point of the trajectory (with the best quality) */	
			for (Subtrajectory candidate : candidatesOfSize) {
				candidates.add(findCandidate(candidate, trajectory, trajectories, minSize+1, minSize, maxSize, random)); // size = 2
			}

			total_size = total_size + candidates.size();
			
		} else {
			
			total_size = total_size + candidatesOfSize.size();
			candidates = candidatesOfSize;
			
		}
		
		candidates = filterMovelets(candidates);

		System.out.println(&quot;\nMOVELETS:&quot;);
		for (int i = 0; i &lt; candidates.size(); i++) {
			System.out.println(i +&quot; => &quot;+ candidates.get(i));
		}
		
		progressBar.plus(&quot;Class: &quot; + trajectory.getMovingObject() 
						+ &quot;. Trajectory: &quot; + trajectory.getTid() 
						+ &quot;. Trajectory Size: &quot; + trajectory.getPoints().size() 
						+ &quot;. Number of Candidates: &quot; + total_size 
						+ &quot;. Total of Movelets: &quot; + candidates.size() 
						+ &quot;. Max Size: &quot; + maxSize
						+ &quot;. Max Size Used: &quot; + maxSizeUsed
						+ &quot;. Used Features: &quot; + this.maxNumberOfFeatures);
				
		return candidates;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BO0h8JxtEeuT9elTX1485g" name="findCandidate" specification="_BLN0UJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BO0h8ZxtEeuT9elTX1485g" name="previousCandidate" type="_6X8wwJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BO0h8pxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BO0h85xtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BO0h9JxtEeuT9elTX1485g" name="size">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BO0h9ZxtEeuT9elTX1485g" name="minSize">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BO0h9pxtEeuT9elTX1485g" name="maxSize">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BO0h95xtEeuT9elTX1485g" name="random" type="_A_dQQJxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BO0h-JxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" direction="return"/>
                  <language>java</language>
                  <body>maxSizeUsed = maxSizeUsed > size? maxSizeUsed : size;
		
		// Both conditions are search end points:
		if (size > maxSize) {
			
			return previousCandidate;
			
		} else 
		if (previousCandidate.getEnd()+2 >= trajectory.getPoints().size()) {
			
			return previousCandidate;
			
		} else {
			
			// Calc. distances and asses quality:
			Subtrajectory candidate = buildCandidate(previousCandidate, trajectory, trajectories, random);
			Subtrajectory nextCandidate = buildCandidate(candidate, trajectory, trajectories, random);
			
			Subtrajectory best = candidate;
			
			if (previousCandidate.getQuality().compareTo(best.getQuality()) &lt;= 0)
				best = previousCandidate;
			
			if (nextCandidate.getQuality().compareTo(best.getQuality()) &lt;= 0)
				best = nextCandidate;
			
			// if quality is decreasing
			if (previousCandidate.getQuality().compareTo(candidate.getQuality()) &lt;= 0 &amp;&amp; candidate.getQuality().compareTo(nextCandidate.getQuality()) &lt;= 0)
				return best;
			
			nextCandidate = findCandidate(nextCandidate, trajectory, trajectories, size+2, minSize, maxSize, random);
			
			if (nextCandidate.getQuality().compareTo(best.getQuality()) &lt;= 0)
				best = nextCandidate;
				
			return best;
		}
		
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BO1JAJxtEeuT9elTX1485g" name="buildCandidate" specification="_BLSs0JxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BO1JAZxtEeuT9elTX1485g" name="previousCandidate" type="_6X8wwJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BO1JApxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BO1JA5xtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BO1JBJxtEeuT9elTX1485g" name="random" type="_A_dQQJxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BO1JBZxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" direction="return"/>
                  <language>java</language>
                  <body>Subtrajectory candidate = nextSize(previousCandidate, trajectory, trajectories.size());
		
		// For each trajectory in the database
		for (int i = 0; i &lt; trajectories.size(); i++) {
			MAT&lt;MO> T = trajectories.get(i);
		
			double[] distances = bestAlignmentByPointFeatures(candidate, T).getSecond();
			for (int k = 0; k &lt; candidate.getPointFeatures().length; k++) {
				candidate.getDistances()[k][i] = distances[k];
			}
		}
		
		assesQuality(candidate, random);
		return candidate;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BO1wEJxtEeuT9elTX1485g" name="nextSize" specification="_BF9g4JxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BO1wEZxtEeuT9elTX1485g" name="s" type="_6X8wwJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BO1wEpxtEeuT9elTX1485g" name="T" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BO1wE5xtEeuT9elTX1485g" name="numberOfTrajectories">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BO1wFJxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" direction="return"/>
                  <language>java</language>
                  <body>return new Subtrajectory(s.getStart(), s.getEnd()+1, T, s.getPointFeatures(), numberOfTrajectories);
	</body>
                </ownedBehavior>
                <ownedOperation xmi:id="_BF9g4JxtEeuT9elTX1485g" name="nextSize" visibility="private" method="_BO1wEJxtEeuT9elTX1485g">
                  <ownedComment xmi:id="_BPq2g5xtEeuT9elTX1485g">
                    <body>Next size.
	 *
	 * @param s the s
	 * @param T the t
	 * @param numberOfTrajectories the number of trajectories
	 * @return the subtrajectory</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_BF9g4ZxtEeuT9elTX1485g" name="s" type="_6X8wwJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BF9g4pxtEeuT9elTX1485g" name="T" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BF9g45xtEeuT9elTX1485g" name="numberOfTrajectories">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BF-H8JxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_BK8ukJxtEeuT9elTX1485g" name="ProgressiveMoveletsDiscovery" method="_BOzT0JxtEeuT9elTX1485g">
                  <eAnnotations xmi:id="_BK_K0JxtEeuT9elTX1485g" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_BK_K0ZxtEeuT9elTX1485g" key="create"/>
                  </eAnnotations>
                  <ownedComment xmi:id="_BPqPc5xtEeuT9elTX1485g">
                    <body>Instantiates a new progressive movelets discovery.
	 *
	 * @param trajsFromClass the trajs from class
	 * @param data the data
	 * @param train the train
	 * @param test the test
	 * @param qualityMeasure the quality measure
	 * @param descriptor the descriptor</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_BK8ukZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BK8ukpxtEeuT9elTX1485g" name="trajsFromClass" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BK8uk5xtEeuT9elTX1485g" name="data" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BK8ulJxtEeuT9elTX1485g" name="train" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BK9VoJxtEeuT9elTX1485g" name="test" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BK9VoZxtEeuT9elTX1485g" name="qualityMeasure" type="_A_j98JxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BK9VopxtEeuT9elTX1485g" name="descriptor" type="_6X34QJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BK_K0pxtEeuT9elTX1485g" type="_AozDwJxtEeuT9elTX1485g" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_BLF4gJxtEeuT9elTX1485g" name="moveletsDiscovery" method="_BOz64JxtEeuT9elTX1485g">
                  <ownedComment xmi:id="_BPq2gJxtEeuT9elTX1485g">
                    <body>* * * * * * * * * * * * * * * * * * * * ** * * * * * * * * * * * * * * * * * * * * * * * * * * * * >>
	 * HERE FOLLOWS THE DISCOVERING PROCEDURES: * * * * * * * * * * * * * * * * * * * * * * * * * * * * * >>
	 * ** * * * * * * * * * * * * * * * * * * * *.
	 *
	 * @param trajectory the trajectory
	 * @param trajectories the trajectories
	 * @param minSize the min size
	 * @param maxSize the max size
	 * @param random the random
	 * @return the list</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_BLF4gZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BLF4gpxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BLGfkJxtEeuT9elTX1485g" name="minSize">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BLGfkZxtEeuT9elTX1485g" name="maxSize">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BLGfkpxtEeuT9elTX1485g" name="random" type="_A_dQQJxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BLGfk5xtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BLGflJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BLN0UJxtEeuT9elTX1485g" name="findCandidate" method="_BO0h8JxtEeuT9elTX1485g">
                  <ownedComment xmi:id="_BPq2gZxtEeuT9elTX1485g">
                    <body>[THE GREAT GAP].
	 *
	 * @param previousCandidate the previous candidate
	 * @param trajectory the trajectory
	 * @param trajectories the trajectories
	 * @param size the size
	 * @param minSize the min size
	 * @param maxSize the max size
	 * @param random the random
	 * @return the subtrajectory</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_BLN0UZxtEeuT9elTX1485g" name="previousCandidate" type="_6X8wwJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BLObYJxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BLObYZxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BLObYpxtEeuT9elTX1485g" name="size">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BLObY5xtEeuT9elTX1485g" name="minSize">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BLObZJxtEeuT9elTX1485g" name="maxSize">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BLObZZxtEeuT9elTX1485g" name="random" type="_A_dQQJxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BLPCcJxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_BLSs0JxtEeuT9elTX1485g" name="buildCandidate" visibility="private" method="_BO1JAJxtEeuT9elTX1485g">
                  <ownedComment xmi:id="_BPq2gpxtEeuT9elTX1485g">
                    <body>Builds the candidate.
	 *
	 * @param previousCandidate the previous candidate
	 * @param trajectory the trajectory
	 * @param trajectories the trajectories
	 * @param random the random
	 * @return the subtrajectory</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_BLSs0ZxtEeuT9elTX1485g" name="previousCandidate" type="_6X8wwJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BLSs0pxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BLTT4JxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BLTT4ZxtEeuT9elTX1485g" name="random" type="_A_dQQJxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BLTT4pxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" direction="return"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_ApSzAJxtEeuT9elTX1485g" name="PrecomputeBaseDistances">
                <ownedComment xmi:id="_BPq2hJxtEeuT9elTX1485g">
                  <body>The Class PrecomputeBaseDistances.
 *
@param &lt;MO> the generic type</body>
                </ownedComment>
                <ownedAttribute xmi:id="_BNRp0JxtEeuT9elTX1485g" name="fromIndex" visibility="private">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_BNSQ4ZxtEeuT9elTX1485g" name="trajectories" visibility="private" type="_6X6UgJxsEeuT9elTX1485g" isOrdered="true" association="_BQVk4ZxtEeuT9elTX1485g">
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BNS38JxtEeuT9elTX1485g" value="*"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_BNUtIJxtEeuT9elTX1485g" name="base" visibility="private">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BNUtIZxtEeuT9elTX1485g" value="*"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_BNXJYJxtEeuT9elTX1485g" name="descriptor" visibility="private" type="_6X34QJxsEeuT9elTX1485g" association="_BQWzAJxtEeuT9elTX1485g"/>
                <ownedAttribute xmi:id="_BNY-kJxtEeuT9elTX1485g" name="bar" visibility="private" type="_6X_NAZxsEeuT9elTX1485g" association="_BQadYJxtEeuT9elTX1485g"/>
                <interfaceRealization xmi:id="_BGJHEJxtEeuT9elTX1485g" client="_ApSzAJxtEeuT9elTX1485g" supplier="_6XmygZxsEeuT9elTX1485g" contract="_6XmygZxsEeuT9elTX1485g"/>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BO3lQJxtEeuT9elTX1485g" name="PrecomputeBaseDistances" specification="_BGLjUJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BO3lQZxtEeuT9elTX1485g" name="fromIndex">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BO3lQpxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BO3lQ5xtEeuT9elTX1485g" name="base">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BO3lRJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BO3lRZxtEeuT9elTX1485g" name="descriptor" type="_6X34QJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BO3lRpxtEeuT9elTX1485g" name="bar" type="_6X_NAZxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BO3lR5xtEeuT9elTX1485g" type="_ApSzAJxtEeuT9elTX1485g" direction="return"/>
                  <language>java</language>
                  <body>this.fromIndex = fromIndex;
		this.trajectories = trajectories;
//		this.base2 = base;
		this.descriptor = descriptor;
		this.bar = bar;
		this.base = base;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BO4MUJxtEeuT9elTX1485g" name="call" specification="_ApXEcJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BO4MUZxtEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>computeBaseDistances(fromIndex, this.trajectories);
		return 0;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BO4MUpxtEeuT9elTX1485g" name="computeBaseDistances" specification="_BGRp8JxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BO4MU5xtEeuT9elTX1485g" name="idxFrom">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BO4MVJxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <language>java</language>
                  <body>MAT&lt;MO> trajectory = trajectories.get(idxFrom);
		int n = trajectory.getPoints().size();
		int size = 1;
		
		base[idxFrom] = new double[(n - size)+1][][][];	
		
		for (int start = 0; start &lt;= (n - size); start++) {
			
			base[idxFrom][start] = new double[trajectories.size() - idxFrom][][];				
			
			for (int i = idxFrom; i &lt; trajectories.size(); i++) {
				
				MAT&lt;?> T = trajectories.get(i);
				Point a = trajectory.getPoints().get(start);
								
				base[idxFrom][start][i - idxFrom] = new double[(T.getPoints().size()-size)+1][this.descriptor.getAttributes().size()];
						
				for (int j = 0; j &lt;= (T.getPoints().size()-size); j++) {
					Point b = T.getPoints().get(j);
										
					for (int k = 0; k &lt; this.descriptor.getAttributes().size(); k++) {
						AttributeDescriptor attr = this.descriptor.getAttributes().get(k);
						// For each possible *Number Of Features* and each combination of those:
						base[idxFrom][start][i - idxFrom][j][k] = this.descriptor.getAttributes().get(k)
								.getDistanceComparator().calculateDistance(
								a.getAspects().get(k), 
								b.getAspects().get(k), 
								attr); // This also enhance distances
					}
					
				} // for (int j = 0; j &lt;= (train.size()-size); j++)
				
			} //for (int i = 0; i &lt; train.size(); i++)
			
			bar.plus();
			
		} // for (int start = 0; start &lt;= (n - size); start++)

//		return base;
	</body>
                </ownedBehavior>
                <ownedOperation xmi:id="_ApXEcJxtEeuT9elTX1485g" name="call" method="_BO4MUJxtEeuT9elTX1485g" raisedException="_6ZzK4JxsEeuT9elTX1485g">
                  <ownedParameter xmi:id="_ApXrgJxtEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BGLjUJxtEeuT9elTX1485g" name="PrecomputeBaseDistances" method="_BO3lQJxtEeuT9elTX1485g">
                  <eAnnotations xmi:id="_BGNYgJxtEeuT9elTX1485g" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_BGNYgZxtEeuT9elTX1485g" key="create"/>
                  </eAnnotations>
                  <ownedComment xmi:id="_BPrdkJxtEeuT9elTX1485g">
                    <body>Instantiates a new precompute base distances.
	 *
	 * @param fromIndex the from index
	 * @param trajectories the trajectories
	 * @param base the base
	 * @param descriptor the descriptor
	 * @param bar the bar</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_BGMKYJxtEeuT9elTX1485g" name="fromIndex">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BGMxcJxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BGMxcZxtEeuT9elTX1485g" name="base">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BGP0wJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BGMxcpxtEeuT9elTX1485g" name="descriptor" type="_6X34QJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BGMxc5xtEeuT9elTX1485g" name="bar" type="_6X_NAZxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BGNYgpxtEeuT9elTX1485g" type="_ApSzAJxtEeuT9elTX1485g" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_BGRp8JxtEeuT9elTX1485g" name="computeBaseDistances" method="_BO4MUpxtEeuT9elTX1485g">
                  <ownedComment xmi:id="_BPrdkZxtEeuT9elTX1485g">
                    <body>Compute base distances.
	 *
	 * @param idxFrom the idx from
	 * @param trajectories the trajectories</body>
                  </ownedComment>
                  <ownedParameter xmi:id="_BGRp8ZxtEeuT9elTX1485g" name="idxFrom">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BGRp8pxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_ApiqoJxtEeuT9elTX1485g" name="MoveletsDiscovery">
                <ownedComment xmi:id="_BPrdkpxtEeuT9elTX1485g">
                  <body>The Class MoveletsDiscovery.
 *
@author Tarlis Portela &lt;tarlis@tarlis.com.br>
@param &lt;MO> the generic type</body>
                </ownedComment>
                <generalization xmi:id="_BHE7MJxtEeuT9elTX1485g" general="_6OvxcJxsEeuT9elTX1485g"/>
                <ownedAttribute xmi:id="_BNcB4JxtEeuT9elTX1485g" name="numberOfFeatures" visibility="protected">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_BNco8JxtEeuT9elTX1485g" value="1"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_BNdQAZxtEeuT9elTX1485g" name="maxNumberOfFeatures" visibility="protected">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_BNd3EJxtEeuT9elTX1485g" value="2"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_BNeeIZxtEeuT9elTX1485g" name="exploreDimensions" visibility="protected">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_BNg6YJxtEeuT9elTX1485g" name="qualityMeasure" visibility="protected" type="_A_j98JxtEeuT9elTX1485g" association="_BQbrgZxtEeuT9elTX1485g">
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_BNhhcJxtEeuT9elTX1485g" value="null"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_BNivkZxtEeuT9elTX1485g" name="rankingAlgorithm" visibility="protected" type="_BF2zMJxtEeuT9elTX1485g" association="_BQeu0JxtEeuT9elTX1485g">
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_BNjWoJxtEeuT9elTX1485g" value="new NaturalRanking()"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_BNly4JxtEeuT9elTX1485g" name="combinations" visibility="protected">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BNly4ZxtEeuT9elTX1485g" value="*"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_BNnBAJxtEeuT9elTX1485g" value="null"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_BNnoEZxtEeuT9elTX1485g" name="K" visibility="protected">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_BNnoEpxtEeuT9elTX1485g" value="0"/>
                </ownedAttribute>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BO4zYJxtEeuT9elTX1485g" name="MoveletsDiscovery" specification="_BLZagJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BO4zYZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BO4zYpxtEeuT9elTX1485g" name="trajsFromClass" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BO4zY5xtEeuT9elTX1485g" name="data" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BO4zZJxtEeuT9elTX1485g" name="train" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BO4zZZxtEeuT9elTX1485g" name="test" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BO4zZpxtEeuT9elTX1485g" name="qualityMeasure" type="_A_j98JxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BO4zZ5xtEeuT9elTX1485g" name="descriptor" type="_6X34QJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BO4zaJxtEeuT9elTX1485g" type="_ApiqoJxtEeuT9elTX1485g" direction="return"/>
                  <language>java</language>
                  <body>super(trajectory, trajsFromClass, data, train, test, descriptor);
		init(qualityMeasure);
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BO5acJxtEeuT9elTX1485g" name="init" specification="_BLikcJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BO5acZxtEeuT9elTX1485g" name="qualityMeasure" type="_A_j98JxtEeuT9elTX1485g"/>
                  <language>java</language>
                  <body>this.qualityMeasure = qualityMeasure;
		
		this.numberOfFeatures = getDescriptor().numberOfFeatures();
		this.maxNumberOfFeatures = getDescriptor().getParamAsInt(&quot;max_number_of_features&quot;);
		this.exploreDimensions = getDescriptor().getFlag(&quot;explore_dimensions&quot;);
		
		switch (maxNumberOfFeatures) {
			case -1: // All features
			case -3: // Learn feature limits (mode)
			case -4: this.maxNumberOfFeatures = numberOfFeatures; break; // Learn feature limits (most frequent) 
			
			case -2: this.maxNumberOfFeatures = (int) Math.ceil(Math.log(numberOfFeatures))+1; break;
			
			default: break; // Fixed number of features
		}
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BO6BgJxtEeuT9elTX1485g" name="discover" specification="_Ap0XcJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BO6BgZxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BO6BgpxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>//		int n = this.data.size();
		int maxSize = getDescriptor().getParamAsInt(&quot;max_size&quot;);
		int minSize = getDescriptor().getParamAsInt(&quot;min_size&quot;);

		/** STEP 2.1: Starts at discovering movelets */
//		progressBar.trace(&quot;Class: &quot; + trajsFromClass.get(0).getMovingObject() + &quot;.&quot;); // Might be saved in HD
//		Mov3letsUtils.getInstance().startTimer(&quot;\tClass >> &quot; + trajectory.getClass());
		
		List&lt;Subtrajectory> movelets = new ArrayList&lt;Subtrajectory>();

		progressBar.trace(&quot;Movelets Discovery for Class [No MEM]: &quot; + trajsFromClass.get(0).getMovingObject() 
				+ &quot;. Trajectory: &quot; + trajectory.getTid());
		
//		for (MAT&lt;MO> trajectory : trajsFromClass) {
			// This guarantees the reproducibility
			Random random = new Random(trajectory.getTid());

			/** STEP 2.1: --------------------------------- */
			List&lt;Subtrajectory> candidates = moveletsDiscovery(trajectory, this.train, minSize, maxSize, random);
		
	//		Mov3letsUtils.getInstance().stopTimer(&quot;\tClass >> &quot; + trajectory.getClass());
			
			/** Summary Candidates: */
	//		Map&lt;String,Integer> map = new HashMap&lt;String,Integer>();
	//		for (Subtrajectory m : candidates) {
	//			String str =  Arrays.toString( m.getPointFeatures() );
	//			if (map.containsKey(str))
	//				map.put(str, (map.get(str) + 1) );
	//			else 
	//				map.put(str, 1);
	//		}
	//		Mov3letsUtils.trace(map.toString());
	//		MyCounter.data.put(&quot;MoveletsDiscoveryTime&quot;, estimatedTime);
	//		MyCounter.data.put(&quot;MoveletsFound&quot;, (long) movelets.size());
	//		MyCounter.numberOfShapelets = movelets.size();
			
	//		MyCounter.data.put(&quot;MoveletsAfterPruning&quot;, (long) movelets.size());
			
	//		int numberOfCandidates = (maxSize * (maxSize-1) / 2);

			/** STEP 2.3, for this trajectory movelets: 
			 * It transforms the training and test sets of trajectories using the movelets */
//			for (Subtrajectory candidate : candidates) {
//				// It initializes the set of distances of all movelets to null
//				candidate.setDistances(null);
//				// In this step the set of distances is filled by this method
//				computeDistances(candidate, this.train);
//				
//				assesQuality(candidate, random);
//			}
			
			/** STEP 2.4: SELECTING BEST CANDIDATES */			
//			candidates = filterMovelets(candidates);		
			movelets.addAll(filterMovelets(candidates));
			
//			System.gc();
//		}
		
		/** STEP 2.2: Runs the pruning process */
		if(getDescriptor().getFlag(&quot;last_prunning&quot;))
			movelets = lastPrunningFilter(movelets);

		/** STEP 2.2: ---------------------------- */
		outputMovelets(movelets);
		/** -------------------------------------- */
		
//		/** STEP 2.3.3, to write all outputs: */
//		super.output(&quot;train&quot;, this.train, movelets, false);
//		// Compute distances and best alignments for the test trajectories:
//		/* If a test trajectory set was provided, it does the same.
//		 * and return otherwise */
//		if (!this.test.isEmpty())
//			super.output(&quot;test&quot;, this.test, movelets, false);
		
		return movelets;
				
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BO6Bg5xtEeuT9elTX1485g" name="outputMovelets" specification="_BGd3MJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BO6BhJxtEeuT9elTX1485g" name="movelets" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <language>java</language>
                  <body>/** STEP 2.3.1: Output Movelets (partial) */
		synchronized (DiscoveryAdapter.class) {
			super.output(&quot;train&quot;, this.train, movelets, true);
			
			// Compute distances and best alignments for the test trajectories:
			/* If a test trajectory set was provided, it does the same.
			 * and return otherwise */
			/** STEP 2.3.2: Output Movelets (partial) */
			if (!this.test.isEmpty()) {
	//			base = computeBaseDistances(trajectory, this.test);
				for (Subtrajectory candidate : movelets) {
					// It initializes the set of distances of all movelets to null
					candidate.setDistances(null);
					// In this step the set of distances is filled by this method
					computeDistances(candidate, this.test); //, computeBaseDistances(trajectory, this.test));
				}
				super.output(&quot;test&quot;, this.test, movelets, true);
			}
		}
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BO6okJxtEeuT9elTX1485g" name="moveletsDiscovery" specification="_BLjykJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BO6okZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BO6okpxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BO6ok5xtEeuT9elTX1485g" name="minSize">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BO6olJxtEeuT9elTX1485g" name="maxSize">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BO6olZxtEeuT9elTX1485g" name="random" type="_A_dQQJxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BO6olpxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BO6ol5xtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>List&lt;Subtrajectory> candidates = new ArrayList&lt;Subtrajectory>();
		
		int n = trajectory.getPoints().size();
		
		// TO USE THE LOG, PUT &quot;-Ms -3&quot;
		switch (maxSize) {
			case -1: maxSize = n; break;
			case -2: maxSize = (int) Math.round( Math.log10(n) / Math.log10(2) ); break;	
			case -3: maxSize = (int) Math.ceil(Math.log(n))+1; break;	
			default: break;
		}

		// It starts with the base case	
		int size = 1;
		Integer total_size = 0;
		
		if( minSize &lt;= 1 ) {
			candidates.addAll(findCandidates(trajectory, trajectories, size));
			candidates.forEach(x -> assesQuality(x, random));
		}				
		
		total_size = total_size + candidates.size();
		
		// Tratar o resto dos tamanhos 
		for (size = 2; size &lt;= maxSize; size++) {
			
			if (size >= minSize){

				// Create candidates and compute min distances		
				List&lt;Subtrajectory> candidatesOfSize = findCandidates(trajectory, trajectories, size);
				
				total_size = total_size + candidatesOfSize.size();
				
				//for (Subtrajectory candidate : candidatesOfSize) assesQuality(candidate);				
				candidatesOfSize.forEach(x -> assesQuality(x, random));
				candidates.addAll(candidatesOfSize);
			}
						
		} // for (int size = 2; size &lt;= max; size++)	
		
		candidates = filterMovelets(candidates);
		
		progressBar.plus(&quot;Class: &quot; + trajectory.getMovingObject() 
						+ &quot;. Trajectory: &quot; + trajectory.getTid() 
						+ &quot;. Trajectory Size: &quot; + trajectory.getPoints().size() 
						+ &quot;. Number of Candidates: &quot; + total_size 
						+ &quot;. Total of Movelets: &quot; + candidates.size() 
						+ &quot;. Max Size: &quot; + maxSize
						+ &quot;. Used Features: &quot; + this.maxNumberOfFeatures);
				
		return candidates;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BO7PoJxtEeuT9elTX1485g" name="findCandidates" specification="_BGgTcJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BO7PoZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BO7PopxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BO7Po5xtEeuT9elTX1485g" name="size">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BO7PpJxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BO7PpZxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>// Trajectory P size => n
		int n = trajectory.getPoints().size();
		int[][] combinations = makeCombinations(exploreDimensions, numberOfFeatures, maxNumberOfFeatures);
		
		// List of Candidates to extract from P:
		List&lt;Subtrajectory> candidates = new ArrayList&lt;>();
		

		// From point 0 to (n - &lt;candidate max. size>) 
		for (int start = 0; start &lt;= (n - size); start++) {
//			Point p = trajectory.getPoints().get(start);
			
			// Extract possible candidates from P to max. candidate size:
			List&lt;Subtrajectory> list = buildSubtrajectory(start, start + size - 1, trajectory, trajectories.size(), combinations);
									
			// For each trajectory in the database
			for (int i = 0; i &lt; trajectories.size(); i++) {
				MAT&lt;MO> T = trajectories.get(i);	
				
//				int limit = T.getPoints().size() - size + 1;
				
//				if (limit > 0)
					for (Subtrajectory subtrajectory : list) {						
						double[] distances = bestAlignmentByPointFeatures(subtrajectory, T).getSecond();
						for (int j = 0; j &lt; subtrajectory.getPointFeatures().length; j++) {
							subtrajectory.getDistances()[j][i] = distances[j]; //Math.sqrt(distances[j] / size);							
						}
					}
				
			} // for (int currentFeatures = 1; currentFeatures &lt;= numberOfFeatures; currentFeatures++)
			
			candidates.addAll(list);

		} // for (int start = 0; start &lt;= (n - size); start++)
		
		return candidates;
		
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BO7PppxtEeuT9elTX1485g" name="makeCombinations" specification="_Ap8TQJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BO72sJxtEeuT9elTX1485g" name="exploreDimensions">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BO72sZxtEeuT9elTX1485g" name="numberOfFeatures">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BO72spxtEeuT9elTX1485g" name="maxNumberOfFeatures">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BO72s5xtEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BO72tJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>if (combinations != null)
			return combinations;
		
		int currentFeatures;
		if (exploreDimensions){
			currentFeatures = 1;
		} else {
			currentFeatures = numberOfFeatures;
		}
				
		combinations = new int[(int) (Math.pow(2, numberOfFeatures) - 1)][];
		int k = 0;
		// For each possible NumberOfFeatures and each combination of those: 
		for (;currentFeatures &lt;= maxNumberOfFeatures; currentFeatures++) {
			for (int[] comb : new Combinations(numberOfFeatures,currentFeatures)) {					
				
				combinations[k++] = comb;
				
			} // for (int[] comb : new Combinations(numberOfFeatures,currentFeatures)) 					
		} // for (int i = 0; i &lt; train.size(); i++

		combinations = Arrays.stream(combinations).filter(Objects::nonNull).toArray(int[][]::new);
		
		return combinations;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BO72tZxtEeuT9elTX1485g" name="bestAlignmentByPointFeatures" specification="_BGj90JxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BO72tpxtEeuT9elTX1485g" name="s" type="_6X8wwJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BO72t5xtEeuT9elTX1485g" name="t" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BO72uJxtEeuT9elTX1485g" type="_BBwWUJxtEeuT9elTX1485g" direction="return"/>
                  <language>java</language>
                  <body>double[] maxValues = new double[numberOfFeatures];
		Arrays.fill(maxValues, MAX_VALUE);
				
		if (s.getSize() > t.getPoints().size())
			return new Pair&lt;>(null, maxValues);

		List&lt;Point> menor = s.getPoints();
		List&lt;Point> maior = t.getPoints();
		
		int size =  s.getSize();
		int diffLength = maior.size() - size;	
		int limit = maior.size() - size + 1;		
				
		int[] comb = s.getPointFeatures();
		double[] currentSum; // = new double[comb.length];
		double[] values = new double[numberOfFeatures];
		double[][] distancesForT = new double[comb.length][diffLength+1];
						
		double[] x = new double[comb.length];
		Arrays.fill(x, MAX_VALUE);
				
		for (int i = 0; i &lt;= diffLength; i++) {

//			Arrays.fill(currentSum, 0);
			currentSum = new double[comb.length];
						
			for (int j = 0; j &lt; size; j++) {

				// Here we get from mdist:
				values = getDistances(menor.get(j), maior.get(i + j), s.getPointFeatures());
//				values = mdist.getBaseDistances(menor.get(j), maior.get(i + j), comb);

				for (int k = 0; k &lt; comb.length; k++) {					
					if (currentSum[k] != MAX_VALUE &amp;&amp; values[k] != MAX_VALUE)
//					if (currentSum[k] &lt; MAX_VALUE)
						currentSum[k] += values[k]; // * values[comb[k]];
//						distancesForT[k][i] = values[k];
					else {
						currentSum[k] = MAX_VALUE;
//						distancesForT[k][i] = MAX_VALUE;
					}
				}
								
//				if (firstVectorGreaterThanTheSecond(currentSum, x) ){
////					for (int k = 0; k &lt; comb.length; k++) {
////						currentSum[k] = MAX_VALUE;
////					}
//					Arrays.fill(currentSum, MAX_VALUE);
//					break;					
//				} 											
				
			}
			
//			if (firstVectorGreaterThanTheSecond(x, currentSum) ){
////				for (int k = 0; k &lt; comb.length; k++) {
////					x[k] = currentSum[k];					
////				}	
//				x = currentSum;
//			}
			
			for (int k = 0; k &lt; comb.length; k++) {
				distancesForT[k][i] = currentSum[k];
			}
		}
		
		double[][] ranksForT = new double[distancesForT.length][];
		
		if (limit > 0)
			for (int k = 0; k &lt; comb.length; k++) {
//				ranksForT[k] = rankingAlgorithm.rank(distancesForT[k]);
				ranksForT[k] = rankingAlgorithm.rank(Arrays.stream(distancesForT[k],0,limit).toArray());
			} // for (int k = 0; k &lt; numberOfFeatures; k++)
		
		
//		int bestPosition = bestAlignmentByRanking(ranksForT,comb);
		int bestPosition = (limit > 0) ? bestAlignmentByRanking(ranksForT,comb) : -1;
		
		double[] bestAlignment = new double[comb.length];
		
		for (int j = 0; j &lt; comb.length; j++) {
			
//			double distance = distancesForT[j][bestPosition];
			double distance = (bestPosition >= 0) ? distancesForT[j][bestPosition] : MAX_VALUE;
			
			bestAlignment[j] = (distance != MAX_VALUE) ? 
					Math.sqrt( distance / size ) : MAX_VALUE;
			
		} // for (int j = 0; j &lt; comb.length; j++)
		
		int start = bestPosition;
		int end = bestPosition + size - 1;
		
//		return bestAlignment;
		return new Pair&lt;>(new Subtrajectory(start, end , t), bestAlignment);
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BO8dwJxtEeuT9elTX1485g" name="bestAlignmentByRanking" specification="_AqEPEJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BO8dwZxtEeuT9elTX1485g" name="ranksForT">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BO8dwpxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BO8dw5xtEeuT9elTX1485g" name="comb">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BO8dxJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BO8dxZxtEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>double[] rankMerged = new double[ranksForT[0].length];
		
		if (ranksForT.length > 1)
			// In case it's a combination of more than one dimension
			for (int i = 0; i &lt; comb.length; i++) {
				for (int j = 0; j &lt; ranksForT[0].length; j++) {
	//				rankMerged[j] += ranksForT[comb[i]][j];
					rankMerged[j] += ranksForT[i][j]; // It's indexed differently now
				}
			}
		else
			// W/ one dimention, no need to merge (use directly)
			rankMerged = ranksForT[0];

		int minRankIndex = 0;
		for (int j = 1; j &lt; rankMerged.length; j++) {
			if (rankMerged[j] &lt; rankMerged[minRankIndex])
				minRankIndex = j;
		}
		
		return minRankIndex;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BO9E0JxtEeuT9elTX1485g" name="buildSubtrajectory" specification="_BGoPQJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BO9E0ZxtEeuT9elTX1485g" name="start">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BO9E0pxtEeuT9elTX1485g" name="end">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BO9E05xtEeuT9elTX1485g" name="t" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BO9E1JxtEeuT9elTX1485g" name="numberOfTrajectories">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BO9E1ZxtEeuT9elTX1485g" name="combinations">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BO9E1pxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BO9E15xtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BO9E2JxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>List&lt;Subtrajectory> list = new ArrayList&lt;>();
		
		for (int k = 0; k &lt; combinations.length; k++) {
			list.add(new Subtrajectory(start, end, t, numberOfTrajectories, combinations[k], K++));
		}
				
		return list;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BO9r4JxtEeuT9elTX1485g" name="assesQuality" specification="_BLsVcJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BO9r4ZxtEeuT9elTX1485g" name="candidate" type="_6X8wwJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BO9r4pxtEeuT9elTX1485g" name="random" type="_A_dQQJxtEeuT9elTX1485g"/>
                  <language>java</language>
                  <body>qualityMeasure.assesQuality(candidate, random);
//		assesQuality(candidate);
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BO-S8JxtEeuT9elTX1485g" name="assesQuality" specification="_BGr5oJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BO-S8ZxtEeuT9elTX1485g" name="candidate" type="_6X8wwJxsEeuT9elTX1485g"/>
                  <language>java</language>
                  <body>qualityMeasure.assesQuality(candidate, new Random());
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BO-6AJxtEeuT9elTX1485g" name="transformTrajectoryOutput" specification="_BGsgsJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BO-6AZxtEeuT9elTX1485g" name="candidates" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BO-6ApxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BO-6A5xtEeuT9elTX1485g" name="file">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BO-6BJxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BO-6BZxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>for (Subtrajectory movelet : candidates) {
			// It initializes the set of distances of all movelets to null
			movelet.setDistances(null);
			// In this step the set of distances is filled by this method
			computeDistances(movelet, trajectories); // computeDistances(movelet, trajectories);
		}

		/** STEP 2.5: SELECTING BEST CANDIDATES */			
		candidates = filterMovelets(candidates); //TODO is necessary?
		
		/** STEP 3.0: Output Movelets (partial) */
		super.output(file, trajectories, candidates, true);
		
		return candidates;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BO_hEJxtEeuT9elTX1485g" name="computeDistances" specification="_BGwyIJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BO_hEZxtEeuT9elTX1485g" name="candidate" type="_6X8wwJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BO_hEpxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <language>java</language>
                  <body>/* This pairs will store the subtrajectory of the best alignment 
		 * of the candidate into each trajectory and the distance 
		 * */
		Pair&lt;Subtrajectory, double[]> distance;
		
		double[][] trajectoryDistancesToCandidate = new double[candidate.getPointFeatures().length]
															  [trajectories.size()];
		
		List&lt;Subtrajectory> bestAlignments = new ArrayList&lt;Subtrajectory>();
				
		/* It calculates the distance of trajectories to the candidate
		 */
		for (int i = 0; i &lt; trajectories.size(); i++) {
			
			distance = bestAlignmentByPointFeatures(candidate, trajectories.get(i));
			
			for (int j = 0; j &lt; candidate.getPointFeatures().length; j++) {
				trajectoryDistancesToCandidate[j][i] = distance.getSecond()[j];							
			}
						
			bestAlignments.add(distance.getFirst());
//			trajectoryDistancesToCandidate[i] = distance.getSecond();			
		}
		
		candidate.setDistances(trajectoryDistancesToCandidate);
		candidate.setBestAlignments(bestAlignments);
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BPAIIJxtEeuT9elTX1485g" name="getDistances" specification="_BLuxsJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BPAIIZxtEeuT9elTX1485g" name="a" type="_BB2c8JxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPAIIpxtEeuT9elTX1485g" name="b" type="_BB2c8JxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPAII5xtEeuT9elTX1485g" name="comb">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BPAIJJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BPAIJZxtEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BPAIJpxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>//		double[] distances = new double[this.descriptor.getAttributes().size()];
		double[] distances = new double[comb.length];
		
		int i = 0;
		for (int k : comb) {
			AttributeDescriptor attr = this.descriptor.getAttributes().get(k);
			
			distances[i++] = attr.getDistanceComparator().calculateDistance(
					a.getAspects().get(k), 
					b.getAspects().get(k), 
					attr); // This also enhance distances
		}
		
		return distances;
		
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BPAvMJxtEeuT9elTX1485g" name="firstVectorGreaterThanTheSecond" specification="_AqMK4JxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BPAvMZxtEeuT9elTX1485g" name="first">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BPAvMpxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BPAvM5xtEeuT9elTX1485g" name="second">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BPAvNJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BPAvNZxtEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>for (int i = 0; i &lt; first.length; i++) {
			if (first[i] &lt;= second[i])
				return false;
		}
		
		return true;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BPBWQJxtEeuT9elTX1485g" name="filterMovelets" specification="_BGynUZxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BPBWQZxtEeuT9elTX1485g" name="candidates" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPBWQpxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BPB9UJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>List&lt;Subtrajectory> orderedCandidates = rankCandidates(candidates);

		return bestShapelets(orderedCandidates, 0);
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BPB9UZxtEeuT9elTX1485g" name="rankCandidates" specification="_BG1DkJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BPB9UpxtEeuT9elTX1485g" name="candidates" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPB9U5xtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BPB9VJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>List&lt;Subtrajectory> orderedCandidates = new ArrayList&lt;>(candidates);
		
		orderedCandidates.removeIf(e -> e == null);
		
		orderedCandidates.sort(new Comparator&lt;Subtrajectory>() {
			@Override
			public int compare(Subtrajectory o1, Subtrajectory o2) {
				
				return o1.getQuality().compareTo(o2.getQuality());				
				
			}
		});

		return orderedCandidates;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BPCkYJxtEeuT9elTX1485g" name="bestShapelets" specification="_BG4t8JxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BPCkYZxtEeuT9elTX1485g" name="rankedCandidates" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPCkYpxtEeuT9elTX1485g" name="selfSimilarityProp">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BPCkY5xtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BPCkZJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>// Realiza o loop até que acabem os atributos ou até que atinga o número
		// máximo de nBestShapelets
		// Isso é importante porque vários candidatos bem rankeados podem ser
		// selfsimilares com outros que tiveram melhor score;
		for (int i = 0; (i &lt; rankedCandidates.size()); i++) {

			// Se a shapelet candidata tem score 0 então já termina o processo
			// de busca
			if (rankedCandidates.get(i).getQuality().hasZeroQuality())
				return rankedCandidates.subList(0, i);

			Subtrajectory candidate = rankedCandidates.get(i);

			// Removing self similar
			if (searchIfSelfSimilarity(candidate, rankedCandidates.subList(0, i), selfSimilarityProp)) {
				rankedCandidates.remove(i);
				i--;
			}

		}

		return rankedCandidates;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BPCkZZxtEeuT9elTX1485g" name="searchIfSelfSimilarity" specification="_BG7KMZxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BPCkZpxtEeuT9elTX1485g" name="candidate" type="_6X8wwJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPCkZ5xtEeuT9elTX1485g" name="list" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPCkaJxtEeuT9elTX1485g" name="selfSimilarityProp">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BPCkaZxtEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>for (Subtrajectory s : list) {
			if (areSelfSimilar(candidate, s, selfSimilarityProp))
				return true;
		}

		return false;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BPDLcJxtEeuT9elTX1485g" name="areSelfSimilar" specification="_BG9mcJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BPDLcZxtEeuT9elTX1485g" name="candidate" type="_6X8wwJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPDLcpxtEeuT9elTX1485g" name="subtrajectory" type="_6X8wwJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPDLc5xtEeuT9elTX1485g" name="selfSimilarityProp">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BPDLdJxtEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>//return false;
		
		// If their tids are different return false
		
		if (candidate.getTrajectory().getTid() != subtrajectory.getTrajectory().getTid())
			return false;

		else if (candidate.getStart() &lt; subtrajectory.getStart()) {

			if (candidate.getEnd() &lt; subtrajectory.getStart())
				return false;

			if (selfSimilarityProp == 0)
				return true;

			double intersection = (candidate.getEnd() - subtrajectory.getStart())
					/ (double) Math.min(candidate.getSize(), subtrajectory.getSize());

			return intersection >= selfSimilarityProp;

		} else {

			if (subtrajectory.getEnd() &lt; candidate.getStart())
				return false;

			if (selfSimilarityProp == 0)
				return true;

			double intersection = (subtrajectory.getEnd() - candidate.getStart())
					/ (double) Math.min(candidate.getSize(), subtrajectory.getSize());

			return intersection >= selfSimilarityProp;

		}

	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BPDygJxtEeuT9elTX1485g" name="areFeaturesSimilar" specification="_BG_boJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BPDygZxtEeuT9elTX1485g" name="candidate" type="_6X8wwJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPDygpxtEeuT9elTX1485g" name="pointFeatures">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BPDyg5xtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BPDyhJxtEeuT9elTX1485g" name="featuresSimilarityProp">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BPDyhZxtEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>if (featuresSimilarityProp == 0)
			return true;
		
		double intersection = 0.0;
		
		for (int k : candidate.getPointFeatures())
			for (int j : pointFeatures)
				if (k == j)
					intersection += 1.0;

		intersection = intersection
				/ (double) Math.min(candidate.getPointFeatures().length, pointFeatures.length);
		
		return intersection >= featuresSimilarityProp;

	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BPEZkJxtEeuT9elTX1485g" name="lastPrunningFilter" specification="_BHApwZxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BPEZkZxtEeuT9elTX1485g" name="movelets" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPEZkpxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BPEZk5xtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>List&lt;Subtrajectory> noveltyShapelets = new ArrayList&lt;>();
		Set&lt;Integer> allCovered = new HashSet&lt;Integer>();
		
		for (int i = 0; i &lt; movelets.size(); i++) {
			double[][] distances = movelets.get(i).getDistances();
			double[] splitpoint = movelets.get(i).getSplitpoints();
			Set&lt;Integer> currentCovered = findIndexesLowerSplitPoint(distances, splitpoint);
			
			if ( ! SetUtils.difference(currentCovered, allCovered).isEmpty()){
				noveltyShapelets.add(movelets.get(i));
				allCovered.addAll(currentCovered);
			}
		}
		
		return noveltyShapelets;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BPFAoJxtEeuT9elTX1485g" name="findIndexesLowerSplitPoint" specification="_AqTfoJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BPFAoZxtEeuT9elTX1485g" name="distances">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BPFAopxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BPFAo5xtEeuT9elTX1485g" name="splitpoints">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BPFApJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BPFApZxtEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BPFAppxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>Set&lt;Integer> indexes = new HashSet&lt;>();
		
		RealMatrix rm = new Array2DRowRealMatrix(distances);
		
		for (int i = 0; i &lt; distances[0].length; i++) {
			if (isCovered(rm.getColumn(i), splitpoints) )			
				indexes.add(i);
			}
		
		return indexes;		
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BPGOwJxtEeuT9elTX1485g" name="isCovered" specification="_AqYYIJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BPGOwZxtEeuT9elTX1485g" name="point">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BPG10JxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BPG10ZxtEeuT9elTX1485g" name="limits">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BPG10pxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BPG105xtEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>int dimensions = limits.length;
		
		for (int i = 0; i &lt; dimensions; i++) {
			if (limits[i] > 0){
				if (point[i] >= limits[i])
					return false;
			} else
				if (point[i] > limits[i])
					return false;
		}
		
		return true;
	</body>
                </ownedBehavior>
                <ownedOperation xmi:id="_Ap0XcJxtEeuT9elTX1485g" name="discover" method="_BO6BgJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_Ap0-gJxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Ap0-gZxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_Ap8TQJxtEeuT9elTX1485g" name="makeCombinations" method="_BO7PppxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_Ap86UJxtEeuT9elTX1485g" name="exploreDimensions">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_Ap9hYJxtEeuT9elTX1485g" name="numberOfFeatures">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_Ap_9oJxtEeuT9elTX1485g" name="maxNumberOfFeatures">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_Ap_9oZxtEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Ap_9opxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_AqEPEJxtEeuT9elTX1485g" name="bestAlignmentByRanking" method="_BO8dwJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_AqE2IJxtEeuT9elTX1485g" name="ranksForT">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_AqFdMJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_AqE2IZxtEeuT9elTX1485g" name="comb">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_AqGEQJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_AqE2IpxtEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_AqMK4JxtEeuT9elTX1485g" name="firstVectorGreaterThanTheSecond" method="_BPAvMJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_AqMK4ZxtEeuT9elTX1485g" name="first">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_AqPOMJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_AqMK4pxtEeuT9elTX1485g" name="second">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_AqP1QJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_AqOAEJxtEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_AqTfoJxtEeuT9elTX1485g" name="findIndexesLowerSplitPoint" method="_BPFAoJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_AqTfoZxtEeuT9elTX1485g" name="distances">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_AqV74JxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_AqUGsJxtEeuT9elTX1485g" name="splitpoints">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_AqXxEJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_AqVU0JxtEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_AqVU0ZxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_AqYYIJxtEeuT9elTX1485g" name="isCovered" method="_BPGOwJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_AqYYIZxtEeuT9elTX1485g" name="point">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_AqY_MJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_AqYYIpxtEeuT9elTX1485g" name="limits">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_AqY_MZxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_AqYYI5xtEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BGd3MJxtEeuT9elTX1485g" name="outputMovelets" method="_BO6Bg5xtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BGeeQJxtEeuT9elTX1485g" name="movelets" type="_6Xk9UJxsEeuT9elTX1485g"/>
                </ownedOperation>
                <ownedOperation xmi:id="_BGgTcJxtEeuT9elTX1485g" name="findCandidates" method="_BO7PoJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BGgTcZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BGgTcpxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BGg6gJxtEeuT9elTX1485g" name="size">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BGg6gZxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BGg6gpxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BGj90JxtEeuT9elTX1485g" name="bestAlignmentByPointFeatures" method="_BO72tZxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BGkk4JxtEeuT9elTX1485g" name="s" type="_6X8wwJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BGkk4ZxtEeuT9elTX1485g" name="t" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BLqgQJxtEeuT9elTX1485g" type="_BBwWUJxtEeuT9elTX1485g" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_BGoPQJxtEeuT9elTX1485g" name="buildSubtrajectory" method="_BO9E0JxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BGoPQZxtEeuT9elTX1485g" name="start">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BGoPQpxtEeuT9elTX1485g" name="end">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BGoPQ5xtEeuT9elTX1485g" name="t" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BGoPRJxtEeuT9elTX1485g" name="numberOfTrajectories">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BGoPRZxtEeuT9elTX1485g" name="combinations">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BGqEcZxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BGo2UJxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BGo2UZxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BGr5oJxtEeuT9elTX1485g" name="assesQuality" method="_BO-S8JxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BGr5oZxtEeuT9elTX1485g" name="candidate" type="_6X8wwJxsEeuT9elTX1485g"/>
                </ownedOperation>
                <ownedOperation xmi:id="_BGsgsJxtEeuT9elTX1485g" name="transformTrajectoryOutput" method="_BO-6AJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BGtHwJxtEeuT9elTX1485g" name="candidates" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BGtHwZxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BGtHwpxtEeuT9elTX1485g" name="file">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BGtHw5xtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BGtHxJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BGwyIJxtEeuT9elTX1485g" name="computeDistances" method="_BO_hEJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BGwyIZxtEeuT9elTX1485g" name="candidate" type="_6X8wwJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BGwyIpxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                </ownedOperation>
                <ownedOperation xmi:id="_BGynUZxtEeuT9elTX1485g" name="filterMovelets" method="_BPBWQJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BGzOYJxtEeuT9elTX1485g" name="candidates" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BGzOYZxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BGzOYpxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BG1DkJxtEeuT9elTX1485g" name="rankCandidates" method="_BPB9UZxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BG1qoJxtEeuT9elTX1485g" name="candidates" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BG2RsJxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BG2RsZxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BG4t8JxtEeuT9elTX1485g" name="bestShapelets" method="_BPCkYJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BG5VAJxtEeuT9elTX1485g" name="rankedCandidates" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BG5VAZxtEeuT9elTX1485g" name="selfSimilarityProp">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BG58EJxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BG58EZxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BG7KMZxtEeuT9elTX1485g" name="searchIfSelfSimilarity" method="_BPCkZZxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BG7KMpxtEeuT9elTX1485g" name="candidate" type="_6X8wwJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BG7xQJxtEeuT9elTX1485g" name="list" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BG7xQZxtEeuT9elTX1485g" name="selfSimilarityProp">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BG7xQpxtEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BG9mcJxtEeuT9elTX1485g" name="areSelfSimilar" method="_BPDLcJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BG9mcZxtEeuT9elTX1485g" name="candidate" type="_6X8wwJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BG9mcpxtEeuT9elTX1485g" name="subtrajectory" type="_6X8wwJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BG9mc5xtEeuT9elTX1485g" name="selfSimilarityProp">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BG-NgJxtEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BG_boJxtEeuT9elTX1485g" name="areFeaturesSimilar" method="_BPDygJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BG_boZxtEeuT9elTX1485g" name="candidate" type="_6X8wwJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BG_bopxtEeuT9elTX1485g" name="pointFeatures">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BHApwJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BG_bo5xtEeuT9elTX1485g" name="featuresSimilarityProp">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BHACsJxtEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BHApwZxtEeuT9elTX1485g" name="lastPrunningFilter" method="_BPEZkJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BHBQ0JxtEeuT9elTX1485g" name="movelets" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BHB34JxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BHB34ZxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BLZagJxtEeuT9elTX1485g" name="MoveletsDiscovery" method="_BO4zYJxtEeuT9elTX1485g">
                  <eAnnotations xmi:id="_BLaBlZxtEeuT9elTX1485g" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_BLaooJxtEeuT9elTX1485g" key="create"/>
                  </eAnnotations>
                  <ownedParameter xmi:id="_BLZagZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BLZagpxtEeuT9elTX1485g" name="trajsFromClass" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BLaBkJxtEeuT9elTX1485g" name="data" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BLaBkZxtEeuT9elTX1485g" name="train" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BLaBkpxtEeuT9elTX1485g" name="test" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BLaBk5xtEeuT9elTX1485g" name="qualityMeasure" type="_A_j98JxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BLaBlJxtEeuT9elTX1485g" name="descriptor" type="_6X34QJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BLaooZxtEeuT9elTX1485g" type="_ApiqoJxtEeuT9elTX1485g" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_BLikcJxtEeuT9elTX1485g" name="init" visibility="private" method="_BO5acJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BLikcZxtEeuT9elTX1485g" name="qualityMeasure" type="_A_j98JxtEeuT9elTX1485g"/>
                </ownedOperation>
                <ownedOperation xmi:id="_BLjykJxtEeuT9elTX1485g" name="moveletsDiscovery" method="_BO6okJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BLjykZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BLjykpxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BLjyk5xtEeuT9elTX1485g" name="minSize">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BLkZoJxtEeuT9elTX1485g" name="maxSize">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BLkZoZxtEeuT9elTX1485g" name="random" type="_A_dQQJxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BLkZopxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BLkZo5xtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BLsVcJxtEeuT9elTX1485g" name="assesQuality" method="_BO9r4JxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BLs8gJxtEeuT9elTX1485g" name="candidate" type="_6X8wwJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BLtjkJxtEeuT9elTX1485g" name="random" type="_A_dQQJxtEeuT9elTX1485g"/>
                </ownedOperation>
                <ownedOperation xmi:id="_BLuxsJxtEeuT9elTX1485g" name="getDistances" method="_BPAIIJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BLuxsZxtEeuT9elTX1485g" name="a" type="_BB2c8JxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BLuxspxtEeuT9elTX1485g" name="b" type="_BB2c8JxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BLuxs5xtEeuT9elTX1485g" name="comb">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BLx1AJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BLvYwJxtEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BLvYwZxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_ArOssJxtEeuT9elTX1485g" name="SuperMoveletsDiscovery">
                <ownedComment xmi:id="_BPsEoJxtEeuT9elTX1485g">
                  <body>The Class SuperMoveletsDiscovery.
 *
@author Tarlis Portela &lt;tarlis@tarlis.com.br>
@param &lt;MO> the generic type</body>
                </ownedComment>
                <generalization xmi:id="_BH3lYZxtEeuT9elTX1485g" general="_AmSiUJxtEeuT9elTX1485g"/>
                <ownedAttribute xmi:id="_BNvj4JxtEeuT9elTX1485g" name="TAU" visibility="protected">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_BNwK8JxtEeuT9elTX1485g" value="0.9"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_BNwyAJxtEeuT9elTX1485g" name="BU" visibility="protected">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_BNwyAZxtEeuT9elTX1485g" value="0.1"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_BNxZEZxtEeuT9elTX1485g" name="proportionMeasure" visibility="protected" type="_BASWsJxtEeuT9elTX1485g" association="_BQf88JxtEeuT9elTX1485g"/>
                <ownedAttribute xmi:id="_BNz1UZxtEeuT9elTX1485g" name="bucket" visibility="protected" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" association="_BQhLEJxtEeuT9elTX1485g">
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BN2RkJxtEeuT9elTX1485g" value="*"/>
                  <defaultValue xmi:type="uml:LiteralString" xmi:id="_BN24oJxtEeuT9elTX1485g" value="new ArrayList&lt;Subtrajectory>()"/>
                </ownedAttribute>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BPID8JxtEeuT9elTX1485g" name="SuperMoveletsDiscovery" specification="_BL2GcJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BPID8ZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPID8pxtEeuT9elTX1485g" name="trajsFromClass" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPID85xtEeuT9elTX1485g" name="data" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPID9JxtEeuT9elTX1485g" name="train" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPID9ZxtEeuT9elTX1485g" name="test" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPID9pxtEeuT9elTX1485g" name="qualityMeasure" type="_A_j98JxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPID95xtEeuT9elTX1485g" name="descriptor" type="_6X34QJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPID-JxtEeuT9elTX1485g" type="_ArOssJxtEeuT9elTX1485g" direction="return"/>
                  <language>java</language>
                  <body>super(trajectory, trajsFromClass, data, train, test, qualityMeasure, descriptor);
		
		TAU 	= getDescriptor().hasParam(&quot;tau&quot;)? getDescriptor().getParamAsDouble(&quot;tau&quot;) : 0.0;
		BU 		= getDescriptor().hasParam(&quot;bucket_slice&quot;)? getDescriptor().getParamAsDouble(&quot;bucket_slice&quot;) : 1.0;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BPJSEJxtEeuT9elTX1485g" name="discover" specification="_ArfLYJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BPJSEZxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BPJSEpxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>int maxSize = getDescriptor().getParamAsInt(&quot;max_size&quot;);
		int minSize = getDescriptor().getParamAsInt(&quot;min_size&quot;);

		List&lt;Subtrajectory> movelets = new ArrayList&lt;Subtrajectory>();

		progressBar.trace(&quot;SUPERMovelets Discovery for Class: &quot; + trajsFromClass.get(0).getMovingObject() 
				+ &quot;. Trajectory: &quot; + trajectory.getTid());
		
		this.proportionMeasure = new ProportionQualityMeasure&lt;MO>(this.trajsFromClass, TAU);
		
//		for (MAT&lt;MO> trajectory : trajsFromClass) {
			// This guarantees the reproducibility
			Random random = new Random(trajectory.getTid());
			/** STEP 2.1: Starts at discovering movelets */
			List&lt;Subtrajectory> candidates = moveletsDiscovery(trajectory, this.trajsFromClass, minSize, maxSize, random);
			
//			progressBar.trace(&quot;Class: &quot; + trajectory.getMovingObject() 
//					+ &quot;. Trajectory: &quot; + trajectory.getTid() 
//					+ &quot;. Used GAMMA: &quot; + GAMMA);
			
			/** STEP 2.4: SELECTING BEST CANDIDATES */			
//			candidates = filterMovelets(candidates);		
			movelets.addAll(filterMovelets(candidates));

//			System.gc();
//		}
		
		/** STEP 2.2: Runs the pruning process */
		if(getDescriptor().getFlag(&quot;last_prunning&quot;))
			movelets = lastPrunningFilter(movelets);

		/** STEP 2.2: ---------------------------- */
		outputMovelets(movelets);
		/** -------------------------------------- */
		
//		progressBar.trace(&quot;Class: &quot; + trajsFromClass.get(0).getMovingObject() 
//				   + &quot;. Total of Movelets: &quot; + movelets.size());

//		/** STEP 2.5, to write all outputs: */
//		super.output(&quot;train&quot;, this.train, movelets, false);
//		
//		if (!this.test.isEmpty())
//			super.output(&quot;test&quot;, this.test, movelets, false);
		
		return movelets;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BPJ5IJxtEeuT9elTX1485g" name="moveletsDiscovery" specification="_BL-pUJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BPJ5IZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPJ5IpxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPJ5I5xtEeuT9elTX1485g" name="minSize">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BPJ5JJxtEeuT9elTX1485g" name="maxSize">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BPJ5JZxtEeuT9elTX1485g" name="random" type="_A_dQQJxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPJ5JpxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BPJ5J5xtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>List&lt;Subtrajectory> candidatesByProp = new ArrayList&lt;Subtrajectory>();

		int n = trajectory.getPoints().size();
		
		// TO USE THE LOG, PUT &quot;-Ms -3&quot;
		switch (maxSize) {
			case -1: maxSize = n; break;
			case -2: maxSize = (int) Math.round( Math.log10(n) / Math.log10(2) ); break;	
			case -3: maxSize = (int) Math.ceil(Math.log(n))+1; break;	
			default: break;
		}

		// It starts with the base case	
		int size = 1;
		Integer total_size = 0;
		
		base = computeBaseDistances(trajectory, trajectories);
		
		if( minSize &lt;= 1 ) {
			candidatesByProp.addAll(findCandidates(trajectory, trajectories, size, base));
//			candidates.forEach(x -> assesQuality(x, random));
		}				
		
		double[][][][] lastSize = clone4DArray(base);		

		total_size = total_size + candidatesByProp.size();
		
		// Tratar o resto dos tamanhos 
		for (size = 2; size &lt;= maxSize; size++) {
	
			// Precompute de distance matrix
			double[][][][] newSize = newSize(trajectory, trajectories, base, lastSize, size);

			// Create candidates and compute min distances		
			List&lt;Subtrajectory> candidatesOfSize = findCandidates(trajectory, trajectories, size, newSize);
		
			total_size = total_size + candidatesOfSize.size();
			
			if (size >= minSize){
				
				//for (Subtrajectory candidate : candidatesOfSize) assesQuality(candidate);				
//				candidatesOfSize.forEach(x -> assesQuality(x, random));
				candidatesByProp.addAll(candidatesOfSize);
			}
		
			lastSize = newSize;
						
		} // for (int size = 2; size &lt;= max; size++)
		
		List&lt;Subtrajectory> bestCandidates = selectBestCandidates(trajectory, maxSize, random, candidatesByProp);	
	
		base =  null;
		lastSize = null;
		
		return bestCandidates;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BPLuUJxtEeuT9elTX1485g" name="selectBestCandidates" specification="_BMC6wJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BPLuUZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPLuUpxtEeuT9elTX1485g" name="maxSize">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BPLuU5xtEeuT9elTX1485g" name="random" type="_A_dQQJxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPLuVJxtEeuT9elTX1485g" name="candidatesByProp" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPLuVZxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BPLuVpxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>List&lt;Subtrajectory> bestCandidates;
		
		addStats(&quot;Class&quot;, trajectory.getMovingObject()); 
		addStats(&quot;Trajectory&quot;, trajectory.getTid());
		addStats(&quot;Trajectory Size&quot;, trajectory.getPoints().size()); 
		addStats(&quot;Number of Candidates&quot;, candidatesByProp.size());

		calculateProportion(candidatesByProp, random);
		bestCandidates = filterByProportion(candidatesByProp, random);
//		bestCandidates = filterTopCandidates(candidatesByProp);
				
		// If using feature limit, remove candidates out of the dimension limit
		if (getDescriptor().getFlag(&quot;feature_limit&quot;))
			bestCandidates = selectMaxFeatures(bestCandidates);
		addStats(&quot;Scored Candidates&quot;, bestCandidates.size());
		
		bestCandidates = filterByQuality(bestCandidates, random, trajectory);

//		/* STEP 2.1.5: Recover Approach (IF Nothing found)
//		 * * * * * * * * * * * * * * * * * * * * * * * * */
//		if (bestCandidates.isEmpty()) { 
//			bestCandidates = recoverCandidates(trajectory, random, candidatesByProp);
//		}

		addStats(&quot;Total of Movelets&quot;, bestCandidates.size());
		addStats(&quot;Max Size&quot;, maxSize);
		addStats(&quot;Used Features&quot;, this.maxNumberOfFeatures);
//		progressBar.plus(&quot;Class: &quot; + trajectory.getMovingObject() 
//						+ &quot;. Trajectory: &quot; + trajectory.getTid() 
//						+ &quot;. Trajectory Size: &quot; + trajectory.getPoints().size() 
//						+ &quot;. Number of Candidates: &quot; + candidatesByProp.size() 
//						+ &quot;. Total of Movelets: &quot; + bestCandidates.size() 
//						+ &quot;. Max Size: &quot; + maxSize
//						+ &quot;. Used Features: &quot; + this.maxNumberOfFeatures);

		progressBar.plus(getStats());
		
		return bestCandidates;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BPMVYJxtEeuT9elTX1485g" name="bucketSize" specification="_ArqKgJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BPMVYZxtEeuT9elTX1485g" name="candidatesByProp">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BPMVYpxtEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>if (BU &lt; 0) return candidatesByProp;
		
		int n = (int) Math.ceil((double) (candidatesByProp+bucket.size()) * BU); // By 10%
		return (n > candidatesByProp)? candidatesByProp : n;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BPM8cJxtEeuT9elTX1485g" name="filterByProportion" specification="_BMHzQJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BPM8cZxtEeuT9elTX1485g" name="candidatesByProp" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPM8cpxtEeuT9elTX1485g" name="random" type="_A_dQQJxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPM8c5xtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BPM8dJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>//		calculateProportion(candidatesByProp, random);
//		candidatesByProp = filterEqualCandidates(candidatesByProp);
		
		// Relative TAU based on the higher proportion:
		double rel_tau = getDescriptor().getFlag(&quot;relative_tau&quot;)? ((candidatesByProp.size() > 0? 
				 candidatesByProp.get(0).getQuality().getData().get(&quot;quality&quot;) : 0.0) * TAU) : TAU;	
		
		int n = bucketSize(candidatesByProp.size());
		addStats(&quot;TAU&quot;, rel_tau);
		addStats(&quot;Bucket Size&quot;, n);

		/* STEP 2.1.2: SELECT ONLY CANDIDATES WITH PROPORTION > 50%
		 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
		List&lt;Subtrajectory> orderedCandidates = new ArrayList&lt;>();
		for(Subtrajectory candidate : candidatesByProp)
			if(orderedCandidates.size() &lt;= n &amp;&amp;
			   candidateQuality(candidate) >= rel_tau) //TAU)
				orderedCandidates.add(candidate);
			else 
				bucket.add(candidate);
		
		return orderedCandidates;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BPM8dZxtEeuT9elTX1485g" name="filterTopCandidates" specification="_BHULwJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BPM8dpxtEeuT9elTX1485g" name="candidatesByProp" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPM8d5xtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BPM8eJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>int n = (int) Math.ceil((double) (candidatesByProp.size()) * BU); // By 10%
		return candidatesByProp.subList(0, n);
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BPNjgJxtEeuT9elTX1485g" name="overlappingCandidatesByPoints" specification="_BHX2IJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BPNjgZxtEeuT9elTX1485g" name="bestCandidates" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPNjgpxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BPNjg5xtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>List&lt;Subtrajectory> recovered = new ArrayList&lt;Subtrajectory>();
		for (Subtrajectory candidate1 : bestCandidates) {
			for (Subtrajectory candidate2 : bucket) {
				if (areSelfSimilar(candidate1, candidate2, 0)) {
					recovered.add(candidate2);
				}
			}		
		}
//		bestCandidates.addAll(recovered);
		bucket.removeAll(recovered);
		
		return recovered;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BPOKkJxtEeuT9elTX1485g" name="overlappingCandidatesByFeatures" specification="_BHa5cZxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BPOKkZxtEeuT9elTX1485g" name="bestCandidates" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPOKkpxtEeuT9elTX1485g" name="pointFeatures">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BPOKk5xtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BPOKlJxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BPOKlZxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>List&lt;Subtrajectory> recovered = new ArrayList&lt;Subtrajectory>();
		for (Subtrajectory candidate : bucket) {
			if (areFeaturesSimilar(candidate, pointFeatures, 0)) {
				recovered.add(candidate);
			}
		}		
//		bestCandidates.addAll(recovered);
		bucket.removeAll(recovered);
		
		return recovered;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BPOxoJxtEeuT9elTX1485g" name="selectMaxFeatures" specification="_BHfK4JxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BPOxoZxtEeuT9elTX1485g" name="candidatesByProp" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPOxopxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BPOxo5xtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>if (getDescriptor().getParamAsInt(&quot;max_number_of_features&quot;) == -3) {
			return selectMaxFeatures_3(candidatesByProp);
		} else if (getDescriptor().getParamAsInt(&quot;max_number_of_features&quot;) == -4) {
			return selectMaxFeatures_4(candidatesByProp);
		} else
			return candidatesByProp;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BPPYsJxtEeuT9elTX1485g" name="selectMaxFeatures_3" specification="_BHiOMJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BPPYsZxtEeuT9elTX1485g" name="candidatesByProp" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPPYspxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BPPYs5xtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>int[] attribute_usage = new int [this.numberOfFeatures]; // array of ints

		for(Subtrajectory candidate : candidatesByProp)
			attribute_usage[candidate.getPointFeatures().length-1]++;
		
		// Selection of threshold:
		// Limit by mode of dimension usage from best candidates.
		int LAMBDA = -1;
		for (int i = 0; i &lt; attribute_usage.length; i++) {
			if (LAMBDA &lt;= attribute_usage[i])
				LAMBDA = i+1;
		}
		
		// Include every other candidate with overlapping points
//		candidatesByProp.addAll(overlappingCandidatesByPoints(candidatesByProp));
		
		List&lt;Subtrajectory> filteredCandidates = new ArrayList&lt;>();
		for(Subtrajectory candidate : candidatesByProp)
			if(candidate.getPointFeatures().length &lt;= LAMBDA)
				filteredCandidates.add(candidate);
		
		this.maxNumberOfFeatures = Math.min(LAMBDA, this.maxNumberOfFeatures);
		
		return filteredCandidates;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BPTDEJxtEeuT9elTX1485g" name="selectMaxFeatures_4" specification="_BHlRgJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BPTDEZxtEeuT9elTX1485g" name="candidatesByProp" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPTDEpxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BPTDE5xtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>int[] attribute_usage = new int [numberOfFeatures]; // array of ints

		for(Subtrajectory candidate : candidatesByProp)
			for (int i : candidate.getPointFeatures())
				attribute_usage[i]++;

		// Selection of dimensions:
		// Limit by most frequent dimensions from best candidates
		List&lt;Integer> features = new ArrayList&lt;Integer>();
		for (int i = 0; i &lt; attribute_usage.length; i++) {
			if (attribute_usage[i] >= (candidatesByProp.size() * TAU))
				features.add(i);
		}
		
		int[] pointFeatures = features.stream().mapToInt(Integer::valueOf).toArray();
		List&lt;Subtrajectory> filteredCandidates = new ArrayList&lt;>();
		for (Subtrajectory candidate : candidatesByProp) {
			if (areFeaturesSimilar(candidate, pointFeatures, 0)) {
				filteredCandidates.add(candidate);
			}
		}		
//		candidatesByProp.removeAll(recovered);
//		bucket.addAll(recovered);
		
		this.maxNumberOfFeatures = Math.min(pointFeatures.length, this.maxNumberOfFeatures);
		
		return filteredCandidates;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BPVfUJxtEeuT9elTX1485g" name="recoverCandidates" specification="_BMLdoJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BPVfUZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPVfUpxtEeuT9elTX1485g" name="random" type="_A_dQQJxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPVfU5xtEeuT9elTX1485g" name="candidatesByProp" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPVfVJxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BPVfVZxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>int n = bucketSize(candidatesByProp.size());;
		
		orderCandidates(bucket);
//		bucket = filterEqualCandidates(bucket);
		List&lt;Subtrajectory> bestCandidates = new ArrayList&lt;Subtrajectory>();
		
//		bestCandidates = filterByQuality(bestCandidates, random, trajectory);
		
		for (int i = n; i &lt; bucket.size(); i += n) {
			bestCandidates = filterByQuality(bucket.subList(i-n, (i > bucket.size()? bucket.size() : i)), random, trajectory);
			
			if (i > bucket.size() || !bestCandidates.isEmpty()) break;
			else n *= 2; // expand the window size
		}
		return bestCandidates;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BPWGYJxtEeuT9elTX1485g" name="candidateQuality" specification="_BHo74JxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BPWGYZxtEeuT9elTX1485g" name="candidate" type="_6X8wwJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPWGYpxtEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>return candidate.getQuality().getData().get(&quot;quality&quot;);
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BPWtcJxtEeuT9elTX1485g" name="filterEqualCandidates" specification="_BHqxEJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BPWtcZxtEeuT9elTX1485g" name="orderedCandidates" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPWtcpxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BPWtc5xtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>/* STEP 2.1.4: IDENTIFY EQUAL CANDIDATES
		 * * * * * * * * * * * * * * * * * * * * * * * * */
		List&lt;Subtrajectory> bestCandidates = new ArrayList&lt;>();
//		int[] attribute_usage = new int [numberOfFeatures]; // array of 5 ints
		
		for(Subtrajectory candidate : orderedCandidates) {
			
			if(bestCandidates.isEmpty())
				bestCandidates.add(candidate);
			else {
				boolean equal = false;
				for(Subtrajectory best_candidate : bestCandidates) {
					
					List&lt;HashMap&lt;Integer, Aspect&lt;?>>> used_features_c1 = getDimensions(candidate);
					List&lt;HashMap&lt;Integer, Aspect&lt;?>>> used_features_c2 = getDimensions(best_candidate);
					
					if(used_features_c1.size()==used_features_c2.size())
						if(areEqual(used_features_c1, used_features_c2)) {
							equal = true;
							break;
						}
					
				}
				if(!equal) {
					bestCandidates.add(candidate);
//					attribute_usage[candidate.getPointFeatures().length-1]++;
				}
			}
		}
		return bestCandidates;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BPX7kJxtEeuT9elTX1485g" name="calculateProportion" specification="_BMQWIJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BPX7kZxtEeuT9elTX1485g" name="candidatesByProp" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPX7kpxtEeuT9elTX1485g" name="random" type="_A_dQQJxtEeuT9elTX1485g"/>
                  <language>java</language>
                  <body>candidatesByProp.forEach(x -> proportionMeasure.assesClassQuality(x, maxDistances, random));
		
		orderCandidates(candidatesByProp);
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BPYioJxtEeuT9elTX1485g" name="orderCandidates" specification="_BHt0YJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BPYioZxtEeuT9elTX1485g" name="candidatesByProp" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <language>java</language>
                  <body>/* STEP 2.1.3: SORT THE CANDIDATES BY PROPORTION VALUE
		 * * * * * * * * * * * * * * * * * * * * * * * * * */
		candidatesByProp.sort(new Comparator&lt;Subtrajectory>() {
			@Override
			public int compare(Subtrajectory o1, Subtrajectory o2) {
				
//				return (-1) * o1.getQuality().compareTo(o2.getQuality());
				return o1.getQuality().compareTo(o2.getQuality());				
				
			}
		});
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BPZJsJxtEeuT9elTX1485g" name="filterByQuality" specification="_BMUAgJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BPZJsZxtEeuT9elTX1485g" name="bestCandidates" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPZJspxtEeuT9elTX1485g" name="random" type="_A_dQQJxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPZJs5xtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPZJtJxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BPZJtZxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>/** STEP 2.3, for this trajectory movelets: 
		 * It transforms the training and test sets of trajectories using the movelets */
		for (Subtrajectory candidate : bestCandidates) {
			// It initializes the set of distances of all movelets to null
			candidate.setDistances(null);
			candidate.setQuality(null);
			// In this step the set of distances is filled by this method
			computeDistances(candidate, this.train); // computeDistances(movelet, trajectories);

			/* STEP 2.1.6: QUALIFY BEST HALF CANDIDATES 
			 * * * * * * * * * * * * * * * * * * * * * * * * */
//			assesQuality(candidate);
			assesQuality(candidate, random); //TODO change?
		}

		/** STEP 2.2: SELECTING BEST CANDIDATES */	
		return filterMovelets(bestCandidates);
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BPZwwJxtEeuT9elTX1485g" name="getDimensions" specification="_BHwQoJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BPaX0JxtEeuT9elTX1485g" name="candidate" type="_6X8wwJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPaX0ZxtEeuT9elTX1485g" type="_BAB4AJxtEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BPaX0pxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>List&lt;Integer> features_in_movelet = new ArrayList&lt;>();
		
		int[] list_features = candidate.getPointFeatures();
		
		for(int i=0; i &lt;= getDescriptor().getAttributes().size(); i++) {
			
			if(ArrayUtils.contains(list_features, i))				
				features_in_movelet.add(i);
			
		}
		
		List&lt;HashMap&lt;Integer, Aspect&lt;?>>> used_features = new ArrayList&lt;>();
		
		for(int i=0; i &lt; candidate.getPoints().size(); i++) {
			
			Point point = candidate.getPoints().get(i);
			
			HashMap&lt;Integer, Aspect&lt;?>> features_in_point = new HashMap&lt;>();
			
			for(Integer feature : features_in_movelet) {
				features_in_point.put(feature, point.getAspects().get(feature));
			}
			
			used_features.add(features_in_point);
		}
		
		return used_features;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BPa-4JxtEeuT9elTX1485g" name="areEqual" specification="_BHz7AJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BPa-4ZxtEeuT9elTX1485g" name="first" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPa-4pxtEeuT9elTX1485g" name="second" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPa-45xtEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>if (first.size() != second.size())
	        return false;
		
		if (first.get(0).size() != second.get(0).size())
	        return false;
	 
		for ( Integer key : first.get(0).keySet() ) {
			if(!second.get(0).containsKey(key)) {
		        return false;
		    }
		}
		
		boolean all_match = true;
		
		for(int i=0; i&lt;first.size();i++) {
			
			HashMap&lt;Integer, Aspect&lt;?>> f = first.get(i);
			HashMap&lt;Integer, Aspect&lt;?>> s = second.get(i);
						
			if(!f.entrySet().stream()
				      .allMatch(e -> e.getValue().equals(s.get(e.getKey()))))
				return false;
			
		}
	    return all_match;
	</body>
                </ownedBehavior>
                <ownedOperation xmi:id="_ArfLYJxtEeuT9elTX1485g" name="discover" method="_BPJSEJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_ArhnoJxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_AriOsJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_ArqKgJxtEeuT9elTX1485g" name="bucketSize" visibility="protected" method="_BPMVYJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_ArqKgZxtEeuT9elTX1485g" name="candidatesByProp">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_ArqxkJxtEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BHULwJxtEeuT9elTX1485g" name="filterTopCandidates" method="_BPM8dZxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BHUy0JxtEeuT9elTX1485g" name="candidatesByProp" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BHUy0ZxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BHUy0pxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BHX2IJxtEeuT9elTX1485g" name="overlappingCandidatesByPoints" method="_BPNjgJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BHX2IZxtEeuT9elTX1485g" name="bestCandidates" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BHYdMJxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BHYdMZxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BHa5cZxtEeuT9elTX1485g" name="overlappingCandidatesByFeatures" method="_BPOKkJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BHbggJxtEeuT9elTX1485g" name="bestCandidates" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BHbggZxtEeuT9elTX1485g" name="pointFeatures">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BHej0JxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BHcHkJxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BHcHkZxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BHfK4JxtEeuT9elTX1485g" name="selectMaxFeatures" method="_BPOxoJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BHfK4ZxtEeuT9elTX1485g" name="candidatesByProp" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BHfK4pxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BHfK45xtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BHiOMJxtEeuT9elTX1485g" name="selectMaxFeatures_3" method="_BPPYsJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BHiOMZxtEeuT9elTX1485g" name="candidatesByProp" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BHi1QJxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BHi1QZxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BHlRgJxtEeuT9elTX1485g" name="selectMaxFeatures_4" method="_BPTDEJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BHlRgZxtEeuT9elTX1485g" name="candidatesByProp" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BHlRgpxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BHl4kJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BHo74JxtEeuT9elTX1485g" name="candidateQuality" visibility="protected" method="_BPWGYJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BHo74ZxtEeuT9elTX1485g" name="candidate" type="_6X8wwJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BHqKAJxtEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BHqxEJxtEeuT9elTX1485g" name="filterEqualCandidates" method="_BPWtcJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BHqxEZxtEeuT9elTX1485g" name="orderedCandidates" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BHqxEpxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BHrYIJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BHt0YJxtEeuT9elTX1485g" name="orderCandidates" method="_BPYioJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BHt0YZxtEeuT9elTX1485g" name="candidatesByProp" type="_6Xk9UJxsEeuT9elTX1485g"/>
                </ownedOperation>
                <ownedOperation xmi:id="_BHwQoJxtEeuT9elTX1485g" name="getDimensions" method="_BPZwwJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BHwQoZxtEeuT9elTX1485g" name="candidate" type="_6X8wwJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BHw3sJxtEeuT9elTX1485g" type="_BAB4AJxtEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BHw3sZxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BHz7AJxtEeuT9elTX1485g" name="areEqual" method="_BPa-4JxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BHz7AZxtEeuT9elTX1485g" name="first" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BH0iEJxtEeuT9elTX1485g" name="second" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BH1JIJxtEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BL2GcJxtEeuT9elTX1485g" name="SuperMoveletsDiscovery" method="_BPID8JxtEeuT9elTX1485g">
                  <eAnnotations xmi:id="_BL3UkZxtEeuT9elTX1485g" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_BL3UkpxtEeuT9elTX1485g" key="create"/>
                  </eAnnotations>
                  <ownedParameter xmi:id="_BL2GcZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BL2tgJxtEeuT9elTX1485g" name="trajsFromClass" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BL2tgZxtEeuT9elTX1485g" name="data" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BL2tgpxtEeuT9elTX1485g" name="train" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BL2tg5xtEeuT9elTX1485g" name="test" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BL2thJxtEeuT9elTX1485g" name="qualityMeasure" type="_A_j98JxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BL3UkJxtEeuT9elTX1485g" name="descriptor" type="_6X34QJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BL3Uk5xtEeuT9elTX1485g" type="_ArOssJxtEeuT9elTX1485g" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_BL-pUJxtEeuT9elTX1485g" name="moveletsDiscovery" method="_BPJ5IJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BL-pUZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BL-pUpxtEeuT9elTX1485g" name="trajectories" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BL_QYJxtEeuT9elTX1485g" name="minSize">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BL_QYZxtEeuT9elTX1485g" name="maxSize">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BL_QYpxtEeuT9elTX1485g" name="random" type="_A_dQQJxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BL_3cJxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BL_3cZxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BMC6wJxtEeuT9elTX1485g" name="selectBestCandidates" method="_BPLuUJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BMC6wZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BMC6wpxtEeuT9elTX1485g" name="maxSize">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_BMC6w5xtEeuT9elTX1485g" name="random" type="_A_dQQJxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BMDh0JxtEeuT9elTX1485g" name="candidatesByProp" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BMDh0ZxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BMDh0pxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BMHzQJxtEeuT9elTX1485g" name="filterByProportion" method="_BPM8cJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BMHzQZxtEeuT9elTX1485g" name="candidatesByProp" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BMHzQpxtEeuT9elTX1485g" name="random" type="_A_dQQJxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BMJBYJxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BMJBYZxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BMLdoJxtEeuT9elTX1485g" name="recoverCandidates" method="_BPVfUJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BMLdoZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BMMEsJxtEeuT9elTX1485g" name="random" type="_A_dQQJxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BMMEsZxtEeuT9elTX1485g" name="candidatesByProp" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BMMEspxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BMMEs5xtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BMQWIJxtEeuT9elTX1485g" name="calculateProportion" method="_BPX7kJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BMQ9MJxtEeuT9elTX1485g" name="candidatesByProp" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BMQ9MZxtEeuT9elTX1485g" name="random" type="_A_dQQJxtEeuT9elTX1485g"/>
                </ownedOperation>
                <ownedOperation xmi:id="_BMUAgJxtEeuT9elTX1485g" name="filterByQuality" method="_BPZJsJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BMUAgZxtEeuT9elTX1485g" name="bestCandidates" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BMUnkJxtEeuT9elTX1485g" name="random" type="_A_dQQJxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BMUnkZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BMUnkpxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BMUnk5xtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_AtRUEJxtEeuT9elTX1485g" name="UltraMoveletsDiscovery">
                <ownedComment xmi:id="_BPsrsJxtEeuT9elTX1485g">
                  <body>The Class HiperPivotsMoveletsDiscovery.
 *
@author tarlis
@param &lt;MO> the generic type</body>
                </ownedComment>
                <generalization xmi:id="_BIDLkJxtEeuT9elTX1485g" general="_AlnM4JxtEeuT9elTX1485g"/>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BPc0EJxtEeuT9elTX1485g" name="UltraMoveletsDiscovery" specification="_BMYR8JxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BPc0EZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPc0EpxtEeuT9elTX1485g" name="trajsFromClass" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPc0E5xtEeuT9elTX1485g" name="data" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPc0FJxtEeuT9elTX1485g" name="train" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPc0FZxtEeuT9elTX1485g" name="test" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPc0FpxtEeuT9elTX1485g" name="qualityMeasure" type="_A_j98JxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPc0F5xtEeuT9elTX1485g" name="descriptor" type="_6X34QJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPc0GJxtEeuT9elTX1485g" type="_AtRUEJxtEeuT9elTX1485g" direction="return"/>
                  <language>java</language>
                  <body>super(trajsFromClass, data, train, test, qualityMeasure, descriptor);
		this.trajectory = trajectory;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BPeCMJxtEeuT9elTX1485g" name="discover" specification="_AtdhUJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BPeCMZxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_BPeCMpxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>int maxSize = getDescriptor().getParamAsInt(&quot;max_size&quot;);
		int minSize = getDescriptor().getParamAsInt(&quot;min_size&quot;);

		List&lt;Subtrajectory> movelets = new ArrayList&lt;Subtrajectory>();
		
		int trajsIgnored = 0;

		progressBar.trace(&quot;Ultra Movelets Discovery for Class: &quot; + trajectory.getMovingObject()); 
		
		this.proportionMeasure = new ProportionQualityMeasure&lt;MO>(this.trajsFromClass, TAU);
		
//		while (queue.size() > 0) {
//			MAT&lt;MO> trajectory = queue.get(0);
		if (queue.contains(trajectory)) {
			queue.remove(trajectory);
			
			// This guarantees the reproducibility
			Random random = new Random(trajectory.getTid());
			/** STEP 2.1: Starts at discovering movelets */
			List&lt;Subtrajectory> candidates = moveletsDiscovery(trajectory, this.trajsFromClass, minSize, maxSize, random);
			
//			progressBar.trace(&quot;Class: &quot; + trajsFromClass.get(0).getMovingObject() 
//					+ &quot;. Trajectory: &quot; + trajectory.getTid() 
//					+ &quot;. Used GAMMA: &quot; + GAMMA);

			// Removes trajectories from queue:
			trajsIgnored += updateQueue(getCoveredInClass(candidates));
			
			/** STEP 2.4: SELECTING BEST CANDIDATES */			
//			candidates = filterMovelets(candidates);		
			movelets.addAll(filterMovelets(candidates));
			
//			System.gc();
		}
		
		/** STEP 2.2: Runs the pruning process */
		if(getDescriptor().getFlag(&quot;last_prunning&quot;))
			movelets = lastPrunningFilter(movelets);

		/** STEP 2.2: ---------------------------- */
		outputMovelets(movelets);
		/** -------------------------------------- */	
		
		progressBar.plus(trajsIgnored, 
						   &quot;Class: &quot; + trajsFromClass.get(0).getMovingObject() 
//					   + &quot;. Total of Movelets: &quot; + movelets.size() 
					   + &quot;. Trajs. Looked: &quot; + 1 
					   + &quot;. Trajs. Ignored: &quot; + trajsIgnored);
		
//		progressBar.trace(&quot;Class: &quot; + trajsFromClass.get(0).getMovingObject() 
//				   + &quot;. Total of Movelets: &quot; + movelets.size());
//		System.out.println(&quot;\nMOVELETS:&quot;);
//		for (Subtrajectory subtrajectory : movelets) {
//			System.out.println(subtrajectory);
//		}

		/** STEP 2.5, to write all outputs: */
//		super.output(&quot;train&quot;, this.train, movelets, false);
//		
//		if (!this.test.isEmpty())
//			super.output(&quot;test&quot;, this.test, movelets, false);
		
		return movelets;
	</body>
                </ownedBehavior>
                <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BPepQJxtEeuT9elTX1485g" name="updateQueue" specification="_BMiqAJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BPepQZxtEeuT9elTX1485g" name="coveredTrajectories" type="_A_eeYJxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BPepQpxtEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                  <language>java</language>
                  <body>int n = queue.size();
		queue.removeAll(coveredTrajectories);	
		int trajsIgnored = (n - queue.size());
		
		if (outputers != null)
			for (OutputterAdapter&lt;MO> output : outputers) {
				output.setDelayCount(output.getDelayCount() - trajsIgnored);			
			}
		
		return trajsIgnored;
	</body>
                </ownedBehavior>
                <ownedOperation xmi:id="_AtdhUJxtEeuT9elTX1485g" name="discover" method="_BPeCMJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_AteIYJxtEeuT9elTX1485g" type="_6X8wwJxsEeuT9elTX1485g" isOrdered="true" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_AtfWgJxtEeuT9elTX1485g" value="*"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_BMYR8JxtEeuT9elTX1485g" name="UltraMoveletsDiscovery" method="_BPc0EJxtEeuT9elTX1485g">
                  <eAnnotations xmi:id="_BMZgE5xtEeuT9elTX1485g" source="http://www.eclipse.org/uml2/2.0.0/UML">
                    <details xmi:id="_BMaHIJxtEeuT9elTX1485g" key="create"/>
                  </eAnnotations>
                  <ownedParameter xmi:id="_BMYR8ZxtEeuT9elTX1485g" name="trajectory" type="_6X6UgJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BMYR8pxtEeuT9elTX1485g" name="trajsFromClass" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BMY5AJxtEeuT9elTX1485g" name="data" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BMY5AZxtEeuT9elTX1485g" name="train" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BMZgEJxtEeuT9elTX1485g" name="test" type="_6Xk9UJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BMZgEZxtEeuT9elTX1485g" name="qualityMeasure" type="_A_j98JxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BMZgEpxtEeuT9elTX1485g" name="descriptor" type="_6X34QJxsEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BMaHIZxtEeuT9elTX1485g" type="_AtRUEJxtEeuT9elTX1485g" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_BMiqAJxtEeuT9elTX1485g" name="updateQueue" method="_BPepQJxtEeuT9elTX1485g">
                  <ownedParameter xmi:id="_BMjREJxtEeuT9elTX1485g" name="coveredTrajectories" type="_A_eeYJxtEeuT9elTX1485g"/>
                  <ownedParameter xmi:id="_BMjREZxtEeuT9elTX1485g" direction="return">
                    <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                  </ownedParameter>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_BQLz4JxtEeuT9elTX1485g" name="" memberEnd="_BQLz4ZxtEeuT9elTX1485g _BMql0JxtEeuT9elTX1485g">
                <ownedEnd xmi:id="_BQLz4ZxtEeuT9elTX1485g" name="" type="_Aj8Y8JxtEeuT9elTX1485g" association="_BQLz4JxtEeuT9elTX1485g"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_BQMa8ZxtEeuT9elTX1485g" name="" memberEnd="_BQMa8pxtEeuT9elTX1485g _BMu3QJxtEeuT9elTX1485g">
                <ownedEnd xmi:id="_BQMa8pxtEeuT9elTX1485g" name="" type="_AkP68JxtEeuT9elTX1485g" association="_BQMa8ZxtEeuT9elTX1485g"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_BQO3MJxtEeuT9elTX1485g" name="" memberEnd="_BQO3MZxtEeuT9elTX1485g _BM0W0JxtEeuT9elTX1485g">
                <ownedEnd xmi:id="_BQO3MZxtEeuT9elTX1485g" name="" type="_AlU5AJxtEeuT9elTX1485g" association="_BQO3MJxtEeuT9elTX1485g"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_BQShkJxtEeuT9elTX1485g" name="" memberEnd="_BQShkZxtEeuT9elTX1485g _BNJuAZxtEeuT9elTX1485g">
                <ownedEnd xmi:id="_BQShkZxtEeuT9elTX1485g" name="" type="_AozDwJxtEeuT9elTX1485g" association="_BQShkJxtEeuT9elTX1485g"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_BQUWwJxtEeuT9elTX1485g" name="" memberEnd="_BQUWwZxtEeuT9elTX1485g _BNK8IJxtEeuT9elTX1485g">
                <ownedEnd xmi:id="_BQUWwZxtEeuT9elTX1485g" name="" type="_AozDwJxtEeuT9elTX1485g" association="_BQUWwJxtEeuT9elTX1485g"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_BQVk4ZxtEeuT9elTX1485g" name="" memberEnd="_BQVk4pxtEeuT9elTX1485g _BNSQ4ZxtEeuT9elTX1485g">
                <ownedEnd xmi:id="_BQVk4pxtEeuT9elTX1485g" name="" type="_ApSzAJxtEeuT9elTX1485g" association="_BQVk4ZxtEeuT9elTX1485g"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_BQWzAJxtEeuT9elTX1485g" name="" memberEnd="_BQWzAZxtEeuT9elTX1485g _BNXJYJxtEeuT9elTX1485g">
                <ownedEnd xmi:id="_BQWzAZxtEeuT9elTX1485g" name="" type="_ApSzAJxtEeuT9elTX1485g" association="_BQWzAJxtEeuT9elTX1485g"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_BQadYJxtEeuT9elTX1485g" name="" memberEnd="_BQadYZxtEeuT9elTX1485g _BNY-kJxtEeuT9elTX1485g">
                <ownedEnd xmi:id="_BQadYZxtEeuT9elTX1485g" name="" type="_ApSzAJxtEeuT9elTX1485g" association="_BQadYJxtEeuT9elTX1485g"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_BQbrgZxtEeuT9elTX1485g" name="" memberEnd="_BQcSkJxtEeuT9elTX1485g _BNg6YJxtEeuT9elTX1485g">
                <ownedEnd xmi:id="_BQcSkJxtEeuT9elTX1485g" name="" type="_ApiqoJxtEeuT9elTX1485g" association="_BQbrgZxtEeuT9elTX1485g"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_BQeu0JxtEeuT9elTX1485g" name="" memberEnd="_BQeu0ZxtEeuT9elTX1485g _BNivkZxtEeuT9elTX1485g">
                <ownedEnd xmi:id="_BQeu0ZxtEeuT9elTX1485g" name="" type="_ApiqoJxtEeuT9elTX1485g" association="_BQeu0JxtEeuT9elTX1485g"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_BQf88JxtEeuT9elTX1485g" name="" memberEnd="_BQf88ZxtEeuT9elTX1485g _BNxZEZxtEeuT9elTX1485g">
                <ownedEnd xmi:id="_BQf88ZxtEeuT9elTX1485g" name="" type="_ArOssJxtEeuT9elTX1485g" association="_BQf88JxtEeuT9elTX1485g"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Association" xmi:id="_BQhLEJxtEeuT9elTX1485g" name="" memberEnd="_BQhLEZxtEeuT9elTX1485g _BNz1UZxtEeuT9elTX1485g">
                <ownedEnd xmi:id="_BQhLEZxtEeuT9elTX1485g" name="" type="_ArOssJxtEeuT9elTX1485g" association="_BQhLEJxtEeuT9elTX1485g"/>
              </packagedElement>
            </packagedElement>
            <packagedElement xmi:type="uml:Package" xmi:id="_AdsnAJxtEeuT9elTX1485g" name="qualitymeasure">
              <packagedElement xmi:type="uml:Class" xmi:id="_A_g6oJxtEeuT9elTX1485g" name="EntropyQualityMeasure"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_A_j98JxtEeuT9elTX1485g" name="QualityMeasure"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_BASWsJxtEeuT9elTX1485g" name="ProportionQualityMeasure"/>
            </packagedElement>
          </packagedElement>
          <packagedElement xmi:type="uml:Package" xmi:id="_6LPxgZxsEeuT9elTX1485g" name="model">
            <packagedElement xmi:type="uml:Package" xmi:id="_AhFSMJxtEeuT9elTX1485g" name="aspect">
              <packagedElement xmi:type="uml:Class" xmi:id="_BHP6UJxtEeuT9elTX1485g" name="Aspect"/>
            </packagedElement>
            <packagedElement xmi:type="uml:Class" xmi:id="_6X6UgJxsEeuT9elTX1485g" name="MAT"/>
            <packagedElement xmi:type="uml:Class" xmi:id="_6X8wwJxsEeuT9elTX1485g" name="Subtrajectory"/>
            <packagedElement xmi:type="uml:Class" xmi:id="_BB2c8JxtEeuT9elTX1485g" name="Point"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Package" xmi:id="_6LQ_oJxsEeuT9elTX1485g" name="utils">
            <packagedElement xmi:type="uml:Class" xmi:id="_6X_NAZxsEeuT9elTX1485g" name="ProgressBar"/>
            <packagedElement xmi:type="uml:Class" xmi:id="_BFCT0JxtEeuT9elTX1485g" name="Mov3letsUtils"/>
          </packagedElement>
        </packagedElement>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_6LLgEJxsEeuT9elTX1485g" name="java">
      <packagedElement xmi:type="uml:Package" xmi:id="_6LLgEZxsEeuT9elTX1485g" name="util">
        <packagedElement xmi:type="uml:Package" xmi:id="_6LMuMJxsEeuT9elTX1485g" name="concurrent">
          <packagedElement xmi:type="uml:Interface" xmi:id="_6XmygZxsEeuT9elTX1485g" name="Callable"/>
          <packagedElement xmi:type="uml:Class" xmi:id="_BE7mIJxtEeuT9elTX1485g" name="ExecutionException"/>
          <packagedElement xmi:type="uml:Interface" xmi:id="_BE9bUJxtEeuT9elTX1485g" name="ExecutorService"/>
          <packagedElement xmi:type="uml:Class" xmi:id="_BE-pcZxtEeuT9elTX1485g" name="Executors"/>
          <packagedElement xmi:type="uml:Interface" xmi:id="_BFAeoJxtEeuT9elTX1485g" name="Future"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Class" xmi:id="_6XalQJxsEeuT9elTX1485g" name="ArrayList"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_6Xk9UJxsEeuT9elTX1485g" name="List"/>
        <packagedElement xmi:type="uml:Package" xmi:id="_AeAJAJxtEeuT9elTX1485g" name="Map">
          <packagedElement xmi:type="uml:Interface" xmi:id="_BAJz0JxtEeuT9elTX1485g" name="Entry"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Class" xmi:id="_A_bbEJxtEeuT9elTX1485g" name="LinkedHashSet"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_A_dQQJxtEeuT9elTX1485g" name="Random"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_A_eeYJxtEeuT9elTX1485g" name="Set"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_A_u9EJxtEeuT9elTX1485g" name="Comparator"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_A_8_gJxtEeuT9elTX1485g" name="Arrays"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_BAB4AJxtEeuT9elTX1485g" name="HashMap"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_BAIlsJxtEeuT9elTX1485g" name="Map"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_BGUtQJxtEeuT9elTX1485g" name="HashSet"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_BGVUUZxtEeuT9elTX1485g" name="Objects"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_6Zyj0JxsEeuT9elTX1485g" name="lang">
        <packagedElement xmi:type="uml:Class" xmi:id="_6ZzK4JxsEeuT9elTX1485g" name="Exception"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_6aUIQJxsEeuT9elTX1485g" name="Object"/>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_AeAwEJxtEeuT9elTX1485g" name="org">
      <packagedElement xmi:type="uml:Package" xmi:id="_AeAwEZxtEeuT9elTX1485g" name="apache">
        <packagedElement xmi:type="uml:Package" xmi:id="_AeAwEpxtEeuT9elTX1485g" name="commons">
          <packagedElement xmi:type="uml:Package" xmi:id="_AeAwE5xtEeuT9elTX1485g" name="math3">
            <packagedElement xmi:type="uml:Package" xmi:id="_AeBXIJxtEeuT9elTX1485g" name="util">
              <packagedElement xmi:type="uml:Class" xmi:id="_BAQhgJxtEeuT9elTX1485g" name="Combinations"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_BBwWUJxtEeuT9elTX1485g" name="Pair"/>
            </packagedElement>
            <packagedElement xmi:type="uml:Package" xmi:id="_AfxqoJxtEeuT9elTX1485g" name="stat">
              <packagedElement xmi:type="uml:Package" xmi:id="_AfxqoZxtEeuT9elTX1485g" name="ranking">
                <packagedElement xmi:type="uml:Class" xmi:id="_BF0-AJxtEeuT9elTX1485g" name="NaturalRanking"/>
                <packagedElement xmi:type="uml:Interface" xmi:id="_BF2zMJxtEeuT9elTX1485g" name="RankingAlgorithm"/>
              </packagedElement>
            </packagedElement>
            <packagedElement xmi:type="uml:Package" xmi:id="_AgT2IZxtEeuT9elTX1485g" name="linear">
              <packagedElement xmi:type="uml:Class" xmi:id="_BGXwkZxtEeuT9elTX1485g" name="Array2DRowRealMatrix"/>
              <packagedElement xmi:type="uml:Interface" xmi:id="_BGaM0ZxtEeuT9elTX1485g" name="RealMatrix"/>
            </packagedElement>
          </packagedElement>
          <packagedElement xmi:type="uml:Package" xmi:id="_AgT2IJxtEeuT9elTX1485g" name="collections4">
            <packagedElement xmi:type="uml:Class" xmi:id="_BGWicZxtEeuT9elTX1485g" name="SetUtils"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Package" xmi:id="_AhErIJxtEeuT9elTX1485g" name="lang3">
            <packagedElement xmi:type="uml:Class" xmi:id="_BHOFIJxtEeuT9elTX1485g" name="ArrayUtils"/>
          </packagedElement>
        </packagedElement>
      </packagedElement>
    </packagedElement>
    <profileApplication xmi:id="_6Oy0wJxsEeuT9elTX1485g">
      <eAnnotations xmi:id="_6PIL8JxsEeuT9elTX1485g" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="pathmap://UMLLAB_PROFILES/UMLLab.profile.uml#UMLLabProfile-Annotation_2-UMLLabProfile"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UMLLAB_PROFILES/UMLLab.profile.uml#UMLLabProfile"/>
    </profileApplication>
  </uml:Model>
  <UMLLabProfile:Generics xmi:id="_6P0IcJxsEeuT9elTX1485g" genericsValue="MO" base_Element="_6OvxcJxsEeuT9elTX1485g"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_6SN8MJxsEeuT9elTX1485g" base_Element="_6SJDsJxsEeuT9elTX1485g"/>
  <UMLLabProfile:Annotations xmi:id="_6SQYcJxsEeuT9elTX1485g" base_Element="_6SJDsJxsEeuT9elTX1485g">
    <annotations xmi:id="_6SqoIJxsEeuT9elTX1485g" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:Generics xmi:id="_6TB0gJxsEeuT9elTX1485g" genericsValue="MO" base_Element="_6S1AMJxsEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_6TLlgJxsEeuT9elTX1485g" genericsValue="MO" base_Element="_6THUEJxsEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_6TS6QJxsEeuT9elTX1485g" genericsValue="MO" base_Element="_6TOBwJxsEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_6TXywJxsEeuT9elTX1485g" genericsValue="MO" base_Element="_6TThUJxsEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_6TdSUJxsEeuT9elTX1485g" genericsValue="MO" base_Element="_6TZA4JxsEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_6Tix4JxsEeuT9elTX1485g" genericsValue="MO" base_Element="_6TegcJxsEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_6TnqYJxsEeuT9elTX1485g" genericsValue="MO" base_Element="_6TkAAJxsEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_6XdokJxsEeuT9elTX1485g" base_Element="_6XalQJxsEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_6XmygJxsEeuT9elTX1485g" base_Element="_6Xk9UJxsEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_6Xp10JxsEeuT9elTX1485g" base_Element="_6XmygZxsEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_6XuHQJxsEeuT9elTX1485g" base_Element="_6Xqc4JxsEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_6XxKkJxsEeuT9elTX1485g" base_Element="_6XuHQZxsEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_6X0N4JxsEeuT9elTX1485g" base_Element="_6XxKkZxsEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_6X3RMJxsEeuT9elTX1485g" base_Element="_6X008JxsEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_6X5tcJxsEeuT9elTX1485g" base_Element="_6X34QJxsEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_6X8JsJxsEeuT9elTX1485g" base_Element="_6X6UgJxsEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_6X_NAJxsEeuT9elTX1485g" base_Element="_6X8wwJxsEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_6YBpQJxsEeuT9elTX1485g" base_Element="_6X_NAZxsEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_6Yx3MJxsEeuT9elTX1485g" genericsValue="Integer" base_Element="_6Yuz4JxsEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_6ZBHwJxsEeuT9elTX1485g" genericsValue="MO" base_Element="_6Y7BIZxsEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_6ZC88JxsEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_6Y7BIpxsEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_6ZEyIJxsEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_6Y7oMJxsEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_6ZH1cJxsEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_6Y7oMZxsEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_6ZKRsJxsEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_6Y8PQJxsEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_6ZUCsJxsEeuT9elTX1485g" genericsValue="MO" base_Element="_6ZMt8ZxsEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_6ZWe8JxsEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_6ZMt8pxsEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_6ZZiQJxsEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_6ZNVAJxsEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_6Zb-gJxsEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_6ZNVAZxsEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_6ZeawJxsEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_6ZNVApxsEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_6ZgP8JxsEeuT9elTX1485g" genericsValue="OutputterAdapter&lt;MO>" base_Element="_6ZN8EZxsEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_6Zoy0JxsEeuT9elTX1485g" genericsValue="MO" base_Element="_6ZkhYJxsEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_6ZqoAJxsEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_6ZlIcJxsEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_6ZsdMJxsEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_6ZlIcZxsEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_6ZuSYJxsEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_6ZlvgJxsEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_6ZwuoJxsEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_6ZlvgZxsEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_6Z1AEJxsEeuT9elTX1485g" base_Element="_6ZzK4JxsEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_6aHT8JxsEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_6aEQoZxsEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_6aIiEJxsEeuT9elTX1485g" genericsValue="Subtrajectory" base_Element="_6aE3sJxsEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_6aK-UJxsEeuT9elTX1485g" genericsValue="OutputterAdapter&lt;MO>" base_Element="_6aJJIZxsEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_6aThMJxsEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_6aRsAZxsEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_6aVWYJxsEeuT9elTX1485g" base_Element="_6aUIQJxsEeuT9elTX1485g"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_6ahjoJxsEeuT9elTX1485g" base_Element="_6afHYJxsEeuT9elTX1485g"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_6ajY0JxsEeuT9elTX1485g" base_Element="_6aixwJxsEeuT9elTX1485g"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_6anqQJxsEeuT9elTX1485g" base_Element="_6aj_4JxsEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_6aqtkJxsEeuT9elTX1485g" genericsValue="MO" base_Element="_6aoRUJxsEeuT9elTX1485g"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_6asiwJxsEeuT9elTX1485g" base_Element="_6aoRUJxsEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_6aw0MJxsEeuT9elTX1485g" genericsValue="MO" base_Element="_6auX8JxsEeuT9elTX1485g"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_6ayCUJxsEeuT9elTX1485g" base_Element="_6auX8JxsEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_6a1FoJxsEeuT9elTX1485g" genericsValue="MO" base_Element="_6aypYJxsEeuT9elTX1485g"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_6a2TwJxsEeuT9elTX1485g" base_Element="_6aypYJxsEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_6a5XEJxsEeuT9elTX1485g" genericsValue="MO" base_Element="_6a260JxsEeuT9elTX1485g"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_6a6lMJxsEeuT9elTX1485g" base_Element="_6a260JxsEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_6a9BcJxsEeuT9elTX1485g" genericsValue="MO" base_Element="_6a6lMZxsEeuT9elTX1485g"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_6a-2oJxsEeuT9elTX1485g" base_Element="_6a6lMZxsEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_6bB58JxsEeuT9elTX1485g" genericsValue="MO" base_Element="_6a_dsJxsEeuT9elTX1485g"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_6bChAJxsEeuT9elTX1485g" base_Element="_6a_dsJxsEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_6bGLYJxsEeuT9elTX1485g" genericsValue="MO" base_Element="_6bDIEJxsEeuT9elTX1485g"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_6bIAkJxsEeuT9elTX1485g" base_Element="_6bDIEJxsEeuT9elTX1485g"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_6bKc0JxsEeuT9elTX1485g" base_Element="_6bInoJxsEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_6cn1YJxsEeuT9elTX1485g" base_Element="_6cjj8JxsEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_6csG0JxsEeuT9elTX1485g" base_Element="_6coccJxsEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_6ct8AJxsEeuT9elTX1485g" base_Element="_6cst4JxsEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_6cw_UJxsEeuT9elTX1485g" base_Element="_6ct8AZxsEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_6c0psJxsEeuT9elTX1485g" base_Element="_6cxmYJxsEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_6c3F8JxsEeuT9elTX1485g" base_Element="_6c0psZxsEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_6c5iMJxsEeuT9elTX1485g" base_Element="_6c3F8ZxsEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_6c8lgJxsEeuT9elTX1485g" base_Element="_6c6JQJxsEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_6c_o0JxsEeuT9elTX1485g" base_Element="_6c9MkJxsEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_Aj_cQJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_Aj8Y8JxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_AkSXMJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_AkP68JxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_Akl5MJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_Akjc8JxtEeuT9elTX1485g"/>
  <UMLLabProfile:Array xmi:id="_AlAI4JxtEeuT9elTX1485g" dimensions="2" base_Element="_Ak6CQJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_AlXVQJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_AlU5AJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_AlppIJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_AlnM4JxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_AmIKQJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_AmA1gJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_AmWMsJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_AmSiUJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Array xmi:id="_Amf9sZxtEeuT9elTX1485g" dimensions="4" base_Element="_AmfWoJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Array xmi:id="_AmjoEJxtEeuT9elTX1485g" dimensions="4" base_Element="_AmfWoZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Array xmi:id="_AmpusJxtEeuT9elTX1485g" dimensions="2" base_Element="_AmmrYJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_AnNvYJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_AnL6MJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_AneOEJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_AncY4JxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_An8IIJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_An6S8JxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_AoPDEJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_AoMm0JxtEeuT9elTX1485g"/>
  <UMLLabProfile:Array xmi:id="_AoeToJxtEeuT9elTX1485g" base_Element="_AobQUJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_Ao1gAJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_AozDwJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_ApUBIJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_ApSzAJxtEeuT9elTX1485g"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_ApXrgZxtEeuT9elTX1485g" base_Element="_ApXEcJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Annotations xmi:id="_ApYSkJxtEeuT9elTX1485g" base_Element="_ApXEcJxtEeuT9elTX1485g">
    <annotations xmi:id="_ApYSkZxtEeuT9elTX1485g" name="Override"/>
  </UMLLabProfile:Annotations>
  <UMLLabProfile:Generics xmi:id="_ApoKMJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_ApiqoJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Array xmi:id="_AqAksJxtEeuT9elTX1485g" dimensions="2" base_Element="_Ap8TQJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Array xmi:id="_AqFdMZxtEeuT9elTX1485g" dimensions="2" base_Element="_AqE2IJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Array xmi:id="_AqXKAJxtEeuT9elTX1485g" dimensions="2" base_Element="_AqTfoZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_ArSXEJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_ArOssJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_AtUXYJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_AtRUEJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_A_cpMJxtEeuT9elTX1485g" base_Element="_A_bbEJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_A_d3UJxtEeuT9elTX1485g" base_Element="_A_dQQJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_A_fsgJxtEeuT9elTX1485g" base_Element="_A_eeYJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_A_jW4JxtEeuT9elTX1485g" base_Element="_A_g6oJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_A_lMEJxtEeuT9elTX1485g" base_Element="_A_j98JxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_A_oPYJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_A_nBQJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_A_wyQJxtEeuT9elTX1485g" base_Element="_A_u9EJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_A_2R0JxtEeuT9elTX1485g" genericsValue="Subtrajectory" base_Element="_A_zOgJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_A_58MJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_A_4uEJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_A_-NoJxtEeuT9elTX1485g" base_Element="_A_8_gJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_BAH-oJxtEeuT9elTX1485g" base_Element="_BAB4AJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_BAJMwJxtEeuT9elTX1485g" base_Element="_BAIlsJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_BAOsUJxtEeuT9elTX1485g" base_Element="_BAJz0JxtEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_BARvoJxtEeuT9elTX1485g" base_Element="_BAQhgJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_BAUL4JxtEeuT9elTX1485g" base_Element="_BASWsJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BAcHsJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BAaSgJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BAhnQJxtEeuT9elTX1485g" genericsValue="Subtrajectory" base_Element="_BAa5kJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BAi1YJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BAhnQZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BA1JQJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BAzUEJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BBDLsJxtEeuT9elTX1485g" genericsValue="Subtrajectory" base_Element="_BA_hUZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BBEZ0JxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BBAIYJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BBFn8JxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BBAIYZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Array xmi:id="_BBHdIJxtEeuT9elTX1485g" dimensions="4" base_Element="_BBAIYpxtEeuT9elTX1485g"/>
  <UMLLabProfile:Array xmi:id="_BBJSUJxtEeuT9elTX1485g" dimensions="4" base_Element="_BBAIY5xtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BBOK0JxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BBLHgZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BBPY8JxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BBLukJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Array xmi:id="_BBURcJxtEeuT9elTX1485g" dimensions="4" base_Element="_BBLukZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BBZxAJxtEeuT9elTX1485g" genericsValue="Subtrajectory" base_Element="_BBXUwJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BBc0UJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BBaYEJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BBkwIJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BBjiAJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_BByykJxtEeuT9elTX1485g" base_Element="_BBwWUJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_BB114JxtEeuT9elTX1485g" base_Element="_BByykZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_BB3EAJxtEeuT9elTX1485g" base_Element="_BB2c8JxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BB9xsJxtEeuT9elTX1485g" genericsValue="Subtrajectory" base_Element="_BB6uYJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Array xmi:id="_BCAN8JxtEeuT9elTX1485g" dimensions="4" base_Element="_BB-_0JxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BCCDIJxtEeuT9elTX1485g" genericsValue="?" base_Element="_BB-_0ZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BCJX4JxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BB_m4JxtEeuT9elTX1485g"/>
  <UMLLabProfile:Array xmi:id="_BCMbMJxtEeuT9elTX1485g" dimensions="4" base_Element="_BCKmAJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BCRTsJxtEeuT9elTX1485g" genericsValue="?" base_Element="_BCKmAZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BCTv8JxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BCKmApxtEeuT9elTX1485g"/>
  <UMLLabProfile:Array xmi:id="_BCU-EJxtEeuT9elTX1485g" dimensions="4" base_Element="_BCKmA5xtEeuT9elTX1485g"/>
  <UMLLabProfile:Array xmi:id="_BCVlIJxtEeuT9elTX1485g" dimensions="4" base_Element="_BCKmBJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BCdg8JxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BCWMMZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BCf9MJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BCWzQJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Array xmi:id="_BCgkQJxtEeuT9elTX1485g" dimensions="4" base_Element="_BCWzQpxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BCrjYJxtEeuT9elTX1485g" genericsValue="Subtrajectory, double[]" base_Element="_BChLUJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BCvNwJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BCogEJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Array xmi:id="_BCyREJxtEeuT9elTX1485g" dimensions="4" base_Element="_BCogEZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BC3JkJxtEeuT9elTX1485g" genericsValue="Subtrajectory" base_Element="_BC0GQZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BC8pIJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BC0GQpxtEeuT9elTX1485g"/>
  <UMLLabProfile:Array xmi:id="_BC93QJxtEeuT9elTX1485g" dimensions="4" base_Element="_BC0tUZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BDHBMJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BC_FYZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Array xmi:id="_BDHoQJxtEeuT9elTX1485g" dimensions="4" base_Element="_BC_FYpxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BDI2YJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BDHoQZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BDdmgJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BDbxUJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BD2oEJxtEeuT9elTX1485g" genericsValue="Subtrajectory" base_Element="_BDyWoJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BD4dQJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BDyWoZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BEDcYJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BDyWopxtEeuT9elTX1485g"/>
  <UMLLabProfile:Array xmi:id="_BEEqgJxtEeuT9elTX1485g" dimensions="4" base_Element="_BDyWo5xtEeuT9elTX1485g"/>
  <UMLLabProfile:Array xmi:id="_BEGfsJxtEeuT9elTX1485g" dimensions="4" base_Element="_BDyWpJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BEQQsJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BEKKEJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BEYMgJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BEKKEZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Array xmi:id="_BEYzkJxtEeuT9elTX1485g" dimensions="4" base_Element="_BEKKEpxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BEh9gJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BEaowJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Array xmi:id="_BEjysJxtEeuT9elTX1485g" dimensions="4" base_Element="_BEaowZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BEoEIJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BEln4JxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BE2GkJxtEeuT9elTX1485g" genericsValue="Subtrajectory" base_Element="_BEycMZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BE5J4JxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BE3UsJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_BE80QJxtEeuT9elTX1485g" base_Element="_BE7mIJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_BE-pcJxtEeuT9elTX1485g" base_Element="_BE9bUJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_BE_3kJxtEeuT9elTX1485g" base_Element="_BE-pcZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_BFBswJxtEeuT9elTX1485g" base_Element="_BFAeoJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_BFF-MJxtEeuT9elTX1485g" base_Element="_BFCT0JxtEeuT9elTX1485g"/>
  <UMLLabProfile:TypeParameterDeclaration xmi:id="_BFNS8JxtEeuT9elTX1485g" typeParameterDeclarationValue="MO" base_Operation="_BFKPoJxtEeuT9elTX1485g"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_BFN6AJxtEeuT9elTX1485g" base_Element="_BFKPoJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BFSygJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BFME0JxtEeuT9elTX1485g"/>
  <UMLLabProfile:TypeParameterDeclaration xmi:id="_BFUnsJxtEeuT9elTX1485g" typeParameterDeclarationValue="MO" base_Operation="_BFTZkJxtEeuT9elTX1485g"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_BFVOwJxtEeuT9elTX1485g" base_Element="_BFTZkJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BFWc4JxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BFTZkZxtEeuT9elTX1485g"/>
  <UMLLabProfile:TypeParameterDeclaration xmi:id="_BFXrAZxtEeuT9elTX1485g" typeParameterDeclarationValue="MO" base_Operation="_BFXD8JxtEeuT9elTX1485g"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_BFYSEJxtEeuT9elTX1485g" base_Element="_BFXD8JxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BFZgMJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BFXD8ZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BFgN4JxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BFbVYZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BFg08JxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BFbVYpxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BFj4QJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BFhcAZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BFlGYJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BFhcApxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BFnioJxtEeuT9elTX1485g" genericsValue="Subtrajectory, double[]" base_Element="_BFmUgJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BFpX0JxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BFmUgpxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BFr0EJxtEeuT9elTX1485g" genericsValue="Subtrajectory" base_Element="_BFql8JxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BFsbIJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BFql8ZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BFvecJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BFtCMZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BFwskJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BFvecZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_BF2MIJxtEeuT9elTX1485g" base_Element="_BF0-AJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_BF5PcJxtEeuT9elTX1485g" base_Element="_BF2zMJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BF-vAJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BF9g4pxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BGBLQJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BF_WEJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BGKVMJxtEeuT9elTX1485g" genericsValue="Integer" base_Element="_BGJHEJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BGPNsJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BGMxcJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Array xmi:id="_BGQb0JxtEeuT9elTX1485g" dimensions="5" base_Element="_BGMxcZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BGS4EJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BGRp8pxtEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_BGVUUJxtEeuT9elTX1485g" base_Element="_BGUtQJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_BGWicJxtEeuT9elTX1485g" base_Element="_BGVUUZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_BGXwkJxtEeuT9elTX1485g" base_Element="_BGWicZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_BGaM0JxtEeuT9elTX1485g" base_Element="_BGXwkZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_BGba8JxtEeuT9elTX1485g" base_Element="_BGaM0ZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BGfFUJxtEeuT9elTX1485g" genericsValue="Subtrajectory" base_Element="_BGeeQJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BGivsJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BGgTcZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BGjWwJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BGgTcpxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BGmaEJxtEeuT9elTX1485g" genericsValue="Subtrajectory, double[]" base_Element="_BGj90JxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BGnoMJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BGkk4ZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BGqEcJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BGoPQ5xtEeuT9elTX1485g"/>
  <UMLLabProfile:Array xmi:id="_BGqrgJxtEeuT9elTX1485g" dimensions="2" base_Element="_BGoPRZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BGu88JxtEeuT9elTX1485g" genericsValue="Subtrajectory" base_Element="_BGtHwJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BGwLEJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BGtHwZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BGynUJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BGwyIpxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BG0cgJxtEeuT9elTX1485g" genericsValue="Subtrajectory" base_Element="_BGzOYJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BG4G4JxtEeuT9elTX1485g" genericsValue="Subtrajectory" base_Element="_BG1qoJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BG7KMJxtEeuT9elTX1485g" genericsValue="Subtrajectory" base_Element="_BG5VAJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BG8_YJxtEeuT9elTX1485g" genericsValue="Subtrajectory" base_Element="_BG7xQJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BHEUIJxtEeuT9elTX1485g" genericsValue="Subtrajectory" base_Element="_BHBQ0JxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BHFiQJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BHE7MJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_BHPTQJxtEeuT9elTX1485g" base_Element="_BHOFIJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_BHQhYJxtEeuT9elTX1485g" base_Element="_BHP6UJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BHXPEJxtEeuT9elTX1485g" genericsValue="Subtrajectory" base_Element="_BHUy0JxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BHa5cJxtEeuT9elTX1485g" genericsValue="Subtrajectory" base_Element="_BHX2IZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BHd8wJxtEeuT9elTX1485g" genericsValue="Subtrajectory" base_Element="_BHbggJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BHhnIJxtEeuT9elTX1485g" genericsValue="Subtrajectory" base_Element="_BHfK4ZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BHkqcJxtEeuT9elTX1485g" genericsValue="Subtrajectory" base_Element="_BHiOMZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BHntwJxtEeuT9elTX1485g" genericsValue="Subtrajectory" base_Element="_BHlRgZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BHsmQJxtEeuT9elTX1485g" genericsValue="Subtrajectory" base_Element="_BHqxEZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BHvpkJxtEeuT9elTX1485g" genericsValue="Subtrajectory" base_Element="_BHt0YZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BHys4JxtEeuT9elTX1485g" genericsValue="Integer, Aspect&lt;?>" base_Element="_BHwQoJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BH2XQJxtEeuT9elTX1485g" genericsValue="HashMap&lt;Integer, Aspect&lt;?>>" base_Element="_BHz7AZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BH3lYJxtEeuT9elTX1485g" genericsValue="HashMap&lt;Integer, Aspect&lt;?>>" base_Element="_BH0iEJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BH4zgJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BH3lYZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BIDyoJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BIDLkJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BIhFoJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BIc0MZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BIhssJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BIdbQJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BIiTwJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BIdbQZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BIi60JxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BIeCUJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BInMQJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BIkI8ZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BInzUJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BIkI8pxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BIpBcJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BIkwAJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BIqPkJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BIkwAZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BItS4JxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BIrdsZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BIt58JxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BIrdspxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BIuhAJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BIrds5xtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BIvvIJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BIsEwJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BIyycJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BIw9QJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BI3D4JxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BIzZgZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BI4SAJxtEeuT9elTX1485g" genericsValue="Subtrajectory" base_Element="_BI0AkpxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BI_mwJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BI78YJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BJAN0JxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BI78YZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BJBb8JxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BI8jcJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BJCDAJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BI8jcZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BJJ-0JxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BJEfQZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BJLM8JxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BJFGUJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BJMbEJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BJFtYJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BJNpMJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BJGUcJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BJTIwJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BJO3UZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BJU98JxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BJPeYJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BJbroJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BJWzIZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BJdg0JxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BJXaMJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BJeH4JxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BJYBQJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BJeu8JxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BJYoUJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BJf9EJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BJYoUZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BJjncJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BJhLMZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BJlcoJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BJhLMpxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BJnR0JxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BJhLM5xtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BJof8JxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BJhLNJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BJpHAJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BJhLNZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BJtYcJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BJqVIZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BJv0sJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BJqVIpxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BJ1UQJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BJy4AZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BJ3JcJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BJy4ApxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BJ4-oJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BJzfEJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BJ5lsJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BJzfEZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BJ93IJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BJ7a4ZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BJ_FQJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BJ8B8JxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BKFL4JxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BKA6cJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BKFy8JxtEeuT9elTX1485g" genericsValue="Subtrajectory" base_Element="_BKCvoJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BKI2QJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BKHBEZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BKKEYJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BKHBEpxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BKL5kJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BKHBE5xtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BKOV0JxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BKHoIJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BKQLAJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BKHoIZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BKTOUJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BKQyEZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BKW4sJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BKRZIJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BKcYQJxtEeuT9elTX1485g" genericsValue="Subtrajectory" base_Element="_BKajEZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BKeNcJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BKajEpxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BKliMJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BKh30JxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BKmwUJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BKie4JxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BKnXYJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BKjF8JxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BKn-cJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BKjF8ZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BKqasJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BKjF8pxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BKusIJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BKro0ZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BKv6QJxtEeuT9elTX1485g" genericsValue="Subtrajectory" base_Element="_BKsP4pxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BK0LsJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BKxIYZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BK1Z0JxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BKxIYpxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BK4dIJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BKxIY5xtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BK5EMJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BKxIZJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BK6SUJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BKxvcJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BLBAAJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BK8ukZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BLCOIJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BK8ukpxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BLDcQJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BK8uk5xtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BLEqYJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BK8ulJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BLFRcJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BK9VoJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BLJi4JxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BLF4gZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BLL_IJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BLF4gpxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BLPpgJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BLObYJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BLQ3oJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BLObYZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BLVJEJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BLSs0pxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BLVwIJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BLTT4JxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BLdE4JxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BLZagZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BLeTAJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BLZagpxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BLfhIJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BLaBkJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BLgIMJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BLaBkZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BLhWUJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BLaBkpxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BLmO0JxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BLjykZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BLnc8JxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BLjykpxtEeuT9elTX1485g"/>
  <UMLLabProfile:Array xmi:id="_BLv_0JxtEeuT9elTX1485g" base_Element="_BLuxsJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BL4isJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BL2GcZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BL5JwJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BL2tgJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BL6-8JxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BL2tgZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BL8NEJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BL2tgpxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BL9bMJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BL2tg5xtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BMBFkJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BL-pUZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BMCTsJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BL-pUpxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BMEv8JxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BMC6wZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BMF-EJxtEeuT9elTX1485g" genericsValue="Subtrajectory" base_Element="_BMDh0JxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BMK2kJxtEeuT9elTX1485g" genericsValue="Subtrajectory" base_Element="_BMHzQZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BMN54JxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BMLdoZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BMPvEJxtEeuT9elTX1485g" genericsValue="Subtrajectory" base_Element="_BMMEsZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BMTZcJxtEeuT9elTX1485g" genericsValue="Subtrajectory" base_Element="_BMQ9MJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BMV1sJxtEeuT9elTX1485g" genericsValue="Subtrajectory" base_Element="_BMUAgZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BMWcwJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BMUnkZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BMbVQJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BMYR8ZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BMcjYJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BMYR8pxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BMeYkJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BMY5AJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BMg00JxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BMY5AZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BMhb4JxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BMZgEJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BMlGQJxtEeuT9elTX1485g" genericsValue="MAT&lt;MO>" base_Element="_BMjREJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BMsbAJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BMql0JxtEeuT9elTX1485g"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_BMtpIJxtEeuT9elTX1485g" base_Element="_BMql0JxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BMwscJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BMu3QJxtEeuT9elTX1485g"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_BMzIsJxtEeuT9elTX1485g" base_Element="_BMu3QJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BM094JxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BM0W0JxtEeuT9elTX1485g"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_BM1k8JxtEeuT9elTX1485g" base_Element="_BM0W0JxtEeuT9elTX1485g"/>
  <UMLLabProfile:Array xmi:id="_BM3aIJxtEeuT9elTX1485g" dimensions="4" base_Element="_BM2MAJxtEeuT9elTX1485g"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_BM4oQJxtEeuT9elTX1485g" base_Element="_BM2MAJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Array xmi:id="_BM52YJxtEeuT9elTX1485g" base_Element="_BM5PUJxtEeuT9elTX1485g"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_BM7rkJxtEeuT9elTX1485g" base_Element="_BM5PUJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Array xmi:id="_BM_V8JxtEeuT9elTX1485g" dimensions="5" base_Element="_BM-H0JxtEeuT9elTX1485g"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_BM_9AJxtEeuT9elTX1485g" base_Element="_BM-H0JxtEeuT9elTX1485g"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_BNGDoJxtEeuT9elTX1485g" base_Element="_BNCZQJxtEeuT9elTX1485g"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_BNIf4JxtEeuT9elTX1485g" base_Element="_BNGqsJxtEeuT9elTX1485g"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_BNJuAJxtEeuT9elTX1485g" base_Element="_BNIf4ZxtEeuT9elTX1485g"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_BNKVEZxtEeuT9elTX1485g" base_Element="_BNJuAZxtEeuT9elTX1485g"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_BNNYYJxtEeuT9elTX1485g" base_Element="_BNK8IJxtEeuT9elTX1485g"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_BNQbsJxtEeuT9elTX1485g" base_Element="_BNOmgJxtEeuT9elTX1485g"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_BNSQ4JxtEeuT9elTX1485g" base_Element="_BNRp0JxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BNTfAJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BNSQ4ZxtEeuT9elTX1485g"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_BNUGEJxtEeuT9elTX1485g" base_Element="_BNSQ4ZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Array xmi:id="_BNVUMJxtEeuT9elTX1485g" dimensions="5" base_Element="_BNUtIJxtEeuT9elTX1485g"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_BNWiUJxtEeuT9elTX1485g" base_Element="_BNUtIJxtEeuT9elTX1485g"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_BNYXgJxtEeuT9elTX1485g" base_Element="_BNXJYJxtEeuT9elTX1485g"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_BNaMsJxtEeuT9elTX1485g" base_Element="_BNY-kJxtEeuT9elTX1485g"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_BNdQAJxtEeuT9elTX1485g" base_Element="_BNcB4JxtEeuT9elTX1485g"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_BNeeIJxtEeuT9elTX1485g" base_Element="_BNdQAZxtEeuT9elTX1485g"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_BNgTUJxtEeuT9elTX1485g" base_Element="_BNeeIZxtEeuT9elTX1485g"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_BNivkJxtEeuT9elTX1485g" base_Element="_BNg6YJxtEeuT9elTX1485g"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_BNj9sJxtEeuT9elTX1485g" base_Element="_BNivkZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Array xmi:id="_BNmZ8JxtEeuT9elTX1485g" dimensions="2" base_Element="_BNly4JxtEeuT9elTX1485g"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_BNnoEJxtEeuT9elTX1485g" base_Element="_BNly4JxtEeuT9elTX1485g"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_BNqrYJxtEeuT9elTX1485g" base_Element="_BNnoEZxtEeuT9elTX1485g"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_BNwK8ZxtEeuT9elTX1485g" base_Element="_BNvj4JxtEeuT9elTX1485g"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_BNxZEJxtEeuT9elTX1485g" base_Element="_BNwyAJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Generics xmi:id="_BNynMJxtEeuT9elTX1485g" genericsValue="MO" base_Element="_BNxZEZxtEeuT9elTX1485g"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_BNz1UJxtEeuT9elTX1485g" base_Element="_BNxZEZxtEeuT9elTX1485g"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_BN578JxtEeuT9elTX1485g" base_Element="_BNz1UZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_BQMa8JxtEeuT9elTX1485g" base_Element="_BQLz4JxtEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_BQOQIJxtEeuT9elTX1485g" base_Element="_BQMa8ZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_BQR6gJxtEeuT9elTX1485g" base_Element="_BQO3MJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_BQTvsJxtEeuT9elTX1485g" base_Element="_BQShkJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_BQVk4JxtEeuT9elTX1485g" base_Element="_BQUWwJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_BQWL8JxtEeuT9elTX1485g" base_Element="_BQVk4ZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_BQXaEJxtEeuT9elTX1485g" base_Element="_BQWzAJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_BQbrgJxtEeuT9elTX1485g" base_Element="_BQadYJxtEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_BQeHwJxtEeuT9elTX1485g" base_Element="_BQbrgZxtEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_BQfV4JxtEeuT9elTX1485g" base_Element="_BQeu0JxtEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_BQgkAJxtEeuT9elTX1485g" base_Element="_BQf88JxtEeuT9elTX1485g"/>
  <UMLLabProfile:Reference xmi:id="_BQjAQJxtEeuT9elTX1485g" base_Element="_BQhLEJxtEeuT9elTX1485g"/>
</xmi:XMI>
